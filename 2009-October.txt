From mikej06 at mail.berlios.de  Mon Oct  5 21:04:16 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 5 Oct 2009 21:04:16 +0200
Subject: [Griffith-svn] r1308 - trunk/lib
Message-ID: <200910051904.n95J4Grt015171@sheep.berlios.de>

Author: mikej06
Date: 2009-10-05 21:04:01 +0200 (Mon, 05 Oct 2009)
New Revision: 1308

Modified:
   trunk/lib/add.py
Log:
fixed removing elements of a list within a for enumeration

Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2009-09-30 18:19:38 UTC (rev 1307)
+++ trunk/lib/add.py	2009-10-05 19:04:01 UTC (rev 1308)
@@ -639,7 +639,9 @@
         if t_movies.has_key(i) and (t_movies[i] is None or int(t_movies[i]) == 0):
             t_movies[i] = None
     if allow_only is not None:
-        for i in t_movies:
+        # iterate over a copy of the list because removing elements of a list
+        # within a for enumeration of the same list instance isn't supported
+        for i in list(t_movies):
             if not i in allow_only:
                 t_movies.pop(i)
 



From mikej06 at mail.berlios.de  Mon Oct  5 22:57:31 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 5 Oct 2009 22:57:31 +0200
Subject: [Griffith-svn] r1309 - trunk/lib
Message-ID: <200910052057.n95KvVi7001758@sheep.berlios.de>

Author: mikej06
Date: 2009-10-05 22:57:15 +0200 (Mon, 05 Oct 2009)
New Revision: 1309

Modified:
   trunk/lib/add.py
Log:
correction of previous commit: s/list/dict

Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2009-10-05 19:04:01 UTC (rev 1308)
+++ trunk/lib/add.py	2009-10-05 20:57:15 UTC (rev 1309)
@@ -639,9 +639,9 @@
         if t_movies.has_key(i) and (t_movies[i] is None or int(t_movies[i]) == 0):
             t_movies[i] = None
     if allow_only is not None:
-        # iterate over a copy of the list because removing elements of a list
-        # within a for enumeration of the same list instance isn't supported
-        for i in list(t_movies):
+        # iterate over a copy of keys of the dict because removing elements of a dict
+        # within a for enumeration of the same dict instance isn't supported
+        for i in t_movies.keys():
             if not i in allow_only:
                 t_movies.pop(i)
 



From mikej06 at mail.berlios.de  Wed Oct  7 22:35:10 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 7 Oct 2009 22:35:10 +0200
Subject: [Griffith-svn] r1310 - in trunk: . lib lib/plugins/imp
Message-ID: <200910072035.n97KZA6Y007693@sheep.berlios.de>

Author: mikej06
Date: 2009-10-07 22:34:38 +0200 (Wed, 07 Oct 2009)
New Revision: 1310

Added:
   trunk/lib/plugins/imp/DVDProfiler.py
Modified:
   trunk/ChangeLog
   trunk/NEWS
   trunk/lib/initialize.py
   trunk/lib/plugins/imp/AMC.py
   trunk/lib/plugins/imp/__init__.py
Log:
* DVD Profiler import plugin added
* very small update for AMC import plugin (medium typ)
* import base class: support for looking up medium types and adding tags, barcode, cameraman, screenplay
* import stabilized with try-except and error message box
* NEWS updated

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-10-05 20:57:15 UTC (rev 1309)
+++ trunk/ChangeLog	2009-10-07 20:34:38 UTC (rev 1310)
@@ -5,6 +5,13 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-10-07  Michael Jahn
+	* DVD Profiler import plugin added
+	* very small update for AMC import plugin (medium typ)
+	* import base class: support for looking up medium types and adding tags,
+	  barcode, cameraman, screenplay
+	* import stabilized with try-except and error message box
+
 2009-09-30  Piotr O?arowski
 	* Change log format
 

Modified: trunk/NEWS
===================================================================
--- trunk/NEWS	2009-10-05 20:57:15 UTC (rev 1309)
+++ trunk/NEWS	2009-10-07 20:34:38 UTC (rev 1310)
@@ -2,12 +2,14 @@
 =============
 * Griffith extensions feature added. You can add your own extensions in
   ~/.griffith/lib/extensions
+* New import plugins: GCstar, DVD Profiler
 
 
 Griffith 0.10.1
 ===============
 * Few posters related fixes (updating, cleaning, etc.)
 * FilmAffinity and Amazon movie plugins updated
+  (Amazon access doesn't work anymore since 15th August 2009 because Amazon changed access rules significantly)
 * Reconnect with MySQL servers once an hour (can be configured via pool_recycle
   config option)
 * Display a popup message during database upgrades

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-10-05 20:57:15 UTC (rev 1309)
+++ trunk/lib/initialize.py	2009-10-07 20:34:38 UTC (rev 1310)
@@ -428,7 +428,8 @@
     fields_to_import = ( 'number','title', 'o_title', 'director', 'year', 'runtime', 'country',
         'seen', 'rating', 'genre', 'studio', 'plot', 'cast', 'notes', 'classification',
         'site', 'o_site', 'trailer', 'medium_id', 'media_num', 'vcodec_id', 'color', 'cond',
-        'layers', 'region', 'collection_id', 'volume_id', 'image', 'ratio_id')
+        'layers', 'region', 'collection_id', 'volume_id', 'image', 'ratio_id', 'screenplay',
+        'cameraman', 'barcode', 'tags')
 
     # glade
     glade_file = gtk.glade.XML(os.path.join(self.locations['glade'], 'import.glade'))
@@ -674,6 +675,7 @@
         'o_title', 'title', 'number', 'director', 'plot', 'cast', 'notes', 'year',
         'runtime', 'country', 'genre', 'studio', 'media_num', 'rating')
     self.field_names = {
+        'barcode'        : _('Barcode'),
         'cast'           : _('Cast'),
         'cameraman'      : _('Cameraman'),
         'classification' : _('Classification'),
@@ -701,6 +703,7 @@
         'seen'           : _('Seen it'),
         'site'           : _('Site'),
         'studio'         : _('Studio'),
+        'tags'           : _('Tags'),
         'title'          : _('Title'),
         'trailer'        : _('Trailer'),
         'vcodec_id'      : _('Video codec'),

Modified: trunk/lib/plugins/imp/AMC.py
===================================================================
--- trunk/lib/plugins/imp/AMC.py	2009-10-05 20:57:15 UTC (rev 1309)
+++ trunk/lib/plugins/imp/AMC.py	2009-10-07 20:34:38 UTC (rev 1310)
@@ -164,7 +164,8 @@
             details['seen'] = self.readboolfield(self.openfile)         # Checked           1
             self.seekfield(self.openfile)                               # Media             LFFNR
             if self.fileversion >= 3.3:
-                self.seekfield(self.openfile)                           # MediaType         LFFNR   # since V 3.3
+                # setting medium_id to string mediumname; mapping is done in base class
+                details['medium_id'] = self.readstringfield(self.openfile) # MediaType         LFFNR   # since V 3.3
                 self.seekfield(self.openfile)                           # MediaSource       LFFNR   # since V 3.3
             self.seekfield(self.openfile)                               # Borrower          LFFNR
             details['o_title'] = self.readstringfield(self.openfile)    # OriginalTitle     LFFNR

Added: trunk/lib/plugins/imp/DVDProfiler.py
===================================================================
--- trunk/lib/plugins/imp/DVDProfiler.py	2009-10-05 20:57:15 UTC (rev 1309)
+++ trunk/lib/plugins/imp/DVDProfiler.py	2009-10-07 20:34:38 UTC (rev 1310)
@@ -0,0 +1,345 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import os
+import sys
+import gutils
+import string
+import struct
+import db
+from xml.dom import minidom, Node
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('DVD Profiler (version 3.x)')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[xX][mM][lL]'
+    mime_types   = None
+
+    fileversion  = None
+    filedom      = None
+    items        = None
+    itemindex    = 0
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        if self.filedom:
+            try:
+                collectionElement = self.filedom.getElementsByTagName('Collection')[0]
+                for element in collectionElement.childNodes:
+                    if element.nodeType == Node.ELEMENT_NODE and element.nodeName == 'DVD':
+                        count = count + 1
+                log.info('DVDProfiler Import: %s movies for import' % count)
+            except:
+                log.exception('')
+        else:
+            log.error('No filedom object.')
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.filedom:
+            self.filedom = minidom.parse(self.filename)
+        if not self.items:
+            collectionElement = self.filedom.getElementsByTagName('Collection')[0]
+            self.items = collectionElement.childNodes
+            self.itemindex = 0
+        if not self.items or len(self.items) < 1:
+            return None
+        if len(self.items) <= self.itemindex:
+            return None
+        item = self.items[self.itemindex]
+        while not (item.nodeType == Node.ELEMENT_NODE and item.nodeName == 'DVD') and len(self.items) > self.itemindex + 1:
+            self.itemindex = self.itemindex + 1
+            item = self.items[self.itemindex]
+        if len(self.items) <= self.itemindex:
+            return None
+
+        details = {}
+        try:
+            for node in item.childNodes:
+                if node.nodeType == Node.ELEMENT_NODE:
+                    if node.nodeName == 'Title' and len(node.childNodes) > 0:
+                        details['title'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'OriginalTitle' and len(node.childNodes) > 0:
+                        details['o_title'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'ProductionYear' and len(node.childNodes) > 0:
+                        details['year'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'RunningTime' and len(node.childNodes) > 0:
+                        details['runtime'] = node.childNodes[0].data.strip()
+                        try:
+                            details['runtime'] = int(details['runtime'])
+                        except:
+                            details['runtime'] = 0
+                    elif node.nodeName == 'Notes' and len(node.childNodes) > 0:
+                        details['notes'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Overview' and len(node.childNodes) > 0:
+                        details['plot'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Rating' and len(node.childNodes) > 0:
+                        if details.has_key('classification') and details['classification']:
+                            details['classification'] = node.childNodes[0].data.strip() + '-' + details['classification']
+                        else:
+                            details['classification'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'RatingAge' and len(node.childNodes) > 0:
+                        if details.has_key('classification') and details['classification']:
+                            details['classification'] = details['classification'] + '-' + node.childNodes[0].data.strip()
+                        else:
+                            details['classification'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Review':
+                        if self.fileversion == 2.0:
+                            reviewFilmElements = node.getElementsByTagName('ReviewFilm')
+                            if len(reviewFilmElements) and len(reviewFilmElements[0].childNodes) > 0:
+                                try:
+                                    details['rating'] = int(reviewFilmElements[0].childNodes[0].data)
+                                except:
+                                    details['rating'] = 0
+                        else:
+                            try:
+                                details['rating'] = int(node.getAttribute('Film'))
+                            except:
+                                details['rating'] = 0
+                    elif node.nodeName == 'CountryOfOrigin' and len(node.childNodes) > 0:
+                        details['country'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Credits':
+                        details['director'] = ''
+                        details['cameraman'] = ''
+                        details['screenplay'] = ''
+                        creditElements = node.getElementsByTagName('Credit')
+                        for creditElement in creditElements:
+                            if self.fileversion == 2.0:
+                                creditTypeElements = creditElement.getElementsByTagName('CreditType')
+                                if len(creditTypeElements) and creditTypeElements[0].childNodes[0].data == 'Direction':
+                                    firstNameElements = creditElement.getElementsByTagName('FirstName')
+                                    lastNameElements = creditElement.getElementsByTagName('LastName')
+                                    if len(firstNameElements) and len(firstNameElements[0].childNodes) > 0 and len(lastNameElements) and len(lastNameElements[0].childNodes) > 0:
+                                        details['director'] = details['director'] + firstNameElements[0].childNodes[0].data.strip() + ' ' + lastNameElements[0].childNodes[0].data.strip() + ', '
+                                    elif len(lastNameElements) and len(lastNameElements[0].childNodes) > 0:
+                                        details['director'] = details['director'] + lastNameElements[0].childNodes[0].data.strip() + ', '
+                                    elif len(firstNameElements) and len(firstNameElements[0].childNodes) > 0:
+                                        details['director'] = details['director'] + firstNameElements[0].childNodes[0].data.strip() + ', '
+                                elif len(creditTypeElements) and creditTypeElements[0].childNodes[0].data == 'Cinematography':
+                                    firstNameElements = creditElement.getElementsByTagName('FirstName')
+                                    lastNameElements = creditElement.getElementsByTagName('LastName')
+                                    if len(firstNameElements) and len(firstNameElements[0].childNodes) > 0 and len(lastNameElements) and len(lastNameElements[0].childNodes) > 0:
+                                        details['cameraman'] = details['cameraman'] + firstNameElements[0].childNodes[0].data.strip() + ' ' + lastNameElements[0].childNodes[0].data.strip() + ', '
+                                    elif len(lastNameElements) and len(lastNameElements[0].childNodes) > 0:
+                                        details['cameraman'] = details['cameraman'] + lastNameElements[0].childNodes[0].data.strip() + ', '
+                                    elif len(firstNameElements) and len(firstNameElements[0].childNodes) > 0:
+                                        details['cameraman'] = details['cameraman'] + firstNameElements[0].childNodes[0].data.strip() + ', '
+                                elif len(creditTypeElements) and creditTypeElements[0].childNodes[0].data == 'Writing':
+                                    firstNameElements = creditElement.getElementsByTagName('FirstName')
+                                    lastNameElements = creditElement.getElementsByTagName('LastName')
+                                    if len(firstNameElements) and len(firstNameElements[0].childNodes) > 0 and len(lastNameElements) and len(lastNameElements[0].childNodes) > 0:
+                                        details['screenplay'] = details['screenplay'] + firstNameElements[0].childNodes[0].data.strip() + ' ' + lastNameElements[0].childNodes[0].data.strip() + ', '
+                                    elif len(lastNameElements) and len(lastNameElements[0].childNodes) > 0:
+                                        details['screenplay'] = details['screenplay'] + lastNameElements[0].childNodes[0].data.strip() + ', '
+                                    elif len(firstNameElements) and len(firstNameElements[0].childNodes) > 0:
+                                        details['screenplay'] = details['screenplay'] + firstNameElements[0].childNodes[0].data.strip() + ', '
+                            else:
+                                creditType = creditElement.getAttribute('CreditType')
+                                creditSubtype = creditElement.getAttribute('CreditSubtype')
+                                if creditType == 'Direction' and creditSubtype == 'Director':
+                                    firstName = creditElement.getAttribute('FirstName').strip()
+                                    lastName = creditElement.getAttribute('LastName').strip()
+                                    if firstName and lastName:
+                                        details['director'] = details['director'] + firstName + ' ' + lastName + ', '
+                                    elif lastName:
+                                        details['director'] = details['director'] + lastName + ', '
+                                    elif firstName:
+                                        details['director'] = details['director'] + firstName + ', '
+                                elif creditType == 'Cinematography' and creditSubtype == 'Director of Photography':
+                                    firstName = creditElement.getAttribute('FirstName').strip()
+                                    lastName = creditElement.getAttribute('LastName').strip()
+                                    if firstName and lastName:
+                                        details['cameraman'] = details['cameraman'] + firstName + ' ' + lastName + ', '
+                                    elif lastName:
+                                        details['cameraman'] = details['cameraman'] + lastName + ', '
+                                    elif firstName:
+                                        details['cameraman'] = details['cameraman'] + firstName + ', '
+                                elif creditType == 'Writing' and creditSubtype == 'Writer':
+                                    firstName = creditElement.getAttribute('FirstName').strip()
+                                    lastName = creditElement.getAttribute('LastName').strip()
+                                    if firstName and lastName:
+                                        details['screenplay'] = details['screenplay'] + firstName + ' ' + lastName + ', '
+                                    elif lastName:
+                                        details['screenplay'] = details['screenplay'] + lastName + ', '
+                                    elif firstName:
+                                        details['screenplay'] = details['screenplay'] + firstName + ', '
+                        if len(details['director']) > 2:
+                            details['director'] = details['director'][:-2]
+                        if len(details['cameraman']) > 2:
+                            details['cameraman'] = details['cameraman'][:-2]
+                        if len(details['screenplay']) > 2:
+                            details['screenplay'] = details['screenplay'][:-2]
+                    elif node.nodeName == 'Actors':
+                        details['cast'] = ''
+                        actorElements = node.getElementsByTagName('Actor')
+                        for actorElement in actorElements:
+                            if self.fileversion == 2.0:
+                                firstNameElements = actorElement.getElementsByTagName('FirstName')
+                                lastNameElements = actorElement.getElementsByTagName('LastName')
+                                roleElements = actorElement.getElementsByTagName('Role')
+                                actor = ''
+                                if len(firstNameElements) and len(firstNameElements[0].childNodes) > 0:
+                                    actor = actor + firstNameElements[0].childNodes[0].data.strip() + ' '
+                                if len(lastNameElements) and len(lastNameElements[0].childNodes) > 0:
+                                    actor = actor + lastNameElements[0].childNodes[0].data.strip() + ' '
+                                if len(roleElements) and len(roleElements[0].childNodes) > 0:
+                                    if len(actor) > 1:
+                                        actor = actor[:-1] + _(' as ') + roleElements[0].childNodes[0].data.strip()
+                                    else:
+                                        actor = actor + _(' as ') + roleElements[0].childNodes[0].data.strip()
+                                elif len(actor) > 1:
+                                    actor = actor[:-1]
+                                if actor:
+                                    details['cast'] = details['cast'] + actor + "\n"
+                            else:
+                                firstName = actorElement.getAttribute('FirstName').strip()
+                                middleName = actorElement.getAttribute('MiddleName').strip()
+                                lastName = actorElement.getAttribute('LastName').strip()
+                                role = actorElement.getAttribute('Role').strip()
+                                actor = ''
+                                if firstName:
+                                    actor = firstName + ' '
+                                if middleName:
+                                    actor = actor + middleName + ' '
+                                if lastName:
+                                    actor = actor + lastName + ' '
+                                if role:
+                                    if len(actor) > 1:
+                                        actor = actor[:-1] + _(' as ') + role
+                                    else:
+                                        actor = actor + _(' as ') + role
+                                elif len(actor) > 0:
+                                    actor = actor[:-1]
+                                if actor:
+                                    details['cast'] = details['cast'] + actor + "\n"
+                    elif node.nodeName == 'Genres':
+                        details['genre'] = ''
+                        genreElements = node.getElementsByTagName('Genre')
+                        for genreElement in genreElements:
+                            if len(genreElement.childNodes) > 0:
+                                details['genre'] = details['genre'] + genreElement.childNodes[0].data.strip() + ', '
+                        if details['genre'] > 2:
+                            details['genre'] = details['genre'][:-2]
+                    elif node.nodeName == 'Studios':
+                        details['studio'] = ''
+                        studioElements = node.getElementsByTagName('Studio')
+                        for studioElement in studioElements:
+                            if len(studioElement.childNodes) > 0:
+                                details['studio'] = details['studio'] + studioElement.childNodes[0].data.strip() + ', '
+                        if details['studio'] > 2:
+                            details['studio'] = details['studio'][:-2]
+                    elif node.nodeName == 'Regions':
+                        regionElements = node.getElementsByTagName('Region')
+                        for regionElement in regionElements:
+                            if len(regionElement.childNodes) > 0:
+                                try:
+                                    details['region'] = int(regionElement.childNodes[0].data)
+                                except:
+                                    pass
+                                break
+                    elif node.nodeName == 'UPC' and len(node.childNodes) > 0:
+                        details['barcode'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'MediaTypes':
+                        for mediumnode in node.childNodes:
+                            if mediumnode.nodeType == Node.ELEMENT_NODE:
+                                if len(mediumnode.childNodes) > 0 and mediumnode.childNodes[0].data == 'True':
+                                    # setting medium_id to string mediumname; mapping is done in base class
+                                    details['medium_id'] = mediumnode.nodeName
+                                    break
+                    elif node.nodeName == 'Discs':
+                        discElements = node.getElementsByTagName('Disc')
+                        details['media_num'] = len(discElements)
+                    elif node.nodeName == 'Tags':
+                        tagElements = node.getElementsByTagName('Tag')
+                        if len(tagElements):
+                            details['tags'] = []
+                            for tagElement in tagElements:
+                                details['tags'].append(tagElement.getAttribute('Name').strip())
+        except EOFError:
+            details = None
+        except Exception, e:
+            log.exception('')
+            details = None
+        self.itemindex = self.itemindex +  1
+        print details
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.filedom:
+            self.filedom.unlink()
+            self.filedom = None
+            self.fileversion = None
+            self.items = None
+            self.itemindex = 0
+
+    def destroy(self):
+        """close all resources"""
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        self.filedom = minidom.parse(self.filename)
+        try:
+            collectionElement = self.filedom.getElementsByTagName('Collection')[0]
+            dvdElements = collectionElement.childNodes
+            for dvdElement in dvdElements:
+                if dvdElement.nodeType == dvdElement.ELEMENT_NODE and dvdElement.nodeName == 'DVD':
+                    actorsElements = dvdElement.getElementsByTagName('Actors')
+                    if len(actorsElements):
+                        actorElements = actorsElements[0].getElementsByTagName('Actor')
+                        if len(actorElements):
+                            if actorElements[0].hasAttribute('FirstName'):
+                                version = 3.0
+                            if len(actorElements[0].getElementsByTagName('FirstName')):
+                                version = 2.0
+                            break
+        except Exception, e:
+            log.error(str(e))
+            self.filedom.unlink()
+            self.filedom = None
+        return version;
+


Property changes on: trunk/lib/plugins/imp/DVDProfiler.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/lib/plugins/imp/__init__.py
===================================================================
--- trunk/lib/plugins/imp/__init__.py	2009-10-05 20:57:15 UTC (rev 1309)
+++ trunk/lib/plugins/imp/__init__.py	2009-10-07 20:34:38 UTC (rev 1310)
@@ -48,6 +48,10 @@
     imported = 0
     data = None
 
+    # mapping dicts name to id
+    mediummap    = None
+    tagmap       = None
+
     def __init__(self, parent, fields_to_import):
         self.db = parent.db
         self.locations = parent.locations
@@ -61,6 +65,26 @@
         self.fields_to_import = fields_to_import
         self._continue = True
 
+    def loadmappings(self):
+        self.mediummap = {}
+        self.tagmap = {}
+        # medium
+        for medium in self.db.session.query(db.Medium.medium_id, db.Medium.name).all():
+            # original name
+            mediumname = medium.name.lower()
+            if not self.mediummap.has_key(mediumname):
+                self.mediummap[mediumname] = medium.medium_id
+            # normalized name
+            mediumname = mediumname.replace('-', '')
+            mediumname = mediumname.replace(' ', '')
+            if not self.mediummap.has_key(mediumname):
+                self.mediummap[mediumname] = medium.medium_id
+        # tags
+        for tag in self.db.session.query(db.Tag.tag_id, db.Tag.name).all():
+            tagname = tag.name.lower()
+            if not self.tagmap.has_key(tagname):
+                self.tagmap[tagname] = tag.tag_id
+
     def initialize(self):
         """Initializes plugin (get all parameters from user, etc.)"""
         self.imported = 0
@@ -161,20 +185,52 @@
                         details['number'] = number
                         #movie = db.Movie()
                         #movie.add_to_db(details)
+                        if details.has_key('tags'):
+                            tags = details.pop('tags')
+                        else:
+                            tags = None
                         try:
-                            db.tables.movies.insert(bind=self.db.session.bind).execute(details)
+                            # optional: do mapping of lookup data
+                            # (TODO: perhaps adding new lookup values?)
+                            try:
+                                if details.has_key('medium_id'):
+                                    medium_id = int(details['medium_id'])
+                            except:
+                                try:
+                                    if self.mediummap is None:
+                                        self.loadmappings()
+                                    medium_id = details['medium_id'].lower()
+                                    if self.mediummap.has_key(medium_id):
+                                        details['medium_id'] = self.mediummap[medium_id]
+                                except:
+                                    pass
+                            # insert the movie in the database
+                            movie = db.tables.movies.insert(bind=self.db.session.bind).execute(details)
                             self.imported += 1
+                            # optional: adding tags
+                            if tags:
+                                if self.tagmap is None:
+                                    self.loadmappings()
+                                for tag in tags:
+                                    try:
+                                        if isinstance(tag, (str, unicode)):
+                                            # TODO: adding new tag names?
+                                            tag_id = self.tagmap[tag.lower()]
+                                        else:
+                                            tag_id = int(tag)
+                                        db.tables.movie_tag.insert(bind=self.db.session.bind).execute({ 'movie_id':movie.lastrowid, 'tag_id':tag_id })
+                                    except:
+                                        pass
                         except Exception, e:
                             log.info("movie details are not unique, skipping: %s", e)
                         numbers.add(number)
                 else:
                     log.info('skipping movie without title and original title')
-        except Exception, e:
-            log.error(str(e))
-        log.info("Import process took %s s; %s/%s movies imported", (time.time() - begin), processed, count)
-        if gc_was_enabled:
-            gc.enable()
-        self.widgets['pwindow'].hide()
+        finally:
+            log.info("Import process took %s s; %s/%s movies imported", (time.time() - begin), processed, count)
+            if gc_was_enabled:
+                gc.enable()
+            self.widgets['pwindow'].hide()
         return True
 
     def clear(self):
@@ -241,19 +297,24 @@
     ip = eval("plugins.imp.%s.ImportPlugin(self, fields)" % plugin_name)
     if ip.initialize():
         self.widgets['window'].set_sensitive(False)
-        self.widgets['import']['window'].hide()
-        self.widgets['import']['pabort'].connect('clicked', ip.abort, ip)
-        for filename in filenames:
-            self.widgets['import']['progressbar'].set_fraction(0)
-            self.widgets['import']['progressbar'].set_text('')
-            if ip.run(filename):
-                gutils.info(_("%s file has been imported. %s movies added.") \
-                    % (plugin_name, ip.imported), self.widgets['window'])
-                self.populate_treeview()
-            ip.clear()
-        ip.destroy()
-        self.widgets['import']['pwindow'].hide()
-        self.widgets['window'].set_sensitive(True)
+        try:
+            self.widgets['import']['window'].hide()
+            self.widgets['import']['pabort'].connect('clicked', ip.abort, ip)
+            for filename in filenames:
+                self.widgets['import']['progressbar'].set_fraction(0)
+                self.widgets['import']['progressbar'].set_text('')
+                if ip.run(filename):
+                    gutils.info(_("%s file has been imported. %s movies added.") \
+                        % (plugin_name, ip.imported), self.widgets['window'])
+                    self.populate_treeview()
+                ip.clear()
+        except Exception, e:
+            log.exception('')
+            gutils.error(self, str(e), self.widgets['window'])
+        finally:
+            ip.destroy()
+            self.widgets['import']['pwindow'].hide()
+            self.widgets['window'].set_sensitive(True)
 
 def on_abort_button_clicked(button, self, *args):
     self.widgets['import']['window'].hide()



From mikej06 at mail.berlios.de  Thu Oct  8 20:49:32 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 8 Oct 2009 20:49:32 +0200
Subject: [Griffith-svn] r1311 - trunk/lib/plugins/imp
Message-ID: <200910081849.n98InWbs020042@sheep.berlios.de>

Author: mikej06
Date: 2009-10-08 20:49:19 +0200 (Thu, 08 Oct 2009)
New Revision: 1311

Modified:
   trunk/lib/plugins/imp/DVDProfiler.py
   trunk/lib/plugins/imp/__init__.py
Log:
changed "has_key" to "in"

Modified: trunk/lib/plugins/imp/DVDProfiler.py
===================================================================
--- trunk/lib/plugins/imp/DVDProfiler.py	2009-10-07 20:34:38 UTC (rev 1310)
+++ trunk/lib/plugins/imp/DVDProfiler.py	2009-10-08 18:49:19 UTC (rev 1311)
@@ -303,7 +303,6 @@
             log.exception('')
             details = None
         self.itemindex = self.itemindex +  1
-        print details
         return details
 
     def clear(self):

Modified: trunk/lib/plugins/imp/__init__.py
===================================================================
--- trunk/lib/plugins/imp/__init__.py	2009-10-07 20:34:38 UTC (rev 1310)
+++ trunk/lib/plugins/imp/__init__.py	2009-10-08 18:49:19 UTC (rev 1311)
@@ -72,17 +72,17 @@
         for medium in self.db.session.query(db.Medium.medium_id, db.Medium.name).all():
             # original name
             mediumname = medium.name.lower()
-            if not self.mediummap.has_key(mediumname):
+            if not mediumname in self.mediummap:
                 self.mediummap[mediumname] = medium.medium_id
             # normalized name
             mediumname = mediumname.replace('-', '')
             mediumname = mediumname.replace(' ', '')
-            if not self.mediummap.has_key(mediumname):
+            if not mediumname in self.mediummap:
                 self.mediummap[mediumname] = medium.medium_id
         # tags
         for tag in self.db.session.query(db.Tag.tag_id, db.Tag.name).all():
             tagname = tag.name.lower()
-            if not self.tagmap.has_key(tagname):
+            if not tagname in self.tagmap:
                 self.tagmap[tagname] = tag.tag_id
 
     def initialize(self):
@@ -185,7 +185,7 @@
                         details['number'] = number
                         #movie = db.Movie()
                         #movie.add_to_db(details)
-                        if details.has_key('tags'):
+                        if 'tags' in details:
                             tags = details.pop('tags')
                         else:
                             tags = None
@@ -193,14 +193,14 @@
                             # optional: do mapping of lookup data
                             # (TODO: perhaps adding new lookup values?)
                             try:
-                                if details.has_key('medium_id'):
+                                if 'medium_id' in details:
                                     medium_id = int(details['medium_id'])
                             except:
                                 try:
                                     if self.mediummap is None:
                                         self.loadmappings()
                                     medium_id = details['medium_id'].lower()
-                                    if self.mediummap.has_key(medium_id):
+                                    if medium_id in self.mediummap:
                                         details['medium_id'] = self.mediummap[medium_id]
                                 except:
                                     pass



From mikej06 at mail.berlios.de  Thu Oct  8 21:21:40 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 8 Oct 2009 21:21:40 +0200
Subject: [Griffith-svn] r1312 - trunk/lib
Message-ID: <200910081921.n98JLep0023744@sheep.berlios.de>

Author: mikej06
Date: 2009-10-08 21:21:25 +0200 (Thu, 08 Oct 2009)
New Revision: 1312

Modified:
   trunk/lib/initialize.py
Log:
reintroduce the empty element in the volume combobox which is a partly fix for
[#445906] It doesn't show the volume in main window


Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-10-08 18:49:19 UTC (rev 1311)
+++ trunk/lib/initialize.py	2009-10-08 19:21:25 UTC (rev 1312)
@@ -802,7 +802,7 @@
     self.volume_combo_ids = {}
     self.volume_combo_ids[0] = 0
     for i, item in enumerate(self.db.session.query(db.Volume.volume_id).all()):
-        self.volume_combo_ids[i] = item.volume_id
+        self.volume_combo_ids[i+1] = item.volume_id
 
 def update_collection_combo_ids(self):
     self.collection_combo_ids = {}



From mikej06 at mail.berlios.de  Tue Oct 13 21:31:08 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 13 Oct 2009 21:31:08 +0200
Subject: [Griffith-svn] r1313 - in trunk: . lib lib/plugins/imp
Message-ID: <200910131931.n9DJV8LN026063@sheep.berlios.de>

Author: mikej06
Date: 2009-10-13 21:29:56 +0200 (Tue, 13 Oct 2009)
New Revision: 1313

Modified:
   trunk/ChangeLog
   trunk/lib/edit.py
   trunk/lib/initialize.py
   trunk/lib/plugins/imp/AMC.py
   trunk/lib/plugins/imp/DVDProfiler.py
   trunk/lib/plugins/imp/GCstar.py
   trunk/lib/plugins/imp/__init__.py
Log:
* support for posters for import plugins GCstar and AMC
* [#410362] AMC importer doesn't import cover pictures

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-10-08 19:21:25 UTC (rev 1312)
+++ trunk/ChangeLog	2009-10-13 19:29:56 UTC (rev 1313)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-10-13  Michael Jahn
+	* support for posters for import plugins GCstar and AMC
+	* [#410362] AMC importer doesn't import cover pictures
+
 2009-10-07  Michael Jahn
 	* DVD Profiler import plugin added
 	* very small update for AMC import plugin (medium typ)

Modified: trunk/lib/edit.py
===================================================================
--- trunk/lib/edit.py	2009-10-08 19:21:25 UTC (rev 1312)
+++ trunk/lib/edit.py	2009-10-13 19:29:56 UTC (rev 1313)
@@ -124,5 +124,7 @@
     (tmp_model, tmp_iter) = treeselection.get_selected()
     self.Image.set_from_file(t_image_path)
     pixbuf = self.Image.get_pixbuf()
-    self.treemodel.set_value(tmp_iter, 1, pixbuf)
+    # tmp_iter can be None while importing data
+    if tmp_iter:
+        self.treemodel.set_value(tmp_iter, 1, pixbuf)
 

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-10-08 19:21:25 UTC (rev 1312)
+++ trunk/lib/initialize.py	2009-10-13 19:29:56 UTC (rev 1313)
@@ -429,7 +429,7 @@
         'seen', 'rating', 'genre', 'studio', 'plot', 'cast', 'notes', 'classification',
         'site', 'o_site', 'trailer', 'medium_id', 'media_num', 'vcodec_id', 'color', 'cond',
         'layers', 'region', 'collection_id', 'volume_id', 'image', 'ratio_id', 'screenplay',
-        'cameraman', 'barcode', 'tags')
+        'cameraman', 'barcode', 'tags', 'poster')
 
     # glade
     glade_file = gtk.glade.XML(os.path.join(self.locations['glade'], 'import.glade'))
@@ -695,6 +695,7 @@
         'o_site'         : _('Official site'),
         'o_title'        : _('Original Title'),
         'plot'           : _('Plot'),
+        'poster'         : _('Poster'),
         'ratio_id'       : _('Aspect ratio'),
         'rating'         : _('Rating'),
         'region'         : _('Region'),

Modified: trunk/lib/plugins/imp/AMC.py
===================================================================
--- trunk/lib/plugins/imp/AMC.py	2009-10-08 19:21:25 UTC (rev 1312)
+++ trunk/lib/plugins/imp/AMC.py	2009-10-13 19:29:56 UTC (rev 1313)
@@ -94,7 +94,7 @@
     description  = _('Ant Movie Catalog (version 3.5)')
     author       = 'Michael Jahn'
     email        = 'griffith-private at lists.berlios.de'
-    version      = '1.0'
+    version      = '1.1'
     file_filters = '*.[aA][mM][cC]'
     mime_types   = None
 
@@ -185,8 +185,12 @@
             self.seekfield(self.openfile)                               # Languages         LFFNR
             self.seekfield(self.openfile)                               # Subtitles         LFFNR
             self.seekfield(self.openfile)                               # Size              LFFNR
-            self.seekfield(self.openfile)                               # Picture           LFFNR
-            self.seekfield(self.openfile)                               # PictureData       LFFNR
+            posterfilename = self.readstringfield(self.openfile)        # Picture           LFFNR
+            posterdata = self.readbinaryfield(self.openfile)            # PictureData       LFFNR
+            if posterdata:
+                details['poster'] = posterdata
+            elif posterfilename and len(posterfilename) > 4:
+                details['poster'] = posterfilename
             
             if details['title'] == None:
                 details['title'] = details['o_title']
@@ -265,4 +269,14 @@
         intValue = ord(byteStr[0])
         if intValue == -1:
             return None
-        return intValue != 0
\ No newline at end of file
+        return intValue != 0
+
+    def readbinaryfield(self, ifile):
+        field = None
+        lenStr = ifile.read(4)
+        if len(lenStr) < 4:
+            raise EOFError
+        lenTuple = struct.unpack('i', lenStr)
+        if lenTuple[0]:
+            field = ifile.read(lenTuple[0])
+        return field
\ No newline at end of file

Modified: trunk/lib/plugins/imp/DVDProfiler.py
===================================================================
--- trunk/lib/plugins/imp/DVDProfiler.py	2009-10-08 19:21:25 UTC (rev 1312)
+++ trunk/lib/plugins/imp/DVDProfiler.py	2009-10-13 19:29:56 UTC (rev 1313)
@@ -94,6 +94,8 @@
             item = self.items[self.itemindex]
         if len(self.items) <= self.itemindex:
             return None
+        if not len(item.childNodes):
+            return None
 
         details = {}
         try:

Modified: trunk/lib/plugins/imp/GCstar.py
===================================================================
--- trunk/lib/plugins/imp/GCstar.py	2009-10-08 19:21:25 UTC (rev 1312)
+++ trunk/lib/plugins/imp/GCstar.py	2009-10-13 19:29:56 UTC (rev 1313)
@@ -96,6 +96,18 @@
             details['site']           = item.getAttribute('webPage')
             details['seen']           = item.getAttribute('seen') == '1'
             details['director']       = item.getAttribute('director')
+            # image filenames are mostly a absolute path at the original system
+            # which should be now a relative path to the xml database file
+            imagefilename             = item.getAttribute('image')
+            previoustail = ''
+            previoushead = imagefilename
+            while not os.path.exists(imagefilename) and previoushead:
+                (head, tail) = os.path.split(previoushead)
+                imagefilename = os.path.join(os.path.join(os.path.dirname(self.filename), tail), previoustail)
+                previoustail = tail
+                previoushead = head
+            if os.path.exists(imagefilename):
+                details['poster'] = imagefilename
             try:
                 details['number']     = int(item.getAttribute('id'))
             except:

Modified: trunk/lib/plugins/imp/__init__.py
===================================================================
--- trunk/lib/plugins/imp/__init__.py	2009-10-08 19:21:25 UTC (rev 1312)
+++ trunk/lib/plugins/imp/__init__.py	2009-10-13 19:29:56 UTC (rev 1313)
@@ -22,13 +22,16 @@
 # GNU General Public License, version 2 or later
 
 import glob
+import os
 import os.path
 import time
 import gc
+from tempfile import mkstemp
 import logging
 log = logging.getLogger("Griffith")
 
 import db
+import edit
 
 # detect all plugins:
 __all__ = [os.path.basename(x)[:-3] for x in glob.glob("%s/*.py" % os.path.dirname(__file__))]
@@ -53,6 +56,7 @@
     tagmap       = None
 
     def __init__(self, parent, fields_to_import):
+        self.parent = parent
         self.db = parent.db
         self.locations = parent.locations
         self.fields = parent.field_names
@@ -96,6 +100,8 @@
 
     def set_source(self, name):
         """Prepare source (open file, etc.)"""
+        # change current dir because there are posters with relative paths (perhaps)
+        os.chdir(os.path.dirname(name))
 
     def count_movies(self):
         """Returns number of movies in file which is about to be imported"""
@@ -153,7 +159,7 @@
                 details = self.get_movie_details()
                 if details is None:
                     break
-                
+
                 processed += 1
                 if processed in update_on:
                     set_fraction(float(processed)/count)
@@ -189,6 +195,10 @@
                             tags = details.pop('tags')
                         else:
                             tags = None
+                        if 'poster' in details:
+                            poster = details.pop('poster')
+                        else:
+                            poster = None
                         try:
                             # optional: do mapping of lookup data
                             # (TODO: perhaps adding new lookup values?)
@@ -221,8 +231,27 @@
                                         db.tables.movie_tag.insert(bind=self.db.session.bind).execute({ 'movie_id':movie.lastrowid, 'tag_id':tag_id })
                                     except:
                                         pass
+                            # adding poster
+                            if poster:
+                                # check for JPEG/PNG header otherwise it should be a filename 
+                                if len(poster) > 4 and \
+                                    ((ord(poster[0]) == 0xFF and ord(poster[1]) == 0xD8 and ord(poster[2]) == 0xFF and ord(poster[3]) == 0xE0) or
+                                     (ord(poster[0]) == 0x89 and ord(poster[1]) == 0x50 and ord(poster[2]) == 0x4E and ord(poster[3]) == 0x47)):
+                                    # make a temporary file
+                                    try:
+                                        posterfilefd, posterfilename = mkstemp('.img')
+                                        try:
+                                            os.write(posterfilefd, poster)
+                                        finally:
+                                            os.close(posterfilefd)
+                                        edit.update_image(self.parent, number, posterfilename)
+                                    finally:
+                                        if os.path.isfile(posterfilename):
+                                            os.remove(posterfilename)
+                                else:
+                                    edit.update_image(self.parent, number, poster)
                         except Exception, e:
-                            log.info("movie details are not unique, skipping: %s", e)
+                            log.exception("movie details are not unique, skipping")
                         numbers.add(number)
                 else:
                     log.info('skipping movie without title and original title')



From mikej06 at mail.berlios.de  Tue Oct 13 21:42:15 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 13 Oct 2009 21:42:15 +0200
Subject: [Griffith-svn] r1314 - trunk/lib/plugins/imp
Message-ID: <200910131942.n9DJgFS4026764@sheep.berlios.de>

Author: mikej06
Date: 2009-10-13 21:41:54 +0200 (Tue, 13 Oct 2009)
New Revision: 1314

Modified:
   trunk/lib/plugins/imp/__init__.py
Log:
set medium_id to None if the value is not an int or when it can't be mapped to a lookup value

Modified: trunk/lib/plugins/imp/__init__.py
===================================================================
--- trunk/lib/plugins/imp/__init__.py	2009-10-13 19:29:56 UTC (rev 1313)
+++ trunk/lib/plugins/imp/__init__.py	2009-10-13 19:41:54 UTC (rev 1314)
@@ -212,8 +212,10 @@
                                     medium_id = details['medium_id'].lower()
                                     if medium_id in self.mediummap:
                                         details['medium_id'] = self.mediummap[medium_id]
+                                    else:
+                                        details['medium_id'] = None
                                 except:
-                                    pass
+                                    details['medium_id'] = None
                             # insert the movie in the database
                             movie = db.tables.movies.insert(bind=self.db.session.bind).execute(details)
                             self.imported += 1



From mikej06 at mail.berlios.de  Fri Oct 16 22:23:09 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Fri, 16 Oct 2009 22:23:09 +0200
Subject: [Griffith-svn] r1315 - in trunk: . lib/plugins/imp
Message-ID: <200910162023.n9GKN9WP014495@sheep.berlios.de>

Author: mikej06
Date: 2009-10-16 22:22:34 +0200 (Fri, 16 Oct 2009)
New Revision: 1315

Added:
   trunk/lib/plugins/imp/eXtremeMovieManager.py
Modified:
   trunk/ChangeLog
   trunk/lib/plugins/imp/__init__.py
Log:
* eXtreme Movie Manager import plugin added
* import support for movie detail video codec

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-10-13 19:41:54 UTC (rev 1314)
+++ trunk/ChangeLog	2009-10-16 20:22:34 UTC (rev 1315)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-10-16  Michael Jahn
+	* eXtreme Movie Manager import plugin added
+	* import support for movie detail video codec
+
 2009-10-13  Michael Jahn
 	* support for posters for import plugins GCstar and AMC
 	* [#410362] AMC importer doesn't import cover pictures

Modified: trunk/lib/plugins/imp/__init__.py
===================================================================
--- trunk/lib/plugins/imp/__init__.py	2009-10-13 19:41:54 UTC (rev 1314)
+++ trunk/lib/plugins/imp/__init__.py	2009-10-16 20:22:34 UTC (rev 1315)
@@ -54,6 +54,7 @@
     # mapping dicts name to id
     mediummap    = None
     tagmap       = None
+    vcodecsmap   = None
 
     def __init__(self, parent, fields_to_import):
         self.parent = parent
@@ -72,6 +73,7 @@
     def loadmappings(self):
         self.mediummap = {}
         self.tagmap = {}
+        self.vcodecsmap = {}
         # medium
         for medium in self.db.session.query(db.Medium.medium_id, db.Medium.name).all():
             # original name
@@ -88,6 +90,11 @@
             tagname = tag.name.lower()
             if not tagname in self.tagmap:
                 self.tagmap[tagname] = tag.tag_id
+        # vcodecs
+        for vcodec in self.db.session.query(db.VCodec.vcodec_id, db.VCodec.name).all():
+            vcodecname = vcodec.name.lower()
+            if not vcodecname in self.vcodecsmap:
+                self.vcodecsmap[vcodecname] = vcodec.vcodec_id
 
     def initialize(self):
         """Initializes plugin (get all parameters from user, etc.)"""
@@ -216,6 +223,20 @@
                                         details['medium_id'] = None
                                 except:
                                     details['medium_id'] = None
+                            try:
+                                if 'vcodec_id' in details:
+                                    vcodec_id = int(details['vcodec_id'])
+                            except:
+                                try:
+                                    if self.vcodecsmap is None:
+                                        self.loadmappings()
+                                    vcodec_id = details['vcodec_id'].lower()
+                                    if vcodec_id in self.vcodecsmap:
+                                        details['vcodec_id'] = self.vcodecsmap[vcodec_id]
+                                    else:
+                                        details['vcodec_id'] = None
+                                except:
+                                    details['vcodec_id'] = None
                             # insert the movie in the database
                             movie = db.tables.movies.insert(bind=self.db.session.bind).execute(details)
                             self.imported += 1

Added: trunk/lib/plugins/imp/eXtremeMovieManager.py
===================================================================
--- trunk/lib/plugins/imp/eXtremeMovieManager.py	2009-10-13 19:41:54 UTC (rev 1314)
+++ trunk/lib/plugins/imp/eXtremeMovieManager.py	2009-10-16 20:22:34 UTC (rev 1315)
@@ -0,0 +1,232 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import os
+import sys
+import gutils
+import string
+import struct
+import db
+from xml.dom import minidom, Node
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('eXtreme Movie Manager (version 6.x / 7.x)')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[xX][mM][lL]'
+    mime_types   = None
+
+    fileversion  = None
+    filedom      = None
+    items        = None
+    itemindex    = 0
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        if self.filedom:
+            try:
+                collectionElement = self.filedom.getElementsByTagName('XMM_Movie_Database')[0]
+                for element in collectionElement.childNodes:
+                    if element.nodeType == Node.ELEMENT_NODE and element.nodeName == 'Movie':
+                        count = count + 1
+                log.info('eXtreme Movie Manager Import: %s movies for import' % count)
+            except:
+                log.exception('')
+        else:
+            log.error('eXtreme Movie Manager Import: No filedom object.')
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.filedom:
+            self.filedom = minidom.parse(self.filename)
+        if not self.items:
+            databaseElement = self.filedom.getElementsByTagName('XMM_Movie_Database')[0]
+            self.items = databaseElement.childNodes
+            self.itemindex = 0
+        if not self.items or len(self.items) < 1:
+            return None
+        if len(self.items) <= self.itemindex:
+            return None
+        item = self.items[self.itemindex]
+        while not (item.nodeType == Node.ELEMENT_NODE and item.nodeName == 'Movie') and len(self.items) > self.itemindex + 1:
+            self.itemindex = self.itemindex + 1
+            item = self.items[self.itemindex]
+        if len(self.items) <= self.itemindex:
+            return None
+        if not len(item.childNodes):
+            return None
+
+        details = {}
+        try:
+            for node in item.childNodes:
+                if node.nodeType == Node.ELEMENT_NODE:
+                    if node.nodeName == 'Title' and len(node.childNodes) > 0:
+                        details['title'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'OriginalTitle' and len(node.childNodes) > 0:
+                        details['o_title'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Year' and len(node.childNodes) > 0:
+                        details['year'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'URL' and len(node.childNodes) > 0:
+                        details['o_site'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'WebLinkScript' and len(node.childNodes) > 0:
+                        details['site'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'TrailerFile1' and len(node.childNodes) > 0:
+                        details['trailer'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'MPAA' and len(node.childNodes) > 0:
+                        details['classification'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Country' and len(node.childNodes) > 0:
+                        details['country'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Genre' and len(node.childNodes) > 0:
+                        details['genre'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Studio' and len(node.childNodes) > 0:
+                        details['studio'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'UPC' and len(node.childNodes) > 0:
+                        details['barcode'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Region' and len(node.childNodes) > 0:
+                        details['region'] = node.childNodes[0].data[0]
+                    elif node.nodeName == 'Length' and len(node.childNodes) > 0:
+                        details['runtime'] = node.childNodes[0].data.strip()
+                        try:
+                            details['runtime'] = int(details['runtime'])
+                        except:
+                            details['runtime'] = 0
+                    elif node.nodeName == 'Director' and len(node.childNodes) > 0:
+                        details['director'] = node.childNodes[0].data.strip().replace('|', ', ')
+                    elif node.nodeName == 'Writer' and len(node.childNodes) > 0:
+                        details['screenplay'] = node.childNodes[0].data.strip().replace('|', ', ')
+                    elif node.nodeName == 'Photographer' and len(node.childNodes) > 0:
+                        details['cameraman'] = node.childNodes[0].data.strip().replace('|', ', ')
+                    elif node.nodeName == 'Notes' and len(node.childNodes) > 0:
+                        details['notes'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Plot' and len(node.childNodes) > 0:
+                        details['plot'] = node.childNodes[0].data.strip()
+                    elif node.nodeName == 'Cover' and len(node.childNodes) > 0:
+                        details['poster'] = os.path.join('images', node.childNodes[0].data.strip())
+                    elif node.nodeName == 'Rating' and len(node.childNodes) > 0:
+                        if not 'rating' in details:
+                            try:
+                                details['rating'] = int(node.childNodes[0].data)
+                            except:
+                                details['rating'] = 0
+                    elif node.nodeName == 'PersonalRating' and len(node.childNodes) > 0:
+                        try:
+                            details['rating'] = int(node.childNodes[0].data)
+                        except:
+                            details['rating'] = 0
+                    elif node.nodeName == 'Seen' and len(node.childNodes) > 0:
+                        details['seen'] = (node.childNodes[0].data == 'True')
+                    elif node.nodeName == 'Actors' and len(node.childNodes) > 0:
+                        details['cast'] = ''
+                        for actor in node.childNodes:
+                            if actor.nodeType == Node.ELEMENT_NODE and actor.nodeName == 'Actor':
+                                actorname = None
+                                actorrole = None
+                                for actorDetail in actor.childNodes:
+                                    if actorDetail.nodeType == Node.ELEMENT_NODE and len(actorDetail.childNodes) > 0:
+                                        if actorDetail.nodeName == 'ActorName':
+                                            actorname = actorDetail.childNodes[0].data.strip()
+                                        elif actorDetail.nodeName == 'ActorRole':
+                                            actorrole = actorDetail.childNodes[0].data.strip()
+                                if actorname:
+                                    if actorrole:
+                                        details['cast'] = details['cast'] + actorname + _(' as ') + actorrole + '\n'
+                                    else:
+                                        details['cast'] = details['cast'] + actorname + '\n'
+                    elif node.nodeName == 'Disks' and len(node.childNodes) > 0:
+                        try:
+                            details['media_num'] = int(node.childNodes[0].data)
+                        except:
+                            pass
+                    elif node.nodeName == 'Media' and len(node.childNodes) > 0:
+                        details['vcodec_id'] = node.childNodes[0].data
+                    elif node.nodeName == 'Color' and len(node.childNodes) > 0:
+                        if node.childNodes[0].data == 'False':
+                            details['color'] = 2
+                        else:
+                            details['color'] = 1
+        except EOFError:
+            details = None
+        except Exception, e:
+            log.exception('')
+            details = None
+        self.itemindex = self.itemindex +  1
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.filedom:
+            self.filedom.unlink()
+            self.filedom = None
+            self.fileversion = None
+            self.items = None
+            self.itemindex = 0
+
+    def destroy(self):
+        """close all resources"""
+        self.clear()
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        self.filedom = minidom.parse(self.filename)
+        try:
+            collectionElement = self.filedom.getElementsByTagName('XMM_Movie_Database')[0]
+            movieElements = collectionElement.childNodes
+            for movieElement in movieElements:
+                if movieElement.nodeType == Node.ELEMENT_NODE and movieElement.nodeName == 'Movie':
+                    version = 6.0
+                    for movieDetailElement in movieElement.childNodes:
+                        if movieDetailElement.nodeType == Node.ELEMENT_NODE and movieDetailElement.nodeName == 'TVShow':
+                            version = 7.0
+                            break
+                    if version == 7.0:
+                        break
+        except Exception, e:
+            log.error(str(e))
+            self.filedom.unlink()
+            self.filedom = None
+        log.info('eXtreme Movie Manager Import: Found file version %s' % version)
+        return version;
+


Property changes on: trunk/lib/plugins/imp/eXtremeMovieManager.py
___________________________________________________________________
Name: svn:keywords
   + Id



From mikej06 at mail.berlios.de  Fri Oct 16 22:33:38 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Fri, 16 Oct 2009 22:33:38 +0200
Subject: [Griffith-svn] r1316 - in trunk: . lib/plugins/extensions
Message-ID: <200910162033.n9GKXcjg015809@sheep.berlios.de>

Author: mikej06
Date: 2009-10-16 22:33:21 +0200 (Fri, 16 Oct 2009)
New Revision: 1316

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/extensions/ge_remover.py
Log:
"Remover" extensions removes associated tags and languages before removing the movie entry
(otherwise the database is not consistent or referential integrity is violated)

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-10-16 20:22:34 UTC (rev 1315)
+++ trunk/ChangeLog	2009-10-16 20:33:21 UTC (rev 1316)
@@ -8,6 +8,8 @@
 2009-10-16  Michael Jahn
 	* eXtreme Movie Manager import plugin added
 	* import support for movie detail video codec
+	* "Remover" extensions removes associated tags and languages
+	  before removing the movie entry
 
 2009-10-13  Michael Jahn
 	* support for posters for import plugins GCstar and AMC

Modified: trunk/lib/plugins/extensions/ge_remover.py
===================================================================
--- trunk/lib/plugins/extensions/ge_remover.py	2009-10-16 20:22:34 UTC (rev 1315)
+++ trunk/lib/plugins/extensions/ge_remover.py	2009-10-16 20:33:21 UTC (rev 1316)
@@ -23,9 +23,11 @@
 
 import logging
 
-from sqlalchemy.sql import delete
+from sqlalchemy.sql import delete, select
 
 from db.tables import movies as movies_table
+from db.tables import movie_tag as movie_tag_table
+from db.tables import movie_lang as movie_lang_table
 from gutils import question
 from plugins.extensions import GriffithExtensionBase as Base
 from sql import update_whereclause
@@ -37,7 +39,7 @@
     description = _('Removes all currently filtered movies')
     author = 'Piotr O?arowski'
     email = 'piotr at griffith.cc'
-    version = 0.1
+    version = 0.2
     api = 1
     enabled = True # TODO: disable it by default
 
@@ -47,6 +49,23 @@
         if question(_('Are you sure you want to remove %d movies?') % self.app.total):
             session = self.db.Session()
 
+            # first: remove all dependend data (associated tags, languages, ...)
+            query = select([movies_table.c.movie_id])
+            # FIXME: self.app._search_conditions contains advfilter conditions only (no other filters)
+            query = update_whereclause(query, self.app._search_conditions)
+            query = query.where(movies_table.c.loaned==False) # don't delete loaned movies
+            for movie_entry in session.execute(query):
+                # tags
+                query_movie_tags = delete(movie_tag_table)
+                query_movie_tags = query_movie_tags.where(movie_tag_table.c.movie_id==movie_entry.movie_id)
+                session.execute(query_movie_tags)
+                # languages
+                query_movie_lang = delete(movie_lang_table)
+                query_movie_lang = query_movie_lang.where(movie_lang_table.c.movie_id==movie_entry.movie_id)
+                session.execute(query_movie_lang)
+                # TODO: removing posters if no longer used by another movie?
+
+            # second: remove the movie entries
             query = delete(movies_table)
             # FIXME: self.app._search_conditions contains advfilter conditions only (no other filters)
             query = update_whereclause(query, self.app._search_conditions)



