From mikej06 at mail.berlios.de  Tue Dec  1 22:06:32 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 1 Dec 2009 22:06:32 +0100
Subject: [Griffith-svn] r1326 - in trunk: . lib
Message-ID: <200912012106.nB1L6W8J002331@sheep.berlios.de>

Author: mikej06
Date: 2009-12-01 22:06:05 +0100 (Tue, 01 Dec 2009)
New Revision: 1326

Added:
   trunk/lib/gdebug.py
Modified:
   trunk/ChangeLog
   trunk/lib/gconsole.py
Log:
re-introducing a debug window on windows platforms (activated via --debug)
preventing py2exe message popup after error messages to stderr

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-11-22 21:31:47 UTC (rev 1325)
+++ trunk/ChangeLog	2009-12-01 21:06:05 UTC (rev 1326)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-01  Michael Jahn
+	* re-introducing a debug window on windows platforms (activated via --debug)
+
 2009-11-22  Michael Jahn
 	* wintoolz Filmdatenbank import plugin added
 	* [#480380] Extensions: Amazon and Remover

Modified: trunk/lib/gconsole.py
===================================================================
--- trunk/lib/gconsole.py	2009-11-22 21:31:47 UTC (rev 1325)
+++ trunk/lib/gconsole.py	2009-12-01 21:06:05 UTC (rev 1326)
@@ -28,6 +28,9 @@
 import sys
 from locale import getdefaultlocale
 
+# import should be here so that the default is set
+from gdebug import GriffithDebug
+
 log = logging.getLogger("Griffith")
 
 options = ('hvDCo:t:d:c:y:s:', ('help', 'debug', 'sqlecho', 'clean', 'check-dep',
@@ -56,6 +59,9 @@
         home = os.path.expanduser('~/.griffith').decode(default_enc)
     config = 'griffith.cfg'
 
+    # set log file directory for current mode
+    GriffithDebug.set_logdir(home)
+
     if len(sys.argv) > 1:
         try:
             opts, args = getopt.getopt(sys.argv[1:], options[0], options[1])
@@ -75,6 +81,7 @@
             elif o in ('-D', '--debug'):
                 from platform import platform
                 import version
+                GriffithDebug.set_debug(logdir = home)
                 log.setLevel(logging.DEBUG)
                 log.debug("Starting %s %s", version.pname, version.pversion)
                 log.debug("Platform: %s (%s)", platform(), os.name)

Added: trunk/lib/gdebug.py
===================================================================
--- trunk/lib/gdebug.py	2009-11-22 21:31:47 UTC (rev 1325)
+++ trunk/lib/gdebug.py	2009-12-01 21:06:05 UTC (rev 1326)
@@ -0,0 +1,217 @@
+# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009 Vasco Nunes, Piotr O?arowski
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+import gtk
+import pygtk
+import sys
+import string
+import os
+import logging
+log = logging.getLogger("Griffith")
+
+#
+# some special classes for better debugging support on windows platforms
+# py2exe redirects stdout to /dev/null and writes stderr in a file in the
+# installation directory which is a bad idea since windows vista.
+#
+# the argument --debug now shows a debug window on windows so that the debug
+# output is not written to the (black hole windows) console.
+#
+class GriffithDebug:
+    def __init__(self, mode = False):
+        self.debugWindow = None
+        self.windowredirector = None
+        self.blackholebuffer = None
+        self.set_debug(mode)
+
+    def set_debug(self, mode = True, logdir = None):
+        self.initialize_debug_mode(mode, logdir)
+        if self.debugWindow:
+            if mode:
+                self.debugWindow.show()
+            else:
+                self.debugWindow.hide()
+
+    def set_logdir(self, logdir):
+        if self.windowredirector:
+            self.windowredirector.set_logdir(logdir)
+        if self.blackholebuffer:
+            self.blackholebuffer.set_logdir(logdir)
+
+    def initialize_debug_mode(self, mode, logdir = None):
+        # on windows systems all output to stdout goes to a black hole
+        # if py2exe is used.
+        # so we use a normal window and redirect output from sys.stderr
+        # and sys.stdout. it is easier to use for windows users.
+        #
+        # but we have to do a second trick to get the output from the logging
+        # module WITHOUT (!) writing the output twice, one in the window, one
+        # to stderr/console/py2exe:
+        # removing the handlers from the root logger and reinitialized via
+        # logging.basicConfig
+        # there is no other way to prevent py2exe showing a error message and
+        # generating the .log file in the installation directory
+        try:
+            if os.name == 'nt' or os.name.startswith('win'): # win32, win64
+                if mode:
+                    if self.debugWindow is None:
+                        self.debugWindow = DebugWindow(None)
+                    if not self.windowredirector:
+                        self.windowredirector = DebugWindowRedirector(self.debugWindow, logdir)
+                    else:
+                        self.windowredirector.set_logdir(logdir)
+                    sys.stderr = sys.stdout = self.windowredirector
+                    # resetting default logging configuration
+                    logging.getLogger().handlers = []
+                    logging.basicConfig(stream = sys.stderr, format='%(asctime)s: %(levelname)s: %(name)s(%(module)s:%(lineno)d): %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')
+                elif hasattr(sys, 'frozen') and sys.frozen == 'windows_exe':
+                    # if a windows exe is build via py2exe, redirect all output
+                    if not self.blackholebuffer:
+                        self.blackholebuffer = DebugBlackholeBufferRedirector(sys.stderr, logdir)
+                    else:
+                        self.blackholebuffer.set_logdir(logdir)
+                    sys.stderr = sys.stdout = self.blackholebuffer
+                    # resetting default logging configuration
+                    logging.getLogger().handlers = []
+                    logging.basicConfig(stream = sys.stderr, format='%(asctime)s: %(levelname)s: %(name)s(%(module)s:%(lineno)d): %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')
+        except:
+            log.exception('')
+
+#
+# used on windows systems
+# shows a windows with a text view which displays the
+# debug output provided by DebugWindowRedirector
+#
+class DebugWindow:
+    def __init__(self, window):
+        self.dialog = gtk.Dialog('Debug Window', window, gtk.DIALOG_MODAL, ())
+        self.dialog.set_destroy_with_parent(True)
+        self.dialog.set_transient_for(window)
+        self.dialog.set_modal(False)
+        self.textview = gtk.TextView()
+        self.textview.set_editable(False)
+        self.textview.set_wrap_mode(gtk.WRAP_WORD_CHAR)
+        self.textview.set_scroll_adjustments(gtk.Adjustment(1.0, 1.0, 100.0, 1.0, 10.0, 10.0), gtk.Adjustment(1.0, 1.0, 100.0, 1.0, 10.0, 10.0))
+        self.scrolledwindow = gtk.ScrolledWindow(None, None)
+        self.scrolledwindow.add(self.textview)
+        self.dialog.vbox.pack_start(self.scrolledwindow)
+        self.dialog.set_default_size(640, 480)
+    def show(self):
+        self.dialog.show_all()
+    def hide(self):
+        self.dialog.hide_all()
+    def close(self):
+        self.dialog.destroy()
+    def add(self, txt):
+        if txt is not None:
+            buffer = self.textview.get_buffer()
+            buffer.insert(buffer.get_end_iter(), txt, -1)
+
+#
+# used on windows system
+# redirects sys.stderr and sys.stdout to a debug window and 
+# a program-defined log-file (py2exe independent)
+#
+class DebugWindowRedirector(object):
+    softspace = 0
+    def __init__(self, debugWindow, logdir = None):
+        self.debugWindow = debugWindow
+        self.set_logdir(logdir)
+    def set_logdir(self, logdir):
+        #
+        # redirected output to a debug file in the log dir/home dir because
+        # users with restricted system rights can't write to the installation directory
+        # which is the default if py2exe is used
+        #
+        if logdir:
+            from locale import getdefaultlocale
+            defaultLang, defaultEnc = getdefaultlocale()
+            if defaultEnc is None:
+                defaultEnc = 'UTF-8'
+            self.debugFileName = os.path.join(logdir, 'griffith.log').decode(defaultEnc)
+            try:
+                # create the file to show that debug is running
+                f = open(self.debugFileName, 'w')
+                f.close()
+            except:
+                self.debugFileName = None
+        else:
+            self.debugFileName = None
+    def write(self, text):
+        self.debugWindow.add(text)
+        if self.debugFileName:
+            try:
+                f = open(self.debugFileName, 'at')
+                try:
+                    f.write(text)
+                finally:
+                    f.close()
+            except:
+                pass
+    def flush(self):
+        pass
+
+#
+# a sys.stderr and sys.stdout replacement stream to collect all
+# outputs in a local buffer. That prevents the generation of
+# a log file and message box when py2exe is used
+# the buffer is flushed to a program-defined log file (py2exe independent)
+#
+class DebugBlackholeBufferRedirector(object):
+    softspace = 0
+    buffer = ''
+    def __init__(self, oldstream, logdir = None):
+        self.oldstream = oldstream
+        self.set_logdir(logdir)
+    def set_logdir(self, logdir):
+        #
+        # redirected output to a debug file in the log dir/home dir because
+        # users with restricted system rights can't write to the installation directory
+        # which is the default if py2exe is used
+        #
+        if logdir:
+            from locale import getdefaultlocale
+            defaultLang, defaultEnc = getdefaultlocale()
+            if defaultEnc is None:
+                defaultEnc = 'UTF-8'
+            self.debugFileName = os.path.join(logdir, 'griffith.log').decode(defaultEnc)
+        else:
+            self.debugFileName = None
+    def write(self, text):
+        try:
+            log.info(text)
+            self.buffer = string.join([self.buffer, text])
+        except Exception, e:
+            # resetting to old output streams as last hope
+            sys.stdout = sys.stderr = self.oldstream
+            print str(e)
+    def flush(self):
+        if self.debugFileName and self.buffer:
+            logfile = open(self.debugFileName, 'at')
+            try:
+                logfile.write(self.buffer)
+                self.buffer = ''
+            finally:
+                logfile.close()
+
+GriffithDebug = GriffithDebug()
\ No newline at end of file


Property changes on: trunk/lib/gdebug.py
___________________________________________________________________
Name: svn:keywords
   + Id



From mikej06 at mail.berlios.de  Tue Dec  8 21:38:57 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 8 Dec 2009 21:38:57 +0100
Subject: [Griffith-svn] r1327 - in trunk: . lib/plugins/movie
Message-ID: <200912082038.nB8KcvNc021408@sheep.berlios.de>

Author: mikej06
Date: 2009-12-08 21:38:46 +0100 (Tue, 08 Dec 2009)
New Revision: 1327

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieCinematografo.py
   trunk/lib/plugins/movie/PluginMovieDVDEmpire.py
   trunk/lib/plugins/movie/PluginMovieE-Pipoca.py
   trunk/lib/plugins/movie/PluginMovieFilmAffinity.py
   trunk/lib/plugins/movie/PluginMovieFilmDb.py
   trunk/lib/plugins/movie/PluginMovieIMDB-de.py
   trunk/lib/plugins/movie/PluginMovieIMDB.py
Log:
* [#418911] It doesn't import cover art from FilmAffinity
* movie plugin test data updated

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/ChangeLog	2009-12-08 20:38:46 UTC (rev 1327)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-12-08  Michael Jahn
+	* [#418911] It doesn't import cover art from FilmAffinity
+	* movie plugin test data updated
+
 2009-12-01  Michael Jahn
 	* re-introducing a debug window on windows platforms (activated via --debug)
 

Modified: trunk/lib/plugins/movie/PluginMovieCinematografo.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-08 20:38:46 UTC (rev 1327)
@@ -181,72 +181,34 @@
     #        * or the expected value
     #
     test_configuration = {
-        '47931' : { 
-            'title'             : 'Rocky Balboa',
-            'o_title'           : 'Rocky Balboa',
-            'director'          : 'Sylvester Stallone',
+        '3996' : { 
+            'title'             : 'Amor non ho, per??... per??...',
+            'o_title'           : 'Amor non ho, per??... per??...',
+            'director'          : 'Giorgio Bianchi',
             'plot'              : True,
-            'cast'              : 'Sylvester Stallone' + _(' as ') + 'Rocky Balboa\n\
-Burt Young' + _(' as ') + 'Pauliev\n\
-Antonio Tarver' + _(' as ') + 'Mason \'The Line\' Dixon\n\
-Geraldine Hughes' + _(' as ') + 'Marie\n\
-Milo Ventimiglia' + _(' as ') + 'Robert Jr.\n\
-Tony Burton' + _(' as ') + 'Duke\n\
-A.J. Benza' + _(' as ') + 'L.C.\n\
-James Francis Kelly III' + _(' as ') + 'Steps\n\
-Talia Shire' + _(' as ') + 'Adrian (imagens de arquivo)\n\
-Lou DiBella' + _(' as ') + 'Lou DiBella\n\
-Mike Tyson (1)' + _(' as ') + 'Mike Tyson\n\
-Henry G. Sanders' + _(' as ') + 'Martin\n\
-Pedro Lovell' + _(' as ') + 'Spider Rico\n\
-Ana Gerena' + _(' as ') + 'Isabel\n\
-Angela Boyd' + _(' as ') + 'Angie\n\
-Louis Giansante' + _(' as ') + 'Bandido do bar\n\
-Maureen Schilling' + _(' as ') + 'Bartender do Lucky\n\
-Lahmard Tate??' + _(' as ') + 'X-Cell\n\
-Woodrow W. Paige??' + _(' as ') + 'Comentarista da ESPN\n\
-Skip Bayless' + _(' as ') + 'Comentarista da ESPN\n\
-Jay Crawford' + _(' as ') + 'Comentarista da ESPN\n\
-Brian Kenny' + _(' as ') + 'Apresentador da ESPN\n\
-Dana Jacobson' + _(' as ') + 'Apresentador da ESPN\n\
-Chuck Johnson??' + _(' as ') + 'Apresentador da ESPN\n\
-James Binns' + _(' as ') + 'Comiss??rio\n\
-Johnnie Hobbs Jr.' + _(' as ') + 'Comiss??rio\n\
-Barney Fitzpatrick' + _(' as ') + 'Comiss??rio\n\
-Jim Lampley' + _(' as ') + 'Comentarista da HBO\n\
-Larry Merchant' + _(' as ') + 'Comentarista da HBO\n\
-Max Kellerman' + _(' as ') + 'Comentarista da HBO\n\
-LeRoy Neiman' + _(' as ') + 'LeRoy Neiman\n\
-Bert Randolph Sugar' + _(' as ') + 'Rep??rter da Ring Magazine\n\
-Bernard Fern??ndez' + _(' as ') + 'Articulista da Boxing Association of America\n\
-Gunnar Peterson' + _(' as ') + 'Treinador de levantamento de peso\n\
-Yahya' + _(' as ') + 'Oponente de Dixon\n\
-Marc Ratner (1)' + _(' as ') + 'Oficial de luta\n\
-Anthony Lato Jr.' + _(' as ') + 'Inspetor de Rocky\n\
-Jack Lazzarado' + _(' as ') + 'Inspetor de Dixon\n\
-Michael Buffer' + _(' as ') + 'Anunciador de luta\n\
-Joe Cortez' + _(' as ') + '??rbitro\n\
-Carter Mitchell' + _(' as ') + 'Shamrock Foreman\n\
-Vinod Kumar (1)' + _(' as ') + 'Ravi\n\
-Fran Pultro' + _(' as ') + 'Pai no restaurante\n\
-Frank Stallone Jr.??' + _(' as ') + 'Cliente do restaurante\n\
-Jody Giambelluca' + _(' as ') + 'Cliente do restaurante\n\
-Tobias Segal' + _(' as ') + 'Amigo de Robert\n\
-Tim Carr' + _(' as ') + 'Amigo de Robert\n\
-Matt Frack' + _(' as ') + 'Amigo de Robert\n\
-Paul Dion Monte' + _(' as ') + 'Amigo de Robert\n\
-Kevin King Templeton' + _(' as ') + 'Amigo de Robert\n\
-Robert Michael Kelly' + _(' as ') + 'Senhor Tomilson\n\
-Rick Buchborn' + _(' as ') + 'F?? de Rocky\n\
-Nick Baker' + _(' as ') + 'Bartender do pub irland??s\n\
-Don Sherman' + _(' as ') + 'Andy\n\
-Stu Nahan' + _(' as ') + 'Comentarista da luta pelo computador\n\
-Gary Compton' + _(' as ') + 'Seguran??a\n\
-Ricky Cavazos' + _(' as ') + 'Espectador da luta (n??o creditado)\n\
-Dolph Lundgren' + _(' as ') + 'Capit??o Ivan Drago (imagens de arquivo) (n??o creditado)\n\
-Burgess Meredith' + _(' as ') + 'Mickey (imagens de arquivo) (n??o creditado)\n\
-Mr. T' + _(' as ') + 'Clubber Lang (imagens de arquivo) (n??o creditado)\n\
-Carl Weathers' + _(' as ') + 'Apollo Creed (imagens de arquivo) (n??o creditado)',
+            'cast'              : 'Renato Rascel' + _(' as ') + 'Teodoro\n\
+Gina Lollobrigida' + _(' as ') + 'Gina\n\
+Luigi Pavese' + _(' as ') + 'Antonio Scutipizzo\n\
+Aroldo Tieri' + _(' as ') + 'Giuliano\n\
+Carlo Ninchi' + _(' as ') + 'Maurizio\n\
+Kiki Urbani' + _(' as ') + 'Kiki, la ballerina\n\
+Adriana Danieli' + _(' as ') + 'Olga\n\
+Strelsa Brown' + _(' as ') + 'Mabel\n\
+Virgilio Riento' + _(' as ') + 'Il contadino\n\
+Gabriele Tinti' + _(' as ') + '(Gastone Tinti) Un componente dell\'orchestra\n\
+Guglielmo Barnab??' + _(' as ') + '\n\
+Giuseppe De Martino' + _(' as ') + '\n\
+Raimondo Vianello' + _(' as ') + '(Riccardo Vianello) \n\
+Maria Carla Vittone' + _(' as ') + '\n\
+Marco Tulli' + _(' as ') + '\n\
+Giuseppe Ricagno' + _(' as ') + '\n\
+Luciano Rebeggiani' + _(' as ') + '\n\
+Kurt Lary' + _(' as ') + '\n\
+Giovanni Lesa' + _(' as ') + '\n\
+Riccardo Ferri' + _(' as ') + '\n\
+Pia De Doses' + _(' as ') + '\n\
+Guido Barbarisi' + _(' as ') + '\n\
+Galeazzo Benti as',
             'country'           : 'ITALIA',
             'genre'             : 'commedia',
             'classification'    : False,

Modified: trunk/lib/plugins/movie/PluginMovieDVDEmpire.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieDVDEmpire.py	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/lib/plugins/movie/PluginMovieDVDEmpire.py	2009-12-08 20:38:46 UTC (rev 1327)
@@ -123,6 +123,7 @@
         tmp_page = gutils.trim(self.page, 'Audio:', '<b>')
         tmp_page = tmp_page.replace('<br>', '\n')
         tmp_page = tmp_page.replace('<br />', '\n')
+        tmp_page = tmp_page.replace('(more info)', '\n')
         tmp_page = gutils.strip_tags(tmp_page)
         if tmp_page <> '':
             tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
@@ -243,7 +244,7 @@
 Video:\n\
 Widescreen 1.85:1 Color (Anamorphic) \n\
 \n\
-Audio:\n\
+Audio: \n\
 ENGLISH: Dolby Digital 5.1 [CC]\n\
 FRENCH: Dolby Digital 5.1\n\
 \n\

Modified: trunk/lib/plugins/movie/PluginMovieE-Pipoca.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieE-Pipoca.py	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/lib/plugins/movie/PluginMovieE-Pipoca.py	2009-12-08 20:38:46 UTC (rev 1327)
@@ -231,7 +231,7 @@
 Michael Buffer' + _(' as ') + 'Anunciador de luta\n\
 Joe Cortez' + _(' as ') + '??rbitro\n\
 Carter Mitchell' + _(' as ') + 'Shamrock Foreman\n\
-Vinod Kumar' + _(' as ') + 'Ravi\n\
+Vinod Kumar (1)' + _(' as ') + 'Ravi\n\
 Fran Pultro' + _(' as ') + 'Pai no restaurante\n\
 Frank Stallone Jr.??' + _(' as ') + 'Cliente do restaurante\n\
 Jody Giambelluca' + _(' as ') + 'Cliente do restaurante\n\

Modified: trunk/lib/plugins/movie/PluginMovieFilmAffinity.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-12-08 20:38:46 UTC (rev 1327)
@@ -44,11 +44,11 @@
         self.page = self.page.replace(u'\x92', '\'')
 
     def get_image(self):
-        tmp = string.find(self.page, 'pics.filmaffinity.com/')
-        if tmp == -1:
+        tmp = re.search('pics[0-9]*.filmaffinity.com/', self.page)
+        if not tmp:
             self.image_url = ''
         else:
-            self.image_url = 'http://' + gutils.before(self.page[tmp:], '"')
+            self.image_url = 'http://' + gutils.before(self.page[tmp.start():], '"')
 
     def get_o_title(self):
         self.o_title = gutils.trim(self.page, u'<b>T?TULO ORIGINAL</b></td>', '</b></td>')

Modified: trunk/lib/plugins/movie/PluginMovieFilmDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-12-08 20:38:46 UTC (rev 1327)
@@ -200,65 +200,65 @@
             'director'            : 'Sylvester Stallone',
             'plot'                : True,
             'cast'                : 'Dolph Lundgren\n\
+Mike Tyson\n\
 Sylvester Stallone\n\
-Mike Tyson\n\
 Carl Weathers\n\
 Burt Young\n\
+Milo Ventimiglia\n\
 Talia Shire\n\
-Milo Ventimiglia\n\
 Burgess Meredith\n\
 Tony Burton\n\
 Mr. T\n\
+Frank Stallone\n\
 Geraldine Hughes\n\
-Frank Stallone\n\
 Lahmard J. Tate\n\
 Michael Buffer\n\
 Don Sherman\n\
 Tobias Segal\n\
 Gunnar Peterson\n\
 LeRoy Neiman\n\
+Yahya\n\
+Henry G. Sanders\n\
+Stu Nahan\n\
 Jody Giambelluca\n\
 Ricky Cavazos\n\
 Rick Buchborn\n\
-Stu Nahan\n\
+Joe Cortez\n\
+Skip Bayless\n\
 Barney Fitzpatrick\n\
-Henry G. Sanders\n\
 Fran Pultro\n\
-Joe Cortez\n\
-Yahya\n\
-Skip Bayless\n\
+Angela Boyd\n\
 Robert Michael Kelly\n\
-Angela Boyd\n\
+Ana Gerena\n\
 Tim Carr\n\
 Jim Lampley\n\
 Charles Johnson\n\
 Carter Mitchell\n\
+Dana Jacobson\n\
+Matt Frack\n\
 A.J. Benza\n\
-Matt Frack\n\
+Antonio Tarver\n\
 Max Kellerman\n\
+Marc Ratner\n\
 Jack Lazzarado\n\
-Marc Ratner\n\
+Maureen Schilling\n\
 Larry Merchant\n\
-Dana Jacobson\n\
-Antonio Tarver\n\
-Ana Gerena\n\
-Maureen Schilling\n\
 Bernard Fern??ndez\n\
 Louis Giansante\n\
 Nick Baker\n\
 James Binns\n\
 Brian Kenny\n\
 Anthony Lato Jr.\n\
+Paul Dion Monte\n\
 Woody Paige\n\
-Paul Dion Monte\n\
+Kevin King Templeton\n\
 Gary Compton\n\
 Lou DiBella\n\
-Kevin King Templeton\n\
 Jay Crawford\n\
 Pedro Lovell\n\
 Johnnie Hobbs Jr.\n\
+Vinod Kumar\n\
 Bert Randolph Sugar\n\
-Vinod Kumar\n\
 James Francis Kelly III',
             'country'             : 'USA',
             'genre'               : 'Drama',
@@ -302,8 +302,8 @@
             'director'            : 'Ryoo Seung-Wan',
             'plot'                : True,
             'cast'                : 'So-yi Yoon\n\
+Ahn Sung-ki\n\
 Doo-hong Jung\n\
-Ahn Sung-ki\n\
 Ryu Seung-beom\n\
 Yun Ju-Sang',
             'country'             : 'RK',

Modified: trunk/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-12-08 20:38:46 UTC (rev 1327)
@@ -421,6 +421,6 @@
 + _('Color') + ': Farbe (Eastmancolor)',
             'runtime'            : 90,
             'image'              : True,
-            'rating'             : 8
+            'rating'             : 7
         },
     }

Modified: trunk/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-12-01 21:06:05 UTC (rev 1326)
+++ trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-12-08 20:38:46 UTC (rev 1327)
@@ -275,7 +275,7 @@
             'cast'              : 'Geoffrey Rush' + _(' as ') + 'Philip Henslowe\n\
 Tom Wilkinson' + _(' as ') + 'Hugh Fennyman\n\
 Steven O\'Donnell' + _(' as ') + 'Lambert\n\
-Tim McMullan' + _(' as ') + 'Frees\n\
+Tim McMullan' + _(' as ') + 'Frees (as Tim McMullen)\n\
 Joseph Fiennes' + _(' as ') + 'Will Shakespeare\n\
 Steven Beard' + _(' as ') + 'Makepeace - the Preacher\n\
 Antony Sher' + _(' as ') + 'Dr. Moth\n\
@@ -284,7 +284,7 @@
 Sandra Reinton' + _(' as ') + 'Rosaline\n\
 Simon Callow' + _(' as ') + 'Tilney - Master of the Revels\n\
 Judi Dench' + _(' as ') + 'Queen Elizabeth\n\
-Bridget McConnell' + _(' as ') + 'Lady in Waiting\n\
+Bridget McConnell' + _(' as ') + 'Lady in Waiting (as Bridget McConnel)\n\
 Georgie Glen' + _(' as ') + 'Lady in Waiting\n\
 Nicholas Boulton' + _(' as ') + 'Henry Condell\n\
 Gwyneth Paltrow' + _(' as ') + 'Viola De Lesseps\n\



From mikej06 at mail.berlios.de  Tue Dec  8 21:59:46 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 8 Dec 2009 21:59:46 +0100
Subject: [Griffith-svn] r1328 - in trunk: . lib
Message-ID: <200912082059.nB8KxkH5023345@sheep.berlios.de>

Author: mikej06
Date: 2009-12-08 21:59:31 +0100 (Tue, 08 Dec 2009)
New Revision: 1328

Modified:
   trunk/ChangeLog
   trunk/lib/add.py
Log:
[#486258] no refresh when a filter is active

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-08 20:38:46 UTC (rev 1327)
+++ trunk/ChangeLog	2009-12-08 20:59:31 UTC (rev 1328)
@@ -6,6 +6,7 @@
 
 
 2009-12-08  Michael Jahn
+	* [#486258] no refresh when a filter is active
 	* [#418911] It doesn't import cover art from FilmAffinity
 	* movie plugin test data updated
 

Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2009-12-08 20:38:46 UTC (rev 1327)
+++ trunk/lib/add.py	2009-12-08 20:59:31 UTC (rev 1328)
@@ -810,10 +810,11 @@
     if not commit(session):
         return False
 
-    image_path = gutils.get_image_fname(movie.poster_md5, self.db)
-    if not image_path or not os.path.isfile(image_path):
-        image_path = gutils.get_defaultimage_fname(self)
-    handler = self.Image.set_from_file(image_path)
+    if movie.poster_md5:
+        image_path = gutils.get_image_fname(movie.poster_md5, self.db)
+        if not image_path or not os.path.isfile(image_path):
+            image_path = gutils.get_defaultimage_fname(self)
+        handler = self.Image.set_from_file(image_path)
 
     # change_filter calls populate_treeview which updates the status bar
     quick_filter.change_filter(self)



From mikej06 at mail.berlios.de  Sat Dec 12 14:51:39 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 12 Dec 2009 14:51:39 +0100
Subject: [Griffith-svn] r1329 - in trunk: . lib/plugins/imp
Message-ID: <200912121351.nBCDpdhW032247@sheep.berlios.de>

Author: mikej06
Date: 2009-12-12 14:51:22 +0100 (Sat, 12 Dec 2009)
New Revision: 1329

Added:
   trunk/lib/plugins/imp/BESTheMovieLibrary.py
   trunk/lib/plugins/imp/FoxMovieManager.py
   trunk/lib/plugins/imp/MyDVDs.py
   trunk/lib/plugins/imp/TheMovieLibrary.py
Modified:
   trunk/ChangeLog
   trunk/NEWS
   trunk/lib/plugins/imp/AMC.py
   trunk/lib/plugins/imp/DVDProfiler.py
   trunk/lib/plugins/imp/GCstar.py
   trunk/lib/plugins/imp/PersonalVideoDatabase.py
   trunk/lib/plugins/imp/WintoolzFilmdatenbank.py
   trunk/lib/plugins/imp/__init__.py
   trunk/lib/plugins/imp/eXtremeMovieManager.py
Log:
* new import plugins: BES The Movie Library, Fox Movie Manager, MyDVDs, The Movie Library
  (all MS Access / Jet DB based)
* cleanup import sections of other import plugins

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/ChangeLog	2009-12-12 13:51:22 UTC (rev 1329)
@@ -5,6 +5,11 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-12  Michael Jahn
+	* new import plugins: BES The Movie Library, Fox Movie Manager, MyDVDs, The Movie Library
+	  (all MS Access / Jet DB based)
+	* cleanup import sections of other import plugins
+
 2009-12-08  Michael Jahn
 	* [#486258] no refresh when a filter is active
 	* [#418911] It doesn't import cover art from FilmAffinity

Modified: trunk/NEWS
===================================================================
--- trunk/NEWS	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/NEWS	2009-12-12 13:51:22 UTC (rev 1329)
@@ -2,8 +2,16 @@
 =============
 * Griffith extensions feature added. You can add your own extensions in
   ~/.griffith/lib/extensions
-* New import plugins: GCstar, DVD Profiler, eXtreme Movie Manager, Personal Video Database,
-  wintoolz Filmdatenbank
+* New import plugins:
+   - Barret Enterprise Software The Movie Library
+   - DVD Profiler
+   - eXtreme Movie Manager
+   - Fox Movie Manager
+   - GCstar
+   - MyDVDs
+   - Personal Video Database
+   - The Movie Library
+   - wintoolz Filmdatenbank
 
 
 Griffith 0.10.1

Modified: trunk/lib/plugins/imp/AMC.py
===================================================================
--- trunk/lib/plugins/imp/AMC.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/AMC.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -23,10 +23,10 @@
 
 from plugins.imp import ImportPlugin as IP
 import os
-import sys
 import gutils
 import string
 import struct
+
 import logging
 log = logging.getLogger("Griffith")
 

Added: trunk/lib/plugins/imp/BESTheMovieLibrary.py
===================================================================
--- trunk/lib/plugins/imp/BESTheMovieLibrary.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/BESTheMovieLibrary.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -0,0 +1,147 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import gutils
+import string
+
+try:
+    import pyodbc
+except ImportError:
+    pass
+
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('Barrett Enterprise Software The Movie Library 1.9.x')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[mM][dD][bB]'
+    mime_types   = None
+
+    fileversion  = None
+    connection   = None
+    cursor       = None
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        if self.connection:
+            try:
+                curs = self.connection.cursor()
+                curs.execute('SELECT COUNT(*) FROM Main')
+                count = curs.fetchone()[0]
+                curs.close()
+            except:
+                log.exception('')
+        else:
+            log.error('BES The Movie Library Import: No connection object.')
+        log.info('BES The Movie Library Import: %s movies for import' % count)
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.cursor:
+            self.cursor = self.connection.cursor()
+            self.cursor.execute( \
+                'SELECT Title, Category, Rating, Rated, Actor1, Actor2, Description, MediaType \
+                 FROM Main')
+        
+        currentrow = self.cursor.fetchone()
+        if not currentrow:
+            return None
+        
+        details = {}
+        try:
+            if currentrow[0]:
+                details['title'] = unicode(currentrow[0])
+            if currentrow[1]:
+                details['genre'] = unicode(currentrow[1])
+            if currentrow[2]:
+                details['rating'] = 2 * len(str(currentrow[2]))
+            if currentrow[3]:
+                details['classification'] = unicode(currentrow[3])
+            cast = ''
+            if currentrow[4]:
+                cast = currentrow[4]
+            if currentrow[5]:
+                cast = cast + '\n' + currentrow[5]
+            details['cast'] = cast
+            if currentrow[6]:
+                details['plot'] = currentrow[6]
+            if currentrow[7]:
+                # setting medium_id to string mediumname; mapping is done in base class
+                details['medium_id'] = currentrow[7]
+        except Exception, e:
+            log.exception('')
+            details = None
+        
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.cursor:
+            self.cursor.close()
+            self.cursor = None
+        if self.connection:
+            self.connection.close()
+            self.connection = None
+        self.fileversion = None
+
+    def destroy(self):
+        """close all resources"""
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        try:
+            log.debug('Connecting with: DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            self.connection = pyodbc.connect('DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            curs = self.connection.cursor()
+            tablerow = curs.tables(table='Main').fetchone()
+            if tablerow:
+                version = 1.0
+            curs.close()
+        except Exception, e:
+            log.error(str(e))
+        log.info('BES The Movie Library Import: Found file version %s' % version)
+        return version;
+


Property changes on: trunk/lib/plugins/imp/BESTheMovieLibrary.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/lib/plugins/imp/DVDProfiler.py
===================================================================
--- trunk/lib/plugins/imp/DVDProfiler.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/DVDProfiler.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -22,13 +22,10 @@
 # GNU General Public License, version 2 or later
 
 from plugins.imp import ImportPlugin as IP
-import os
-import sys
 import gutils
 import string
-import struct
-import db
 from xml.dom import minidom, Node
+
 import logging
 log = logging.getLogger("Griffith")
 

Added: trunk/lib/plugins/imp/FoxMovieManager.py
===================================================================
--- trunk/lib/plugins/imp/FoxMovieManager.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/FoxMovieManager.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -0,0 +1,193 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import gutils
+import string
+
+try:
+    import pyodbc
+except ImportError:
+    pass
+
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('Fox Movie Manager 1.4')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[mM][dD][bB]'
+    mime_types   = None
+
+    fileversion  = None
+    connection   = None
+    cursor       = None
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        if self.connection:
+            try:
+                curs = self.connection.cursor()
+                curs.execute('SELECT COUNT(*) FROM tblMovie')
+                count = curs.fetchone()[0]
+                curs.close()
+            except:
+                log.exception('')
+        else:
+            log.error('Fox Movie Manager Import: No connection object.')
+        log.info('Fox Movie Manager Import: %s movies for import' % count)
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.cursor:
+            self.cursor = self.connection.cursor()
+            self.cursor.execute( \
+                'SELECT fldIDtitle, fldTitle, fldSynopsis, fldActors, fldWriters, \
+                        fldDirectors, fldStudio, fldYear, fldLength, fldDisks, \
+                        fldPicPath, fldWatched, fldUserRating, fldRating, fldMedia, \
+                        fldMoviePath, fldTrailerPath \
+                 FROM tblMovie')
+        
+        currentrow = self.cursor.fetchone()
+        if not currentrow:
+            return None
+        
+        details = {}
+        try:
+            details['number'] = currentrow[0]
+            if currentrow[1]:
+                details['title'] = currentrow[1]
+            if currentrow[2]:
+                details['plot'] = currentrow[2]
+            if currentrow[3]:
+                cast = ''
+                actors = currentrow[3].split(';')
+                for actor in actors:
+                    if actor:
+                        actorandrole = actor.split('@')
+                        if len(actorandrole) > 1 and actorandrole[1]:
+                            cast = cast + actorandrole[0] + _(' as ') + actorandrole[1] + '\n'
+                        else:
+                            cast = cast + actorandrole[0] + '\n'
+                details['cast'] = cast
+            if currentrow[4]:
+                details['screenplay'] = string.replace(currentrow[4], ';', ', ')
+            if currentrow[5]:
+                details['director'] = string.replace(currentrow[5], ';', ', ')
+            if currentrow[6]:
+                details['studio'] = currentrow[6]
+            if currentrow[7]:
+                details['year'] = currentrow[7]
+            if currentrow[8]:
+                details['runtime'] = currentrow[8]
+            if currentrow[9]:
+                details['media_num'] = currentrow[9]
+            if currentrow[10]:
+                details['poster'] = currentrow[10]
+            if currentrow[11]:
+                details['seen'] = currentrow[11]
+            if currentrow[12]:
+                if currentrow[12] > 10:
+                    try:
+                        details['rating'] = round(currentrow[12] / 10.0, 0)
+                    except:
+                        pass
+                else:
+                    details['rating'] = currentrow[12]
+            if currentrow[13]:
+                details['classification'] = currentrow[13]
+            if currentrow[14]:
+                # setting medium_id to string mediumname; mapping is done in base class
+                details['medium_id'] = currentrow[14]
+            if currentrow[15]:
+                details['trailer'] = currentrow[15]
+            elif currentrow[16]:
+                details['trailer'] = currentrow[16]
+            # looking for the genres
+            cursgenre = self.connection.cursor()
+            cursgenre.execute('SELECT fldGenre \
+                FROM tblGenreTypes INNER JOIN tblGenre ON tblGenreTypes.fldIDgenre = tblGenre.fldGenreID \
+                WHERE tblGenre.fldTitleID=' + str(currentrow[0]) + ';')
+            currentrow = cursgenre.fetchone()
+            if currentrow:
+                genres = ''
+                while currentrow:
+                    genres = genres + currentrow[0] + ', '
+                    currentrow = cursgenre.fetchone()
+                details['genre'] = genres[:-2]
+            cursgenre.close()
+        except Exception, e:
+            log.exception('')
+            details = None
+        
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.cursor:
+            self.cursor.close()
+            self.cursor = None
+        if self.connection:
+            self.connection.close()
+            self.connection = None
+        self.fileversion = None
+
+    def destroy(self):
+        """close all resources"""
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        try:
+            log.debug('Connecting with: DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            self.connection = pyodbc.connect('DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            curs = self.connection.cursor()
+            tablerow = curs.tables(table='tblMovie').fetchone()
+            if tablerow:
+                version = 1.0
+            curs.close()
+        except Exception, e:
+            log.error(str(e))
+        log.info('Fox Movie Manager Import: Found file version %s' % version)
+        return version;
+


Property changes on: trunk/lib/plugins/imp/FoxMovieManager.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/lib/plugins/imp/GCstar.py
===================================================================
--- trunk/lib/plugins/imp/GCstar.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/GCstar.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -23,11 +23,10 @@
 
 from plugins.imp import ImportPlugin as IP
 import os
-import sys
 import gutils
 import string
-import struct
 from xml.dom import minidom
+
 import logging
 log = logging.getLogger("Griffith")
 

Added: trunk/lib/plugins/imp/MyDVDs.py
===================================================================
--- trunk/lib/plugins/imp/MyDVDs.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/MyDVDs.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -0,0 +1,157 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import gutils
+import string
+
+try:
+    import pyodbc
+except ImportError:
+    pass
+
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('MyDVDs 1.6x')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[mM][dD][bB]'
+    mime_types   = None
+
+    fileversion  = None
+    connection   = None
+    cursor       = None
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        if self.connection:
+            try:
+                curs = self.connection.cursor()
+                curs.execute('SELECT COUNT(*) FROM dvd')
+                count = curs.fetchone()[0]
+            except:
+                log.exception('')
+        else:
+            log.error('MyDVDs Import: No connection object.')
+        log.info('MyDVDs Import: %s movies for import' % count)
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.cursor:
+            self.cursor = self.connection.cursor()
+            self.cursor.execute( \
+                'SELECT id, title, year, rating, stars, director, synop, \
+                        cover, runtime, genre, notes, trailer, star5 \
+                 FROM dvd;')
+        
+        currentrow = self.cursor.fetchone()
+        if not currentrow:
+            return None
+        
+        details = {}
+        try:
+            if currentrow[1]:
+                details['title'] = currentrow[1]
+            if currentrow[2]:
+                details['year'] = currentrow[2]
+            if currentrow[3]:
+                details['classification'] = currentrow[3]
+            if currentrow[4]:
+                details['cast'] = currentrow[4]
+            if currentrow[5]:
+                details['director'] = currentrow[5]
+            if currentrow[6]:
+                details['plot'] = currentrow[6]
+            if currentrow[7]:
+                details['poster'] = currentrow[7]
+            if currentrow[8]:
+                details['runtime'] = gutils.digits_only(currentrow[8])
+            if currentrow[9]:
+                genre = string.replace(currentrow[9], '~', ', ')
+                if len(genre) > 2:
+                    details['genre'] = genre[2:]
+            if currentrow[10]:
+                details['notes'] = currentrow[10]
+            if currentrow[11]:
+                details['trailer'] = currentrow[11]
+            if currentrow[12]:
+                try:
+                    details['rating'] = 2 * int(currentrow[12])
+                except:
+                    pass
+        except Exception, e:
+            log.exception('')
+            details = None
+        #print details
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.cursor:
+            self.cursor.close()
+            self.cursor = None
+        if self.connection:
+            self.connection.close()
+            self.connection = None
+        self.fileversion = None
+
+    def destroy(self):
+        """close all resources"""
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        try:
+            log.debug('Connecting with: DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            self.connection = pyodbc.connect('DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            curs = self.connection.cursor()
+            tablerow = curs.tables(table='dvd').fetchone()
+            if tablerow:
+                version = 1.0
+            curs.close()
+        except Exception, e:
+            log.error(str(e))
+        log.info('MyDVDs Import: Found file version %s' % version)
+        return version;
+


Property changes on: trunk/lib/plugins/imp/MyDVDs.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/lib/plugins/imp/PersonalVideoDatabase.py
===================================================================
--- trunk/lib/plugins/imp/PersonalVideoDatabase.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/PersonalVideoDatabase.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -22,13 +22,10 @@
 # GNU General Public License, version 2 or later
 
 from plugins.imp import ImportPlugin as IP
-import os
-import sys
 import gutils
 import string
-import struct
-import db
 from xml.dom import minidom, Node
+
 import logging
 log = logging.getLogger("Griffith")
 

Added: trunk/lib/plugins/imp/TheMovieLibrary.py
===================================================================
--- trunk/lib/plugins/imp/TheMovieLibrary.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/TheMovieLibrary.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -0,0 +1,199 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import gutils
+import string
+
+try:
+    import pyodbc
+except ImportError:
+    pass
+
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('WenSoftware The Movie Library 1.4.x')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[dD][mM][vV]'
+    mime_types   = None
+
+    fileversion  = None
+    connection   = None
+    cursor       = None
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        if self.connection:
+            try:
+                curs = self.connection.cursor()
+                curs.execute('SELECT COUNT(*) FROM Movie')
+                count = curs.fetchone()[0]
+                curs.close()
+            except:
+                log.exception('')
+        else:
+            log.error('The Movie Library Import: No connection object.')
+        log.info('The Movie Library Import: %s movies for import' % count)
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.cursor:
+            self.cursor = self.connection.cursor()
+            self.cursor.execute( \
+                'SELECT MovieID, Title, Format, Genre, Subgenre, Year, \
+                        UPC, Country, Studio, AudienceRating, URL, Region, \
+                        Length, Director, Writer, Photographer, Plot, \
+                        FrontCover, Seen, Comment, Actor, Trailer, Color, Rating \
+                 FROM Movie')
+        
+        currentrow = self.cursor.fetchone()
+        if not currentrow:
+            return None
+        
+        details = {}
+        try:
+            if currentrow[1]:
+                details['title'] = currentrow[1]
+            if currentrow[2]:
+                # setting medium_id to string mediumname; mapping is done in base class
+                details['medium_id'] = currentrow[2]
+            if currentrow[3]:
+                details['genre'] = currentrow[3]
+            if currentrow[4]:
+                details['genre'] = details['genre'] + ', ' + currentrow[4]
+            if currentrow[5]:
+                details['year'] = currentrow[5]
+            if currentrow[6]:
+                details['barcode'] = currentrow[6]
+            if currentrow[7]:
+                details['country'] = currentrow[7]
+            if currentrow[8]:
+                details['studio'] = currentrow[8]
+            if currentrow[9]:
+                details['classification'] = currentrow[9]
+            if currentrow[10]:
+                details['site'] = currentrow[10]
+            if currentrow[11]:
+                region = string.replace(currentrow[11], 'Region ', '')
+                try:
+                    details['region'] = int(region)
+                except:
+                    pass
+            if currentrow[12]:
+                details['runtime'] = currentrow[12]
+            if currentrow[13]:
+                details['director'] = currentrow[13]
+            if currentrow[14]:
+                details['screenplay'] = currentrow[14]
+            if currentrow[15]:
+                details['cameraman'] = currentrow[15]
+            if currentrow[16]:
+                details['plot'] = currentrow[16]
+            if currentrow[17]:
+                # TODO: fetching poster from www if an url is given?
+                if not currentrow[17][0:4] == 'http':
+                    details['image'] = currentrow[17]
+            if currentrow[18]:
+                details['seen'] = currentrow[18]
+            if currentrow[19]:
+                details['notes'] = currentrow[19]
+            if currentrow[20]:
+                cast = ''
+                actors = currentrow[20].split('	')
+                for actor in actors:
+                    actorandrole = actor.split('|')
+                    if len(actorandrole) > 1 and actorandrole[1]:
+                        cast = cast + actorandrole[0] + _(' as ') + actorandrole[1] + '\n'
+                    else:
+                        cast = cast + actorandrole[0] + '\n'
+                details['cast'] = cast
+            if currentrow[21]:
+                trailers = currentrow[21].split('	')
+                if len(trailers) > 0:
+                    nameandurl = trailers[0].split('|')
+                    if len(nameandurl) > 1 and nameandurl[1]:
+                        details['trailer'] = nameandurl[1]
+            if currentrow[22]:
+                if currentrow[22] == 0:
+                    details['color'] = 1
+                elif currentrow[22] == 1:
+                    details['color'] = 2
+            if currentrow[23]:
+                details['rating'] = currentrow[23]
+        except Exception, e:
+            log.exception('')
+            details = None
+        
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.cursor:
+            self.cursor.close()
+            self.cursor = None
+        if self.connection:
+            self.connection.close()
+            self.connection = None
+        self.fileversion = None
+
+    def destroy(self):
+        """close all resources"""
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        try:
+            log.debug('Connecting with: DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            self.connection = pyodbc.connect('DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            curs = self.connection.cursor()
+            tablerow = curs.tables(table='Movie').fetchone()
+            if tablerow:
+                version = 1.0
+            curs.close()
+        except Exception, e:
+            log.error(str(e))
+        log.info('The Movie Library Import: Found file version %s' % version)
+        return version;
+


Property changes on: trunk/lib/plugins/imp/TheMovieLibrary.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/lib/plugins/imp/WintoolzFilmdatenbank.py
===================================================================
--- trunk/lib/plugins/imp/WintoolzFilmdatenbank.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/WintoolzFilmdatenbank.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -22,11 +22,7 @@
 # GNU General Public License, version 2 or later
 
 from plugins.imp import ImportPlugin as IP
-import os
-import sys
 import gutils
-import string
-import db
 
 try:
     import sqlite3

Modified: trunk/lib/plugins/imp/__init__.py
===================================================================
--- trunk/lib/plugins/imp/__init__.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/__init__.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -26,6 +26,7 @@
 import os.path
 import time
 import gc
+import struct
 from tempfile import mkstemp
 import logging
 log = logging.getLogger("Griffith")
@@ -256,23 +257,24 @@
                                         pass
                             # adding poster
                             if poster:
-                                # check for JPEG/PNG header otherwise it should be a filename 
-                                if len(poster) > 4 and \
-                                    ((ord(poster[0]) == 0xFF and ord(poster[1]) == 0xD8 and ord(poster[2]) == 0xFF and ord(poster[3]) == 0xE0) or
-                                     (ord(poster[0]) == 0x89 and ord(poster[1]) == 0x50 and ord(poster[2]) == 0x4E and ord(poster[3]) == 0x47)):
-                                    # make a temporary file
-                                    try:
-                                        posterfilefd, posterfilename = mkstemp('.img')
+                                if len(poster) > 4:
+                                    # check for JPEG/PNG header otherwise it should be a filename 
+                                    header = struct.unpack_from('4s', poster)[0]
+                                    if header == '\xff\xd8\xff\xe0' or \
+                                       header == '\x89\x50\x4e\x47':
+                                        # make a temporary file
                                         try:
-                                            os.write(posterfilefd, poster)
+                                            posterfilefd, posterfilename = mkstemp('.img')
+                                            try:
+                                                os.write(posterfilefd, poster)
+                                            finally:
+                                                os.close(posterfilefd)
+                                            edit.update_image(self.parent, number, posterfilename)
                                         finally:
-                                            os.close(posterfilefd)
-                                        edit.update_image(self.parent, number, posterfilename)
-                                    finally:
-                                        if os.path.isfile(posterfilename):
-                                            os.remove(posterfilename)
-                                else:
-                                    edit.update_image(self.parent, number, poster)
+                                            if os.path.isfile(posterfilename):
+                                                os.remove(posterfilename)
+                                    else:
+                                        edit.update_image(self.parent, number, poster)
                         except Exception, e:
                             log.exception("movie details are not unique, skipping")
                         numbers.add(number)

Modified: trunk/lib/plugins/imp/eXtremeMovieManager.py
===================================================================
--- trunk/lib/plugins/imp/eXtremeMovieManager.py	2009-12-08 20:59:31 UTC (rev 1328)
+++ trunk/lib/plugins/imp/eXtremeMovieManager.py	2009-12-12 13:51:22 UTC (rev 1329)
@@ -23,12 +23,9 @@
 
 from plugins.imp import ImportPlugin as IP
 import os
-import sys
 import gutils
-import string
-import struct
-import db
 from xml.dom import minidom, Node
+
 import logging
 log = logging.getLogger("Griffith")
 



From mikej06 at mail.berlios.de  Sat Dec 12 22:26:24 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 12 Dec 2009 22:26:24 +0100
Subject: [Griffith-svn] r1330 - in trunk: . lib/plugins/imp
Message-ID: <200912122126.nBCLQOdn017304@sheep.berlios.de>

Author: mikej06
Date: 2009-12-12 22:26:04 +0100 (Sat, 12 Dec 2009)
New Revision: 1330

Added:
   trunk/lib/plugins/imp/AllMyMovies.py
Modified:
   trunk/ChangeLog
   trunk/NEWS
Log:
new import plugin All My Movies (MS Access / Jet DB based)

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-12 13:51:22 UTC (rev 1329)
+++ trunk/ChangeLog	2009-12-12 21:26:04 UTC (rev 1330)
@@ -6,7 +6,7 @@
 
 
 2009-12-12  Michael Jahn
-	* new import plugins: BES The Movie Library, Fox Movie Manager, MyDVDs, The Movie Library
+	* new import plugins: All My Movies, BES The Movie Library, Fox Movie Manager, MyDVDs, The Movie Library
 	  (all MS Access / Jet DB based)
 	* cleanup import sections of other import plugins
 

Modified: trunk/NEWS
===================================================================
--- trunk/NEWS	2009-12-12 13:51:22 UTC (rev 1329)
+++ trunk/NEWS	2009-12-12 21:26:04 UTC (rev 1330)
@@ -3,6 +3,7 @@
 * Griffith extensions feature added. You can add your own extensions in
   ~/.griffith/lib/extensions
 * New import plugins:
+   - All My Movies
    - Barret Enterprise Software The Movie Library
    - DVD Profiler
    - eXtreme Movie Manager

Added: trunk/lib/plugins/imp/AllMyMovies.py
===================================================================
--- trunk/lib/plugins/imp/AllMyMovies.py	2009-12-12 13:51:22 UTC (rev 1329)
+++ trunk/lib/plugins/imp/AllMyMovies.py	2009-12-12 21:26:04 UTC (rev 1330)
@@ -0,0 +1,223 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import gutils
+import string
+
+try:
+    import pyodbc
+except ImportError:
+    pass
+
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('All My Movies 5.7')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[aA][mM][mM]'
+    mime_types   = None
+
+    fileversion  = None
+    connection   = None
+    cursor       = None
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        if self.connection:
+            try:
+                curs = self.connection.cursor()
+                curs.execute('SELECT COUNT(*) FROM movies')
+                count = curs.fetchone()[0]
+            except:
+                log.exception('')
+        else:
+            log.error('AllMyMovies Import: No connection object.')
+        log.info('AllMyMovies Import: %s movies for import' % count)
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.cursor:
+            self.cursor = self.connection.cursor()
+            self.cursor.execute( \
+                'SELECT MovieID, barcode, comments, description, length, mediacount, MediaTypeName, \
+                        mpaa, Name, originaltitle, rating, seen, studio, url, year, Trailer \
+                 FROM movies LEFT OUTER JOIN MediaType ON movies.MediaTypeID=MediaType.MediaTypeID;')
+        
+        currentrow = self.cursor.fetchone()
+        if not currentrow:
+            return None
+        
+        details = {}
+        try:
+            movieID = currentrow[0]
+            if currentrow[1]:
+                details['barcode'] = currentrow[1]
+            if currentrow[2]:
+                details['notes'] = currentrow[2]
+            if currentrow[3]:
+                details['plot'] = currentrow[3]
+            if currentrow[4]:
+                details['runtime'] = gutils.digits_only(currentrow[4])
+            if currentrow[5]:
+                details['media_num'] = currentrow[5]
+            if currentrow[6]:
+                details['medium_id'] = currentrow[6]
+            if currentrow[7]:
+                details['classification'] = currentrow[7]
+            if currentrow[8]:
+                details['title'] = currentrow[8]
+            if currentrow[9]:
+                details['o_title'] = currentrow[9]
+            if currentrow[10]:
+                details['rating'] = round(currentrow[10] / 10.0, 0)
+            if currentrow[11]:
+                details['seen'] = currentrow[11]
+            if currentrow[12]:
+                details['studio'] = currentrow[12]
+            if currentrow[13]:
+                details['url'] = currentrow[13]
+            if currentrow[14]:
+                details['year'] = currentrow[14]
+            if currentrow[15]:
+                details['trailer'] = currentrow[15]
+            # loading other details
+            curs = self.connection.cursor()
+            curs.execute('SELECT Actors.Name, ActorsLink.Role \
+                          FROM Actors INNER JOIN ActorsLink ON Actors.ActorID=ActorsLink.ActorID \
+                          WHERE ActorsLink.MovieID=' + str(movieID))
+            currentrow = curs.fetchone()
+            if currentrow:
+                if currentrow[1]:
+                    cast = currentrow[0] + _(' as ') + currentrow[1]
+                else:
+                    cast = currentrow[0]
+                currentrow = curs.fetchone()
+                while currentrow:
+                    if currentrow[1]:
+                        cast = cast + '\n' + currentrow[0] + _(' as ') + currentrow[1]
+                    else:
+                        cast = cast + '\n' + currentrow[0]
+                    currentrow = curs.fetchone()
+                details['cast'] = cast
+            
+            curs.execute('SELECT Countries.Name \
+                          FROM Countries INNER JOIN CountryLink ON Countries.CountryID=CountryLink.CountryID \
+                          WHERE CountryLink.MovieID=' + str(movieID))
+            currentrow = curs.fetchone()
+            if currentrow:
+                country = currentrow[0]
+                currentrow = curs.fetchone()
+                while currentrow:
+                    country = country + ', ' + currentrow[0]
+                    currentrow = curs.fetchone()
+                details['country'] = country
+            
+            curs.execute('SELECT Actors.Name \
+                          FROM Actors INNER JOIN DirectorLink ON Actors.ActorID=DirectorLink.ActorID \
+                          WHERE DirectorLink.MovieID=' + str(movieID))
+            currentrow = curs.fetchone()
+            if currentrow:
+                director = currentrow[0]
+                currentrow = curs.fetchone()
+                while currentrow:
+                    director = director + ', ' + currentrow[0]
+                    currentrow = curs.fetchone()
+                details['director'] = director
+            
+            curs.execute('SELECT Genres.Name \
+                          FROM Genres INNER JOIN GenresLink ON Genres.GenreID=GenresLink.GenreID \
+                          WHERE GenresLink.MovieID=' + str(movieID))
+            currentrow = curs.fetchone()
+            if currentrow:
+                genre = currentrow[0]
+                currentrow = curs.fetchone()
+                while currentrow:
+                    genre = genre + ', ' + currentrow[0]
+                    currentrow = curs.fetchone()
+                details['genre'] = genre
+            
+            curs.execute('SELECT images.image \
+                          FROM images \
+                          WHERE cover=-1 AND images.MovieID=' + str(movieID))
+            currentrow = curs.fetchone()
+            if currentrow:
+                details['poster'] = currentrow[0]
+            
+            curs.close()
+        except Exception, e:
+            log.exception('')
+            details = None
+        #print details
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.cursor:
+            self.cursor.close()
+            self.cursor = None
+        if self.connection:
+            self.connection.close()
+            self.connection = None
+        self.fileversion = None
+
+    def destroy(self):
+        """close all resources"""
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        try:
+            log.debug('Connecting with: DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            self.connection = pyodbc.connect('DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s' % string.replace(self.filename, '\\', '\\\\'))
+            curs = self.connection.cursor()
+            tablerow = curs.tables(table='movies').fetchone()
+            if tablerow:
+                version = 1.0
+            curs.close()
+        except Exception, e:
+            log.error(str(e))
+        log.info('AllMyMovies Import: Found file version %s' % version)
+        return version;
+


Property changes on: trunk/lib/plugins/imp/AllMyMovies.py
___________________________________________________________________
Name: svn:keywords
   + Id



From mikej06 at mail.berlios.de  Tue Dec 15 16:12:15 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 15 Dec 2009 16:12:15 +0100
Subject: [Griffith-svn] r1331 - in trunk: . lib/plugins/imp
Message-ID: <200912151512.nBFFCFsh022124@sheep.berlios.de>

Author: mikej06
Date: 2009-12-15 16:11:55 +0100 (Tue, 15 Dec 2009)
New Revision: 1331

Added:
   trunk/lib/plugins/imp/MovieTrack.py
Modified:
   trunk/ChangeLog
   trunk/NEWS
   trunk/lib/plugins/imp/AllMyMovies.py
   trunk/lib/plugins/imp/BESTheMovieLibrary.py
   trunk/lib/plugins/imp/FoxMovieManager.py
   trunk/lib/plugins/imp/MyDVDs.py
   trunk/lib/plugins/imp/TheMovieLibrary.py
Log:
* new import plugin: MovieTrack
* small fixes to other import plugins

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/ChangeLog	2009-12-15 15:11:55 UTC (rev 1331)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-15  Michael Jahn
+	* new import plugin: MovieTrack
+
 2009-12-12  Michael Jahn
 	* new import plugins: All My Movies, BES The Movie Library, Fox Movie Manager, MyDVDs, The Movie Library
 	  (all MS Access / Jet DB based)

Modified: trunk/NEWS
===================================================================
--- trunk/NEWS	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/NEWS	2009-12-15 15:11:55 UTC (rev 1331)
@@ -9,6 +9,7 @@
    - eXtreme Movie Manager
    - Fox Movie Manager
    - GCstar
+   - MovieTrack
    - MyDVDs
    - Personal Video Database
    - The Movie Library

Modified: trunk/lib/plugins/imp/AllMyMovies.py
===================================================================
--- trunk/lib/plugins/imp/AllMyMovies.py	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/lib/plugins/imp/AllMyMovies.py	2009-12-15 15:11:55 UTC (rev 1331)
@@ -116,7 +116,7 @@
             if currentrow[12]:
                 details['studio'] = currentrow[12]
             if currentrow[13]:
-                details['url'] = currentrow[13]
+                details['site'] = currentrow[13]
             if currentrow[14]:
                 details['year'] = currentrow[14]
             if currentrow[15]:
@@ -214,7 +214,7 @@
             curs = self.connection.cursor()
             tablerow = curs.tables(table='movies').fetchone()
             if tablerow:
-                version = 1.0
+                version = 5.7
             curs.close()
         except Exception, e:
             log.error(str(e))

Modified: trunk/lib/plugins/imp/BESTheMovieLibrary.py
===================================================================
--- trunk/lib/plugins/imp/BESTheMovieLibrary.py	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/lib/plugins/imp/BESTheMovieLibrary.py	2009-12-15 15:11:55 UTC (rev 1331)
@@ -138,7 +138,7 @@
             curs = self.connection.cursor()
             tablerow = curs.tables(table='Main').fetchone()
             if tablerow:
-                version = 1.0
+                version = 1.9
             curs.close()
         except Exception, e:
             log.error(str(e))

Modified: trunk/lib/plugins/imp/FoxMovieManager.py
===================================================================
--- trunk/lib/plugins/imp/FoxMovieManager.py	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/lib/plugins/imp/FoxMovieManager.py	2009-12-15 15:11:55 UTC (rev 1331)
@@ -184,7 +184,7 @@
             curs = self.connection.cursor()
             tablerow = curs.tables(table='tblMovie').fetchone()
             if tablerow:
-                version = 1.0
+                version = 1.4
             curs.close()
         except Exception, e:
             log.error(str(e))

Added: trunk/lib/plugins/imp/MovieTrack.py
===================================================================
--- trunk/lib/plugins/imp/MovieTrack.py	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/lib/plugins/imp/MovieTrack.py	2009-12-15 15:11:55 UTC (rev 1331)
@@ -0,0 +1,207 @@
+# -*- coding: utf-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from plugins.imp import ImportPlugin as IP
+import gutils
+import string
+import os
+
+import logging
+log = logging.getLogger("Griffith")
+
+class ImportPlugin(IP):
+    description  = _('MovieTrack (version 3.4x)')
+    author       = 'Michael Jahn'
+    email        = 'griffith-private at lists.berlios.de'
+    version      = '1.0'
+    file_filters = '*.[dD][aA][tT]'
+    mime_types   = None
+
+    fileversion  = None
+    openedfile   = None
+    imdbfilename = None
+
+    def initialize(self):
+        if not IP.initialize(self):
+            return False
+        self.edit = False
+        return True
+    
+    def set_source(self, name):
+        IP.set_source(self, name)
+        self.filename = name
+        self.fileversion = self.read_fileversion()
+        if self.fileversion == None:
+            gutils.error(self, _('The format of the file is not supported.'))
+            return False
+        if self.filename:
+            self.imdbfilename = os.path.join(os.path.dirname(self.filename), 'IMDb.dat')
+        else:
+            self.imdbfilename = None
+        return True
+
+    def count_movies(self):
+        """Returns number of movies in file which is about to be imported"""
+        count = 0
+        fileforcount= open(self.filename)
+        try:
+            for line in fileforcount:
+                count = count + 1
+        except:
+            log.exception('')
+        finally:
+            fileforcount.close()
+        log.info('MovieTrack Import: %s movies for import' % count)
+        return count
+
+    def get_movie_details(self):
+        """Returns dictionary with movie details"""
+        if not self.openedfile:
+            self.openedfile = open(self.filename)
+
+        details = {}
+        try:
+            fields = []
+            while len(fields) != 13:
+                currentline = self.openedfile.readline()
+                if not currentline:
+                    return None
+                fields = currentline[2:-2].split('||')
+
+            if not fields[0] == 'NULL':
+                details['title'] = unicode(fields[0])   # MovieName
+            #details[''] = fields[1]    # SubEntry
+            #details[''] = fields[2]    # Location
+            if not fields[3] == 'NULL':
+                details['genre'] = unicode(fields[3])   # Genre
+            #details[''] = fields[4]    # Presence
+            if not fields[5] == 'NULL':
+                details['medium_id'] = fields[5]        # Medium
+            if not fields[6] == 'NULL':
+                try:
+                    details['rating'] = int(gutils.before(fields[6], '/')) # Rating
+                except:
+                    pass
+            if not fields[7] == 'NULL':
+                filepath = fields[7]                    # FilePath
+                if not os.path.exists(filepath):
+                    filename = os.path.basename(filepath)
+                    filepath = os.path.join('Covers', filename)
+                    if not os.path.exists(filepath):
+                        filepath = filename
+                        if not os.path.exists(filepath):
+                            filepath = None
+                if filepath:
+                    details['poster'] = filepath
+            if not fields[8] == 'NULL':
+                details['barcode'] = unicode(fields[8]) # Barcode
+            #details[''] = fields[9]    # AKA
+            if not fields[10] == 'NULL':
+                details['notes'] = unicode(fields[10])  # Comments
+            movieid = fields[11]                        # AGN
+            #details[''] = fields[12]   # UGN
+            
+            # try to get some more details from imdb-file
+            try:
+                if self.imdbfilename:
+                    openedimdb = open(self.imdbfilename)
+                    while fields:
+                        fields = []
+                        while len(fields) != 17:
+                            currentline = openedimdb.readline()
+                            if not currentline:
+                                fields = None
+                                break
+                            fields = currentline[2:-2].split('||')
+                        if fields and fields[1] == movieid:
+                            #details[''] = fields[0]     # MovieName
+                            #details[''] = fields[1]     # AGN
+                            #details[''] = fields[2]     # Title
+                            #details[''] = fields[3]     # AKA
+                            if not fields[4] == 'NULL':
+                                details['year'] = fields[4]              # Year
+                            if not fields[5] == 'NULL':
+                                details['director'] = unicode(fields[5]) # Director
+                            #details[''] = fields[6]     # Tagline
+                            if not fields[7] == 'NULL':
+                                details['plot'] = unicode(fields[7])     # Summary
+                            if not fields[8] == 'NULL' and not 'genre' in details:
+                                details['genre'] = unicode(fields[8])   # Genre
+                            if not fields[9] == 'NULL':
+                                details['cast'] = unicode(fields[9])    # Actors
+                            if not fields[10] == 'NULL':
+                                details['classification'] = unicode(fields[10]) # MPAA
+                            #details[''] = fields[11]    # Language
+                            if not fields[12] == 'NULL':
+                                details['runtime'] = fields[12]         # Runtime
+                            if not fields[13] == 'NULL' and not 'rating' in details:
+                                try:
+                                    details['rating'] = int(gutils.before(fields[13], '/')) # Rating
+                                except:
+                                    pass
+                            #details[''] = fields[14]    # VoteCount
+                            if not fields[15] == 'NULL':
+                                details['site'] = unicode(fields[15])    # URL
+                            #details[''] = fields[16]    # Exclude
+            except:
+                log.exception('')
+            finally:
+                openedimdb.close()
+            
+        except EOFError:
+            details = None
+        except Exception, e:
+            log.exception('')
+            details = None
+        
+        return details
+
+    def clear(self):
+        """clear plugin before next source file"""
+        IP.clear(self)
+        if self.openedfile:
+            self.openedfile.close()
+            self.openedfile = None
+        self.fileversion = None
+
+    def destroy(self):
+        """close all resources"""
+        IP.destroy(self)
+
+    def read_fileversion(self):
+        version = None
+        try:
+            openfile = open(self.filename)
+            try:
+                firstline = openfile.readline()
+                if firstline[0] == '~':
+                    firstlineparts = string.split(firstline, '||')
+                    if len(firstlineparts) == 13:
+                        version = 3.4
+            finally:
+                openfile.close()
+        except Exception, e:
+            log.error(str(e))
+        log.info('MovieTrack Import: Found file version %s' % version)
+        return version;
+


Property changes on: trunk/lib/plugins/imp/MovieTrack.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/lib/plugins/imp/MyDVDs.py
===================================================================
--- trunk/lib/plugins/imp/MyDVDs.py	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/lib/plugins/imp/MyDVDs.py	2009-12-15 15:11:55 UTC (rev 1331)
@@ -148,7 +148,7 @@
             curs = self.connection.cursor()
             tablerow = curs.tables(table='dvd').fetchone()
             if tablerow:
-                version = 1.0
+                version = 1.6
             curs.close()
         except Exception, e:
             log.error(str(e))

Modified: trunk/lib/plugins/imp/TheMovieLibrary.py
===================================================================
--- trunk/lib/plugins/imp/TheMovieLibrary.py	2009-12-12 21:26:04 UTC (rev 1330)
+++ trunk/lib/plugins/imp/TheMovieLibrary.py	2009-12-15 15:11:55 UTC (rev 1331)
@@ -190,7 +190,7 @@
             curs = self.connection.cursor()
             tablerow = curs.tables(table='Movie').fetchone()
             if tablerow:
-                version = 1.0
+                version = 1.4
             curs.close()
         except Exception, e:
             log.error(str(e))



From mikej06 at mail.berlios.de  Tue Dec 15 22:21:03 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 15 Dec 2009 22:21:03 +0100
Subject: [Griffith-svn] r1332 - trunk
Message-ID: <200912152121.nBFLL3ff007041@sheep.berlios.de>

Author: mikej06
Date: 2009-12-15 22:20:52 +0100 (Tue, 15 Dec 2009)
New Revision: 1332

Modified:
   trunk/winpackage.iss
   trunk/winsetup.bat
Log:
added the new extensions to the windows installer
added start menu link for debugging mode and log file of griffith
more cleanups

Modified: trunk/winpackage.iss
===================================================================
--- trunk/winpackage.iss	2009-12-15 15:11:55 UTC (rev 1331)
+++ trunk/winpackage.iss	2009-12-15 21:20:52 UTC (rev 1332)
@@ -67,17 +67,18 @@
 Source: dist\lib\db\*;           DestDir: {app}\lib\db;           Flags: ignoreversion recursesubdirs createallsubdirs
 Source: dist\lib\gettext\*;      DestDir: {app}\lib\gettext;      Flags: ignoreversion recursesubdirs createallsubdirs
 Source: dist\lib\glade3\*;       DestDir: {app}\lib\glade3;       Flags: ignoreversion recursesubdirs createallsubdirs
-Source: dist\lib\glib-2.0\*;     DestDir: {app}\lib\glib-2.0;     Flags: ignoreversion recursesubdirs createallsubdirs
+;Source: dist\lib\glib-2.0\*;     DestDir: {app}\lib\glib-2.0;     Flags: ignoreversion recursesubdirs createallsubdirs
 Source: dist\lib\gtk-2.0\*;      DestDir: {app}\lib\gtk-2.0;      Flags: ignoreversion recursesubdirs createallsubdirs
-Source: dist\lib\gtkglext-1.0\*; DestDir: {app}\lib\gtkglext-1.0; Flags: ignoreversion recursesubdirs createallsubdirs
-Source: dist\lib\libglade\*;     DestDir: {app}\lib\libglade;     Flags: ignoreversion recursesubdirs createallsubdirs
-Source: dist\lib\pango\*;        DestDir: {app}\lib\pango;        Flags: ignoreversion recursesubdirs createallsubdirs
-Source: dist\lib\pkgconfig\*;    DestDir: {app}\lib\pkgconfig;    Flags: ignoreversion recursesubdirs createallsubdirs
+;Source: dist\lib\gtkglext-1.0\*; DestDir: {app}\lib\gtkglext-1.0; Flags: ignoreversion recursesubdirs createallsubdirs
+;Source: dist\lib\libglade\*;     DestDir: {app}\lib\libglade;     Flags: ignoreversion recursesubdirs createallsubdirs
+;Source: dist\lib\pango\*;        DestDir: {app}\lib\pango;        Flags: ignoreversion recursesubdirs createallsubdirs
+;Source: dist\lib\pkgconfig\*;    DestDir: {app}\lib\pkgconfig;    Flags: ignoreversion recursesubdirs createallsubdirs
 ; don't use recursion because of components selection (movie plugins, ...)
-Source: dist\lib\plugins\*;        DestDir: {app}\lib\plugins;    Flags: ignoreversion
+Source: dist\lib\plugins\*;      DestDir: {app}\lib\plugins;      Flags: ignoreversion
 ; use recursion, no components
-Source: dist\lib\plugins\export\*; DestDir: {app}\lib\plugins\export; Flags: ignoreversion recursesubdirs createallsubdirs
-Source: dist\lib\plugins\imp\*;    DestDir: {app}\lib\plugins\imp;    Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\plugins\export\*;     DestDir: {app}\lib\plugins\export;     Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\plugins\extensions\*; DestDir: {app}\lib\plugins\extensions; Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\plugins\imp\*;        DestDir: {app}\lib\plugins\imp;        Flags: ignoreversion recursesubdirs createallsubdirs
 ; component based installation
 Source: dist\lib\plugins\movie\PluginMovie7arte.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\7arte
 Source: dist\lib\plugins\movie\PluginMovieAllMovie.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\AllMovie
@@ -120,6 +121,8 @@
 Name: {group}\{cm:LaunchProgram,Griffith};    Filename: {app}\griffith.exe
 Name: {group}\{cm:UninstallProgram,Griffith}; Filename: {uninstallexe}
 Name: {group}\{cm:ProgramOnTheWeb,Griffith};  Filename: http://griffith.cc
+Name: {group}\Debug\Griffith Debug Start;     Filename: {app}\griffith.exe;         Parameters: --debug
+Name: {group}\Debug\Griffith Log File;        Filename: %APPDATA%\Griffith\griffith.log
 Name: {group}\Doc\Griffith Forum;             Filename: http://griffith.cc/forum/
 Name: {group}\Doc\Griffith Wiki;              Filename: http://wiki.griffith.cc/
 ; some information files opened by iexplore which should work on most installations
@@ -140,9 +143,11 @@
 [UninstallDelete]
 Type: files; Name: {app}\lib\*.pyo
 Type: files; Name: {app}\lib\db\*.pyo
+Type: files; Name: {app}\lib\plugins\*.pyo
 Type: files; Name: {app}\lib\plugins\export\*.pyo
+Type: files; Name: {app}\lib\plugins\extensions\*.pyo
+Type: files; Name: {app}\lib\plugins\imp\*.pyo
 Type: files; Name: {app}\lib\plugins\movie\*.pyo
-Type: files; Name: {app}\lib\plugins\imp\*.pyo
 
 [Components]
 Name: Griffith;                                      Description: Griffith; Types: custom compact full; Flags: fixed

Modified: trunk/winsetup.bat
===================================================================
--- trunk/winsetup.bat	2009-12-15 15:11:55 UTC (rev 1331)
+++ trunk/winsetup.bat	2009-12-15 21:20:52 UTC (rev 1332)
@@ -55,10 +55,17 @@
 copy "%GRIFFITHDIR%\TRANSLATORS" "%GRIFFITHDIR%\dist\"
 
 rem *** remove unnecessary files
-del /S /F /Q *.pyo
-del /S /F /Q *.a
-del /S /F /Q *.lib
-del /S /F /Q xml2Conf.sh
+del /S /F /Q "%GRIFFITHDIR%\dist\*.pyo"
+del /S /F /Q "%GRIFFITHDIR%\dist\*.a"
+del /S /F /Q "%GRIFFITHDIR%\dist\*.lib"
+del /S /F /Q "%GRIFFITHDIR%\dist\xml2Conf.sh"
+del /S /F /Q "%GRIFFITHDIR%\dist\*.pyc"
+del /S /F /Q "%GRIFFITHDIR%\dist\*.la"
+del /S /F /Q "%GRIFFITHDIR%\dist\*.def"
+rd /S /Q "%GRIFFITHDIR%\dist\lib\pkgconfig"
+rd /S /Q "%GRIFFITHDIR%\dist\lib\gtkglext-1.0"
+rd /S /Q "%GRIFFITHDIR%\dist\lib\gtk-2.0\include"
+rd /S /Q "%GRIFFITHDIR%\dist\lib\glib-2.0"
 
 :END
 



From mikej06 at mail.berlios.de  Tue Dec 15 22:22:11 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 15 Dec 2009 22:22:11 +0100
Subject: [Griffith-svn] r1333 - trunk/lib
Message-ID: <200912152122.nBFLMBMK007135@sheep.berlios.de>

Author: mikej06
Date: 2009-12-15 22:22:04 +0100 (Tue, 15 Dec 2009)
New Revision: 1333

Modified:
   trunk/lib/main_treeview.py
Log:
fixed small warning which occurs when no movie is in the database

Modified: trunk/lib/main_treeview.py
===================================================================
--- trunk/lib/main_treeview.py	2009-12-15 21:20:52 UTC (rev 1332)
+++ trunk/lib/main_treeview.py	2009-12-15 21:22:04 UTC (rev 1333)
@@ -509,7 +509,8 @@
     # add new treemodel and allow refreshs again
     self.widgets['treeview'].set_model(self.treemodel)
     self.widgets['treeview'].thaw_child_notify()
-    self.widgets['treeview'].set_cursor_on_cell(0)
+    if self.total:
+        self.widgets['treeview'].set_cursor_on_cell(0)
     self.count_statusbar()
 #}}}
 



From piotrek at mail.berlios.de  Sun Dec 20 22:46:12 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sun, 20 Dec 2009 22:46:12 +0100
Subject: [Griffith-svn] r1334 - in trunk: . glade lib
Message-ID: <200912202146.nBKLkChw005943@sheep.berlios.de>

Author: piotrek
Date: 2009-12-20 22:46:11 +0100 (Sun, 20 Dec 2009)
New Revision: 1334

Modified:
   trunk/ChangeLog
   trunk/glade/griffith.glade
   trunk/griffith
   trunk/lib/config.py
   trunk/lib/initialize.py
   trunk/lib/widgets.py
Log:
Add "Extensions toolbar" menu item


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-15 21:22:04 UTC (rev 1333)
+++ trunk/ChangeLog	2009-12-20 21:46:11 UTC (rev 1334)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-20  Piotr O?arowski
+	* Add "Extensions toolbar" menu item
+
 2009-12-15  Michael Jahn
 	* new import plugin: MovieTrack
 

Modified: trunk/glade/griffith.glade
===================================================================
--- trunk/glade/griffith.glade	2009-12-15 21:22:04 UTC (rev 1333)
+++ trunk/glade/griffith.glade	2009-12-20 21:46:11 UTC (rev 1334)
@@ -222,6 +222,16 @@
                       </widget>
                     </child>
                     <child>
+                      <widget class="GtkCheckMenuItem" id="menu_ext_toolbar">
+                        <property name="visible">True</property>
+                        <property name="label" translatable="yes">Extensions toolbar</property>
+                        <property name="use_underline">True</property>
+                        <property name="active">False</property>
+                        <signal name="activate" handler="on_view_ext_toolbar_activate"/>
+                        <accelerator key="T" modifiers="GDK_SHIFT_MASK | GDK_CONTROL_MASK" signal="activate"/>
+                      </widget>
+                    </child>
+                    <child>
                       <widget class="GtkSeparatorMenuItem" id="separator3">
                         <property name="visible">True</property>
                       </widget>

Modified: trunk/griffith
===================================================================
--- trunk/griffith	2009-12-15 21:22:04 UTC (rev 1333)
+++ trunk/griffith	2009-12-20 21:46:11 UTC (rev 1334)
@@ -101,7 +101,7 @@
             else:
                 log.error('Cant convert old database, exiting.')
                 sys.exit(4)
-        
+
         # create/connect db
         from sql import GriffithSQL
         self.db = GriffithSQL(config, self.locations['home'])
@@ -209,7 +209,7 @@
             if not hasattr(self, 'mainwindow_state') or self.mainwindow_state is None:
                 self.mainwindow_state = {}
             self.mainwindow_state['state'] = int(windowstate.new_window_state & gtk.gdk.WINDOW_STATE_MAXIMIZED)
-    
+
     def toggle_fullscreen(self, widget):
         if widget is True or widget.get_active():
             self.widgets['window'].fullscreen()
@@ -541,7 +541,7 @@
                 self.widgets['add']['lang_treeview'].grab_focus()
                 self.widgets['add']['lang_treeview'].set_cursor( path, col, 0)
             self.widgets['add']['lang_menu'].popup(None, None, None, event.button, time)
-    
+
     def create_language_row(self, lang=None):
         if len(self.languages_ids) == 1:
             return False
@@ -564,7 +564,7 @@
             model.set_value(myiter, 4, get_text(self.lang['subformat'], lang.subformat_id))
         else:
             model.set_value(myiter, 0, get_text(self.lang['lang'], -1))
-    
+
     def on_tv_lang_combo_edited(self, widget, path, new_text, column):
         model = self.widgets['add']['lang_treeview'].get_model()
         model[path][column] = new_text
@@ -1333,6 +1333,15 @@
         self.config.set('view_toolbar', state, section='window')
         self.config.save()
 
+    def toggle_ext_toolbar(self, *args):
+        state = self.widgets['menu']['ext_toolbar'].get_active()
+        if state == False:
+            self.widgets['extensions']['toolbar_hb'].hide()
+        else:
+            self.widgets['extensions']['toolbar_hb'].show()
+        self.config.set('view_ext_toolbar', state, section='window')
+        self.config.save()
+
     def new_dbb(self, *args):
         """initializes a new Griffith Database file"""
         if gutils.question(_('Are you sure you want to create a new database?\nYou will lose ALL your current data!'), self.widgets['window']):
@@ -1345,7 +1354,7 @@
                 posters_dir = self.locations['posters']
                 # NOTE: only used images are removed (posters are shared between various db)
                 log.debug('removing old images...')
-                
+
                 posters = self.db.session.query(db.Movie.poster_md5).all()
                 for poster in posters:
                     delete_poster_from_cache(self, poster[0])
@@ -1420,7 +1429,7 @@
         if event.type == gtk.gdk._2BUTTON_PRESS:
             return self.on_results_select_press_event(widget)
         return self._resultswin_button_pressed_signal(widget, event)
-    
+
     def on_results_select_press_event(self, button):
         treeselection = self.widgets['results']['treeview'].get_selection()
         if not treeselection:
@@ -1450,7 +1459,7 @@
     def go_next(self, *args):
         self.click_on(self.widgets['treeview'], 'next')
     # TODO: remove total_filter var.
-    
+
     def click_on(self, treeview, direction):
         treeselection = treeview.get_selection()
         if not treeselection:

Modified: trunk/lib/config.py
===================================================================
--- trunk/lib/config.py	2009-12-15 21:22:04 UTC (rev 1333)
+++ trunk/lib/config.py	2009-12-20 21:46:11 UTC (rev 1334)
@@ -205,5 +205,6 @@
         self._cfg.set('window', 'left', 'None')
         self._cfg.set('window', 'top', 'None')
         self._cfg.set('window', 'view_toolbar', 'True')
+        self._cfg.set('window', 'view_ext_toolbar', 'False')
         self._cfg.set('window', 'width', '500')
         self.save()

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-12-15 21:22:04 UTC (rev 1333)
+++ trunk/lib/initialize.py	2009-12-20 21:46:11 UTC (rev 1334)
@@ -52,11 +52,11 @@
     locations['exec'] = os.path.abspath(os.path.dirname(sys.argv[0])) # deprecated
     locations['lib']  = os.path.dirname(__file__)
     locations['home'] = home_dir
-    
+
     if os.name == 'nt' or os.name.startswith('win'): # win32, win64
         import winshell
         from win32com.shell import shellcon, shell
-        
+
         locations['movie_plugins']  = "%s\\lib\\plugins\\movie" % locations['exec']
         locations['export_plugins'] = "%s\\lib\\plugins\\export" % locations['exec']
         locations['images']         = "%s\\images" % locations['exec']
@@ -65,7 +65,7 @@
         locations['desktop']        = ''
         locations['i18n']           = "%s\\i18n" % locations['exec']
         os.environ['PATH'] += ";lib;"
-        
+
         # windows hack for locale setting
         lang = os.getenv('LANG')
         if lang is None:
@@ -88,10 +88,10 @@
     else:
         print 'Operating system not supported'
         sys.exit()
-    
+
     from tempfile import gettempdir
     locations['temp'] = gettempdir()
-    
+
     try:
         if not os.path.exists(locations['home']):
             log.info('Creating %s', locations['home'])
@@ -106,7 +106,7 @@
     if not os.access(locations['home'], os.W_OK):
         log.info('Cannot write to griffith directory, %s', locations['home'])
         sys.exit()
-    
+
     locations['posters'] = os.path.join(locations['home'], 'posters')
     if not os.path.isdir(locations['posters']):
         os.makedirs(locations['posters'])
@@ -115,7 +115,7 @@
     sys.path.append(locations['lib'])
     sys.path.append(locations['movie_plugins'])
     sys.path.append(locations['export_plugins'])
-    
+
     self.locations = locations
     return locations
 
@@ -126,9 +126,9 @@
         self.mac = True
     else:
         self.mac = False
-    
+
     self.griffith_dir = self.locations['home']    # deprecated
-    
+
     if self.windows:
         gtk.rc_parse('%s\\gtkrc' % self.locations['exec'])
 
@@ -147,9 +147,18 @@
 
 def toolbar(self):
     """if toolbar is hide in config lets hide the widget"""
-    if not self.config.get('view_toolbar', 'True', section='window'):
+    if not self.config.get('view_toolbar', True, section='window'):
         self.widgets['toolbar'].hide()
         self.widgets['menu']['toolbar'].set_active(False)
+    else:
+        self.widgets['toolbar'].show()
+        self.widgets['menu']['toolbar'].set_active(True)
+    if not self.config.get('view_ext_toolbar', True, section='window'):
+        self.widgets['extensions']['toolbar_hb'].hide()
+        self.widgets['menu']['ext_toolbar'].set_active(False)
+    else:
+        self.widgets['extensions']['toolbar_hb'].show()
+        self.widgets['menu']['ext_toolbar'].set_active(True)
 
 def treeview(self):
     self.treemodel = gtk.TreeStore(str, gtk.gdk.Pixbuf, str, str, str, str, bool, str, str)
@@ -311,7 +320,7 @@
     column.set_property('resizable', True)
     column.set_sort_column_id(0)
     treeview.append_column(column)
-    
+
     model = self.lang['type'] = gtk.ListStore(int, str)
     #i = 0
     #for lang_type in self._lang_types:
@@ -348,7 +357,7 @@
     column.set_property('resizable', True)
     column.set_sort_column_id(2)
     treeview.append_column(column)
-    
+
     model = self.lang['achannel'] = gtk.ListStore(int, str)
     for i in self.db.session.query(db.AChannel.achannel_id, db.AChannel.name).all():
         model.append([i.achannel_id, i.name])
@@ -363,7 +372,7 @@
     column.set_property('resizable', True)
     column.set_sort_column_id(3)
     treeview.append_column(column)
-    
+
     model = self.lang['subformat'] = gtk.ListStore(int, str)
     for i in self.db.session.query(db.SubFormat.subformat_id, db.SubFormat.name).all():
         model.append([i.subformat_id, i.name])
@@ -378,7 +387,7 @@
     column.set_property('resizable', True)
     column.set_sort_column_id(4)
     treeview.append_column(column)
-    
+
     treeview.show_all()
 
 def movie_plugins(self):
@@ -416,13 +425,13 @@
         self.widgets['menu']['export'].append(menu_items)
         menu_items.connect('activate', self.on_export_activate, plugin_name)
         menu_items.show()
-        
+
 def import_plugins(self):
     """
     dinamically finds the available import plugins
     and fills the import menu entry
     """
-    
+
     import plugins.imp, math
 
     fields_to_import = ( 'number','title', 'o_title', 'director', 'year', 'runtime', 'country',
@@ -434,7 +443,7 @@
     # glade
     glade_file = gtk.glade.XML(os.path.join(self.locations['glade'], 'import.glade'))
     get = lambda x: glade_file.get_widget(x)
-    
+
     w = self.widgets['import'] = {
         'window'    : get('dialog_import'),
         'pwindow'    : get('dialog_progress'),
@@ -457,11 +466,11 @@
     w['plugin'].connect('changed', plugins.imp.on_import_plugin_changed, w)
     w['window'].set_transient_for(self.widgets['window'])
     w['pwindow'].set_transient_for(self.widgets['window'])
-    
+
     for name in plugins.imp.__all__:
         w['plugin'].append_text(name)
     w['plugin'].set_active(0)
-    
+
     # fields to import
     j = 0
     k = math.ceil( len(self.field_names) / float(3) )
@@ -685,7 +694,7 @@
     vcodec_combos(self)
     media_combos(self)
     create_tag_vbox(self, widget=self.widgets['add']['tag_vbox'], tab=self.am_tags)
-    self.sort_criteria = [ # "[]" because of index() 
+    self.sort_criteria = [ # "[]" because of index()
         'number', 'o_title', 'title', 'director', 'year', 'runtime', 'country',
         'genre', 'studio', 'media_num', 'rating', 'classification', 'collection_id',
         'volume_id', 'cond', 'layers', 'region', 'movie_id']
@@ -805,7 +814,7 @@
         self.widgets['preferences']['db_type'].set_active(3)
     else:
         self.widgets['preferences']['db_type'].set_active(0)
-        
+
     # add completion data
     treemodel = gtk.TreeStore(str)
     for name in (os.path.basename(x)[:-3] for x in glob("%s/*.db" % self.locations['home'])):
@@ -859,7 +868,7 @@
         else:
             name = ''
         self.widgets['add']['collection'].insert_text(int(i), name)
-        # add some white spaces to prevent scrollbar hides parts of the names    
+        # add some white spaces to prevent scrollbar hides parts of the names
         self.widgets['filter']['collection'].insert_text(int(i), name + '   ')
     self.widgets['add']['collection'].show_all()
     self.widgets['filter']['collection'].show_all()
@@ -876,7 +885,7 @@
     self.widgets['filter']['advfilter'].get_model().clear()
     self.widgets['filter']['advfilter'].insert_text(0, '') # empty one
     for i, item in enumerate(self.db.session.query(db.Filter.name).all()):
-        # add some white spaces to prevent scrollbar hides parts of the names    
+        # add some white spaces to prevent scrollbar hides parts of the names
         self.widgets['filter']['advfilter'].insert_text(i+1, item.name + '   ')
     self.widgets['filter']['advfilter'].show_all()
     self.widgets['filter']['advfilter'].set_active(0)
@@ -955,7 +964,7 @@
     self.widgets['preferences']['medium_name'].get_model().clear()
     self.widgets['preferences']['media'].get_model().clear()
     self.widgets['add']['media'].get_model().clear()
-    
+
     self.media_ids = {}
 
     self.media_ids[0] = None
@@ -986,9 +995,9 @@
     self.widgets['preferences']['vcodec_name'].get_model().clear()
     self.widgets['preferences']['vcodec'].get_model().clear()
     self.widgets['add']['vcodec'].get_model().clear()
-    
+
     self.vcodecs_ids = {}
-    
+
     self.vcodecs_ids[0] = None
     self.widgets['preferences']['vcodec_name'].insert_text(0, '')
     self.widgets['add']['vcodec'].insert_text(0, _('N/A'))
@@ -1002,7 +1011,7 @@
     self.widgets['preferences']['vcodec_name'].show_all()
     self.widgets['add']['vcodec'].show_all()
     self.widgets['preferences']['vcodec'].show_all()
-    
+
     pos = gutils.findKey(self.config.get('vcodec', 0, section='defaults'), self.vcodecs_ids)
     if pos is not None:
         self.widgets['preferences']['vcodec'].set_active(int(pos))

Modified: trunk/lib/widgets.py
===================================================================
--- trunk/lib/widgets.py	2009-12-15 21:22:04 UTC (rev 1333)
+++ trunk/lib/widgets.py	2009-12-20 21:46:11 UTC (rev 1334)
@@ -23,13 +23,12 @@
 # GNU General Public License, version 2 or later
 
 import gtk
-import sys
 import advfilter
 
 def define_widgets(self, gladefile):
     get = lambda x: gladefile.get_widget(x)
     self.widgets = {}
-    
+
     self.widgets['window'] = get('main_window')
     self.widgets['window'].connect('key_press_event', self.on_key_press_event)
     self.widgets['treeview'] = get('main_treeview')
@@ -39,8 +38,8 @@
     #buttons
     self.widgets['new_db'] = get('new_bt')
     self.widgets['toolbar'] = get('toolbar1')
-    
 
+
     self.widgets['movie'] = {#{{{
         'cast'                   : get('m_cast'),
         'classification'         : get('m_classification'),
@@ -150,9 +149,9 @@
     self.widgets['add']['o_title'].connect('activate', self.on_enter)
     self.widgets['add']['title'].connect('activate', self.on_enter)
     self.widgets['add']['window'].set_transient_for(self.widgets['window'])
-    
+
     #}}}
-    
+
     self.widgets['advfilter'] = {#{{{
         'window'           : get('w_advfilter'),
         'advfilter_vbox'   : get('advfilter_rules_vbox'),
@@ -292,7 +291,7 @@
     self.widgets['print_cover']['window_simple'].set_transient_for(self.widgets['window'])
     self.widgets['print_cover']['window_image'].set_transient_for(self.widgets['window'])
     #}}}
-    
+
     self.widgets['people'] = {#{{{
         'window':    get('w_people'),
         'treeview':    get('p_treeview'),
@@ -300,7 +299,7 @@
     self.widgets['people']['window'].connect('delete_event', self.on_delete_event_wp)
     self.widgets['people']['window'].set_transient_for(self.widgets['window'])
     #}}}
-    
+
     self.widgets['person'] = {#{{{
         # TODO: merge these two windows
         'window'   : get('w_add_person'),
@@ -325,10 +324,11 @@
         'collection' : get('f_col'),
         'advfilter'  : get('f_advfilter'),
     }#}}}
-    
+
     self.widgets['menu'] = {#{{{
         'fullscreen'      : get('menu_fullscreen'),
         'toolbar'         : get('menu_toolbar'),
+        'ext_toolbar'     : get('menu_ext_toolbar'),
         'export'          : get('export_menu'),
         'import'          : get('import_menu'),
         'not_seen_movies' : get('seen_movies'),
@@ -338,7 +338,7 @@
         'email'           : get('return1'),
         'return'          : get('e-mail_reminder1'),
     }#}}}
-    
+
     self.widgets['popups'] = {#{{{
         'main'   : get('popup'),
         'loan'   : get('popup_loan'),
@@ -347,9 +347,10 @@
     }#}}}
     self.widgets['extensions'] = {
         'toolbar': get('ext_toolbar'),
+        'toolbar_hb': get('ext_toolbar_hb'),
         'preferences_vbox': get('p_extensions_vbox'),
     }
-    
+
     self.widgets['w_loan_to']     = get('w_loan_to')
     self.widgets['w_loan_to'].connect('delete_event', self.on_delete_event_lt)
 
@@ -429,6 +430,7 @@
         'on_combo_source_changed'                : self.source_changed,
         # toolbar
         'on_view_toolbar_activate'               : self.toggle_toolbar,
+        'on_view_ext_toolbar_activate'           : self.toggle_ext_toolbar,
         'on_go_first_clicked'                    : self.go_first,
         'on_go_last_clicked'                     : self.go_last,
         'on_go_back_clicked'                     : self.go_prev,



From mikej06 at mail.berlios.de  Mon Dec 21 22:14:30 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 21 Dec 2009 22:14:30 +0100
Subject: [Griffith-svn] r1335 - in trunk: . lib/plugins/movie
Message-ID: <200912212114.nBLLEUac017559@sheep.berlios.de>

Author: mikej06
Date: 2009-12-21 22:14:17 +0100 (Mon, 21 Dec 2009)
New Revision: 1335

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieKinoDe.py
Log:
updated movie plugin Kino.de

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-20 21:46:11 UTC (rev 1334)
+++ trunk/ChangeLog	2009-12-21 21:14:17 UTC (rev 1335)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-21  Michael Jahn
+	* updated movie plugin Kino.de
+
 2009-12-20  Piotr O?arowski
 	* Add "Extensions toolbar" menu item
 

Modified: trunk/lib/plugins/movie/PluginMovieKinoDe.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieKinoDe.py	2009-12-20 21:46:11 UTC (rev 1334)
+++ trunk/lib/plugins/movie/PluginMovieKinoDe.py	2009-12-21 21:14:17 UTC (rev 1335)
@@ -26,179 +26,239 @@
 import string
 import re
 
-plugin_name = "Kino.de"
-plugin_description = "KINO.DE"
-plugin_url = "www.kino.de"
-plugin_language = _("German")
-plugin_author = "Michael Jahn"
+plugin_name         = "Kino.de"
+plugin_description  = "KINO.DE"
+plugin_url          = "www.kino.de"
+plugin_language     = _("German")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.13"
+plugin_version      = "1.14"
 
 class Plugin(movie.Movie):
-    url_to_use = "http://www.kino.de/kinofilm/"
-    url_type = "K"
+    url_to_use_base = 'http://www.kino.de/'
+    url_to_use      = url_to_use_base + 'kinofilm/'
+    url_type        = 'K'
 
     def __init__(self, id):
         self.encode='iso-8859-1'
         elements = string.split(id, "_")
         self.movie_id = elements[1]
         if (elements[0] == "V"):
-            self.url_to_use = "http://www.kino.de/videofilm/"
-            self.url_type = "V"
+            self.url_to_use_base = 'http://www.video.de/'
+            self.url_to_use      = self.url_to_use_base + 'videofilm/'
+            self.url_type        = 'V'
         else:
-            self.url_to_use = "http://www.kino.de/kinofilm/"
-            self.url_type = "K"
+            self.url_to_use_base = 'http://www.kino.de/'
+            self.url_to_use      = self.url_to_use_base + 'kinofilm/'
+            self.url_type        = 'K'
         self.url = self.url_to_use + str(self.movie_id)
 
     def initialize(self):
-        self.tmp_page = gutils.before(self.page, '<!-- PRINT-CONTENT-ENDE-->')
-        self.url = self.url_to_use + string.replace(str(self.movie_id), '/', '/credits/')
-        self.open_page(self.parent_window)
-        self.tmp_creditspage = gutils.before(self.page, '<!-- PRINT-CONTENT-ENDE-->')
-        self.url = self.url_to_use + string.replace(str(self.movie_id), "/", "/features/")
-        self.open_page(self.parent_window)
-        self.tmp_dvdfeaturespage = gutils.before(self.page, '<!-- PRINT-CONTENT-ENDE-->')
+        if self.url_type == 'K':
+            url = self.url_to_use + string.replace(str(self.movie_id), '/', '/credits/')
+            self.creditspage = self.open_page(self.parent_window, url=url)
+        else:
+            self.creditspage = ''
 
     def get_image(self):
         self.image_url = ''
-        tmpdata = gutils.regextrim(self.tmp_page, '(PRINT[-]CONTENT[-]START|<td class="content">)', '(Dieser Film wurde |>FOTOSHOW<|>KRITIK<)')
-        tmpdatasplit = re.split('src="http://.+/flbilder', tmpdata)
-        if len(tmpdatasplit) > 2:
-            tmpdata = gutils.before(tmpdatasplit[2], '.jpg')
-            if tmpdata <> '':
-                self.image_url = 'http://images.kino.de/flbilder' + tmpdata + '.jpg'
-        elif len(tmpdatasplit) > 1:
-            tmpdata = gutils.before(tmpdatasplit[1], '.jpg')
-            if tmpdata <> '':
-                self.image_url = 'http://images.kino.de/flbilder' + tmpdata + '.jpg'
+        tmpdata = gutils.regextrim(self.page, '<div class="cover-area">', '</div>')
+        if tmpdata:
+            # video page
+            tmpdata = re.search('(http[:][/][/][^/]+[/]flbilder[/][^"]+)', tmpdata)
+            if tmpdata:
+                self.image_url = tmpdata.group(1)
+        else:
+            # kino page
+            tmpdata = gutils.before(self.page, '<span style="line-height: 15px;">')
+            if tmpdata:
+                tmpparts = re.split('http://images.kino.de/s/', tmpdata)
+                if len(tmpparts) > 2:
+                    self.image_url = 'http://images.kino.de/s/' + gutils.before(tmpparts[2], '"')
+                elif len(tmpparts) > 1:
+                    self.image_url = 'http://images.kino.de/s/' + gutils.before(tmpparts[1], '"')
 
     def get_o_title(self):
-        self.o_title = gutils.trim(self.tmp_page, 'span class="standardsmall">(', ')<')
-        if self.o_title == '':
-            if self.url_type == 'V':
-                self.o_title = gutils.after(gutils.regextrim(self.tmp_page, 'headline2"[^>]*>[ \t\r\n]*<a href="/videofilm', '</a>'), '>')
-            else:
-                self.o_title = gutils.after(gutils.regextrim(self.tmp_page, 'headline2"[^>]*>[ \t\r\n]*<a href="/kinofilm', '</a>'), '>')
+        self.o_title = gutils.trim(self.page, '<p>Originaltitel: ', '</p>')
+        if not self.o_title:
+            self.o_title = gutils.trim(self.page, '<span class="standardsmall">(', ')')
+            if not self.o_title:
+                self.o_title = gutils.trim(self.page, '<div class="teaser">', '</')
+                if not self.o_title:
+                    self.o_title = gutils.regextrim(self.page, '<title>', '([|]|</title>)')
 
     def get_title(self):
-        if self.url_type == "V":
-            self.title = gutils.after(gutils.regextrim(self.tmp_page, 'headline2"[^>]*>[ \t\r\n]*<a href="/videofilm', '</a>'), '>')
-        else:
-            self.title = gutils.after(gutils.regextrim(self.tmp_page, 'headline2"[^>]*>[ \t\r\n]*<a href="/kinofilm', '</a>'), '>')
+        self.title = gutils.trim(self.page, '<div class="teaser">', '</')
+        if not self.title:
+            self.title = gutils.regextrim(self.page, '<title>', '([|]|</title>)')
 
     def get_director(self):
-        self.director = gutils.regextrim(self.tmp_creditspage, '>[ ]*Regie', '</a>')
-        self.director = gutils.after(self.director, '/star/')
-        self.director = gutils.after(self.director, '>')
+        self.director = gutils.trim(self.page, '<th>Regie:', '<th>')
+        if not self.director:
+            self.director = gutils.trim(self.creditspage, 'Regie&nbsp;', '</tr>')
 
     def get_plot(self):
-        # little steps to perfect plot (I hope ... it's a terrible structured content ... )
-        self.plot = gutils.before(self.tmp_page, '<!-- PRINT-CONTENT-ENDE-->')
-        self.plot = gutils.regextrim(self.plot, 'Kurzinfo', '</td></tr>[ \t\r\n]*<tr><td></td></tr>')
-        if self.plot != '':
-            lastpos = self.plot.rfind('</table>')
-            if lastpos == -1:
-                self.plot = ''
-            else:
-                self.plot = self.plot[lastpos:]
+        self.plot = gutils.trim(self.page, '<div class="yui-content">', '<div class="footer">')
+        if self.plot:
+            # video page
+            self.plot = re.sub('<script type="text/javascript">[^<]+</script>', '', self.plot)
+            self.plot = string.replace(self.plot, '>Gro?ansicht</a>', '>')
+            self.plot = string.replace(self.plot, '>Schlie?en</a>', '>')
+            self.plot = string.replace(self.plot, '>zur&uuml;ck </a>', '>')
+            self.plot = string.replace(self.plot, '>1</a>', '>')
+            self.plot = string.replace(self.plot, '> weiter</a>', '>')
+            self.plot = string.replace(self.plot, '</h4>', '\n')
+            self.plot = gutils.clean(self.plot)
+            compiledmultiline = re.compile(r'^[^(]+[(]Foto[:][^)]+[)][ ]*$', re.MULTILINE)
+            self.plot = compiledmultiline.sub('', self.plot)
+            compiledmultiline = re.compile(r"(^\s+$|^\s*//\s*$)", re.MULTILINE)
+            self.plot = compiledmultiline.sub('', self.plot)
+            compiledmultiline = re.compile("^[\n]+$", re.MULTILINE)
+            self.plot = compiledmultiline.sub("\n", self.plot)
         else:
-            self.plot = gutils.trim(self.tmp_page, '<span style="line-height:', '</spa')
-            if self.plot == '':
-                self.plot = gutils.trim(self.tmp_page,"Kurzinfo", "</td></tr><tr><td></td>")
-                if (self.plot == ''):
-                    self.plot = gutils.trim(self.tmp_page,"Kurzinfo", '<script ')
-                    self.plot = gutils.after(self.plot, '>')
-                while len(self.plot) and string.find(self.plot, '</A>') > -1:
-                    self.plot = gutils.after(self.plot, '</A>');
-                self.plot = gutils.after(gutils.after(self.plot, '</table>'), '>')
-            else:
-                self.plot = gutils.after(self.plot, '>')
+            # kino page
+            self.plot = gutils.trim(self.page, '<span style="line-height: 15px;">', '<table')
 
     def get_year(self):
         self.year = ''
-        tmp = gutils.regextrim(self.tmp_page, 'span class="standardsmall"[^>]*><strong>', '</span>')
-        if tmp <> None:
-            srchresult = re.search('[0-9][0-9][0-9][0-9]</strong>', tmp)
-            if srchresult <> None:
-                self.year = srchresult.string[srchresult.start():srchresult.end()]
+        tmp = gutils.trim(self.page, '<div class="description">', '</div>')
+        if tmp:
+            searchyearandcountry = re.search('([0-9]{4})<br', tmp)
+            if searchyearandcountry:
+                self.year = searchyearandcountry.group(1)
+        if not self.year:
+            tmp = gutils.trim(self.page, '<span class="standardsmall"><strong>', '<br')
+            if tmp:
+                tmp = gutils.trim(tmp, '<strong>', '</strong>')
+                if tmp:
+                    srchyear = re.search('([0-9]{4})', tmp)
+                    if srchyear:
+                        self.year = srchyear.group(1)
 
     def get_runtime(self):
         self.runtime = ''
-        srchresult = re.search('>[0-9]+[ \t]Min[.]<', self.tmp_page)
+        srchresult = re.search('Laufzeit: ([0-9]+)[ \t]Min[.]<', self.page)
         if srchresult <> None:
-            self.runtime = gutils.regextrim(srchresult.string[srchresult.start():srchresult.end()], '>', '[^0-9]')
+            self.runtime = srchresult.group(1)
+        if not self.runtime:
+            srchresult = re.search('>([0-9]+)[ \t]Min[.]<', self.page)
+            if srchresult <> None:
+                self.runtime = srchresult.group(1)
 
     def get_genre(self):
-        self.genre = gutils.regextrim(self.tmp_page,'span class="standardsmall"[^>]*>[ \t\r\n]*<strong>((DVD|VHS|Laser Disc|Video CD|Blue-ray Disc)</strong>[ \t]-[ \t]<strong>)*', '</strong>[ \t]-[ \t]<strong>')
+        self.genre = gutils.trim(self.page,'<p class="genre">', '</p>')
+        if not self.genre:
+            self.genre = gutils.trim(self.page, '<span class="standardsmall"><strong>', '</strong>')
 
     def get_cast(self):
-        self.cast = gutils.trim(self.tmp_creditspage,'>Cast<', '</table><br')
-        if len(self.cast):
-            if self.cast.find('>mehr<') > 0:
-                self.cast = gutils.after(self.cast, '>mehr<')
-            self.cast = gutils.after(self.cast, '>')
-            self.cast = re.sub('<tr[ ]+class="(dbtrefferlight|dbtrefferdark)">', "\n", self.cast)
-            self.cast = self.cast.replace('&nbsp;', '--flip--')
-            self.cast = gutils.clean(self.cast)
-            self.cast = re.sub("[\t]+", '', self.cast)
-            self.cast = re.sub("[\n]+", "\n", self.cast)
-            self.cast = re.sub("--flip--[\n]+", '--flip--', self.cast)
-            elements = self.cast.split("\n")
-            self.cast = ''
-            for element in elements:
-                elements2 = element.split('--flip--')
-                if len(elements2) > 1:
-                    if elements2[0] <> '':
-                        self.cast += elements2[1] + '--flip--' + elements2[0] + "\n"
+        self.cast = ''
+        tmp = gutils.trim(self.page, '<th>Darsteller:', '</table>')
+        if tmp:
+            tmpparts = string.split(tmp, '<a href="/star/')
+            for tmppart in tmpparts[1:]:
+                name = gutils.trim(tmppart, '>', '<')
+                role = gutils.trim(tmppart, '>als ', '<')
+                if name:
+                    if role:
+                        self.cast = self.cast + name + _(' as ') + role + '\n'
                     else:
-                        self.cast += elements2[1] + "\n"
-                else:
-                    self.cast += element + "\n"
-            self.cast = string.replace(self.cast, '--flip--', _(' as '))
+                        self.cast = self.cast + name + '\n'
+        if not self.cast:
+            tmp = gutils.trim(self.creditspage, '>Cast<br />', '>Crew<')
+            if tmp:
+                castparts = re.split('width="50%"><a href="/star/', tmp)
+                for index in range(1, len(castparts), 1):
+                    role = gutils.clean(gutils.trim(castparts[index - 1], 'width="50%">', '</td>'))
+                    name = gutils.clean(gutils.trim(castparts[index], '">', '<'))
+                    if role:
+                        self.cast = self.cast + name + _(' as ') + role + '\n'
+                    else:
+                        self.cast = self.cast + name + '\n'
 
     def get_classification(self):
-        self.classification = gutils.regextrim(self.tmp_page,'FSK:( |&nbsp;)+', '</strong>')
+        self.classification = gutils.regextrim(self.page,'FSK: ', '<')
 
     def get_studio(self):
-        self.studio = gutils.regextrim(self.tmp_page, '>[ ]*Verleih:( |&nbsp;)+', '( - |&nbsp;-&nbsp;)*</strong>')
-        if (self.studio == ""):
-            self.studio = gutils.regextrim(self.tmp_page, '>[ ]*Anbieter:( |&nbsp;)+', '( - |&nbsp;-&nbsp;)*</strong>')
+        self.studio = ''
+        tmp = gutils.trim(self.page, '<div class="description">', '</div>')
+        if tmp:
+            tmp = gutils.trim(tmp, 'Regie:', '</p>')
+            if tmp:
+                self.studio = gutils.after(tmp, '<br/>')
+        if not self.studio:
+            self.studio = gutils.trim(self.page, 'Verleih: ', '<')
 
     def get_o_site(self):
         self.o_site = ""
 
     def get_site(self):
-        self.site = self.url_to_use + self.movie_id;
+        self.site = self.url_to_use + self.movie_id
 
     def get_trailer(self):
-        self.trailer = ""
+        self.trailer = ''
+        trailerparts = re.split('href="/trailer-und-bilder/film', self.page)
+        if len(trailerparts) > 1:
+            for trailerpart in trailerparts[1:]:
+                trailermatch = re.search('Trailer[ ]*</p>', trailerpart)
+                if trailermatch:
+                    self.trailer = self.url_to_use_base + 'trailer-und-bilder/film' + gutils.before(trailerpart, '"')
+                    break
+        if not self.trailer and self.url_type == 'K':
+            self.trailer = self.url_to_use + string.replace(str(self.movie_id), '/', '/trailer/')
 
     def get_country(self):
-        self.country = gutils.regextrim(self.tmp_page, 'span class="standardsmall"[^>]*><strong>((DVD|VHS|Laser Disc|Video CD|Blue-ray Disc)</strong>[ \t]-[ \t]<strong>)*', '</span>')
-        if self.country <> None:
-            self.country = gutils.regextrim(self.country, '-[ \t]<strong>', '</strong>')
-            self.country = re.sub('[0-9]+$', '', self.country)
-        else:
-            self.country = ''
+        self.country = ''
+        tmp = gutils.trim(self.page, '<div class="description">', '</div>')
+        if tmp:
+            searchyearandcountry = re.search('([^>0-9]+)[0-9]{4}<br', tmp)
+            if searchyearandcountry:
+                self.country = searchyearandcountry.group(1)
+        if not self.country:
+            tmp = gutils.trim(self.page, '<span class="standardsmall"><strong>', '<br')
+            if tmp:
+                tmp = gutils.trim(tmp, '<strong>', '</strong>')
+                if tmp:
+                    self.country = gutils.before(tmp, ' ')
 
     def get_rating(self):
-        self.rating = "0"
+        self.rating = 0
+        tmp = gutils.trim(self.page, '<h4>Filmbewertung</h4>', '</script>')
+        if tmp:
+            matched = re.search('ratingBar.setValue[(]([0-9]+)[)]', tmp)
+            if matched:
+                try:
+                    self.rating = round(int(matched.group(1)) / 10.0, 0)
+                except:
+                    pass
 
     def get_notes(self):
         self.notes = ""
-        tmp_notes = string.replace(gutils.strip_tags(gutils.trim(self.tmp_dvdfeaturespage, "<b>Sprache</b>", "</td></tr>")), "&nbsp;", "")
+        tmp_notes = gutils.clean(gutils.trim(self.page, "<strong>Sprachen:</strong>", "</p>"))
         if tmp_notes != "":
             self.notes = self.notes + "Sprachen:\n" + tmp_notes + "\n\n"
-        tmp_notes = string.replace(gutils.strip_tags(gutils.trim(self.tmp_dvdfeaturespage, "<b>Untertitel</b>", "</td></tr>")), "&nbsp;", "")
+        tmp_notes = gutils.clean(gutils.trim(self.page, "<strong>Untertitel:</strong>", "</p>"))
         if tmp_notes != "":
             self.notes = self.notes + "Untertitel:\n" + tmp_notes + "\n\n"
-        tmp_notes = string.replace(gutils.strip_tags(gutils.trim(self.tmp_dvdfeaturespage, "<b>Mehrkanalton</b>", "</td></tr>")), "&nbsp;", "")
+        tmp_notes = gutils.clean(gutils.trim(self.page, "<strong>Tonformat:</strong>", "</p>"))
         if tmp_notes != "":
-            self.notes = self.notes + "Mehrkanalton:\n" + tmp_notes + "\n\n"
-        tmp_notes = string.replace(gutils.strip_tags(gutils.trim(self.tmp_dvdfeaturespage, "<b>EAN</b>", "</td></tr>")), "&nbsp;", "")
+            self.notes = self.notes + "Tonformat:\n" + tmp_notes + "\n\n"
+        tmp_notes = gutils.clean(gutils.trim(self.page, "<strong>Bildformat:</strong>", "</p>"))
         if tmp_notes != "":
+            self.notes = self.notes + "Bildformat:\n" + tmp_notes + "\n\n"
+        tmp_notes = gutils.clean(gutils.trim(self.page, "<strong>EAN</strong>", "</p>"))
+        if tmp_notes != "":
             self.notes = self.notes + "EAN:\n" + tmp_notes + "\n\n"
 
+    def get_screenplay(self):
+        self.screenplay = gutils.regextrim(self.page, '<th>Buch:', '<th>')
+        if not self.screenplay:
+            self.screenplay= gutils.trim(self.creditspage, 'Drehbuch&nbsp;', '</tr>')
+
+    def get_cameraman(self):
+        self.cameraman = gutils.regextrim(self.page, '<th>Kamera:', '<th>')
+        if not self.cameraman:
+            self.cameraman= gutils.trim(self.creditspage, 'Kamera&nbsp;', '</tr>')
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
@@ -209,43 +269,43 @@
 
     def search(self,parent_window):
         self.open_search(parent_window)
-        tmp_pagemovie = self.page
+        pagemovie = self.page
         #
         # try to get all result pages (not so nice, but it works)
         #
-        tmp_pagecount = gutils.clean(gutils.trim(tmp_pagemovie, '>von', '</a>'))
+        pagecount = gutils.clean(gutils.trim(pagemovie, '>von', '</a>'))
         try:
-            tmp_pagecountint = int(tmp_pagecount)
+            pagecountint = int(pagecount)
         except:
-            tmp_pagecountint = 1
-        tmp_pagecountintcurrent = 1
-        while (tmp_pagecountint > tmp_pagecountintcurrent and tmp_pagecountintcurrent < 5):
-            tmp_pagecountintcurrent = tmp_pagecountintcurrent + 1
-            self.url = 'http://www.kino.de/search.php?mode=megaSearch&searchCategory=film&page=' + str(tmp_pagecountintcurrent) + "&inputSearch="
+            pagecountint = 1
+        pagecountintcurrent = 1
+        while (pagecountint > pagecountintcurrent and pagecountintcurrent < 5):
+            pagecountintcurrent = pagecountintcurrent + 1
+            self.url = 'http://www.kino.de/search.php?mode=megaSearch&searchCategory=film&page=' + str(pagecountintcurrent) + "&inputSearch="
             self.open_search(parent_window)
-            tmp_pagemovie = tmp_pagemovie + self.page
+            pagemovie = pagemovie + self.page
         #
         # Look for DVD and VHS
         #
         self.url = "http://www.kino.de/search.php?mode=megaSearch&searchCategory=video&inputSearch="
         self.open_search(parent_window)
-        tmp_pagevideo = tmp_pagemovie + self.page
+        pagevideo = pagemovie + self.page
         #
         # try to get all result pages (not so nice, but it works)
         #
-        tmp_pagecount = gutils.clean(gutils.trim(self.page, '>von', '</a>'))
+        pagecount = gutils.clean(gutils.trim(self.page, '>von', '</a>'))
         try:
-            tmp_pagecountint = int(tmp_pagecount)
+            pagecountint = int(pagecount)
         except:
-            tmp_pagecountint = 1
-        tmp_pagecountintcurrent = 1
-        while (tmp_pagecountint > tmp_pagecountintcurrent and tmp_pagecountintcurrent < 5):
-            tmp_pagecountintcurrent = tmp_pagecountintcurrent + 1
-            self.url = "http://www.kino.de/search.php?mode=megaSearch&searchCategory=video&page=" + str(tmp_pagecountintcurrent) + "&inputSearch="
+            pagecountint = 1
+        pagecountintcurrent = 1
+        while (pagecountint > pagecountintcurrent and pagecountintcurrent < 5):
+            pagecountintcurrent = pagecountintcurrent + 1
+            self.url = "http://www.kino.de/search.php?mode=megaSearch&searchCategory=video&page=" + str(pagecountintcurrent) + "&inputSearch="
             self.open_search(parent_window)
-            tmp_pagevideo = tmp_pagevideo + self.page
+            pagevideo = pagevideo + self.page
 
-        self.page = tmp_pagevideo
+        self.page = pagevideo
         return self.page
 
     def get_searches(self):
@@ -323,12 +383,14 @@
             'studio'              : 'Fox',
             'o_site'              : False,
             'site'                : 'http://www.kino.de/kinofilm/rocky-balboa/96132.html',
-            'trailer'             : False,
+            'trailer'             : 'http://www.kino.de/kinofilm/rocky-balboa/trailer/96132.html',
             'year'                : 2006,
             'notes'               : False,
             'runtime'             : 102,
             'image'               : True,
-            'rating'              : False
+            'rating'              : False,
+            'cameraman'           : 'J. Clark Mathis',
+            'screenplay'          : 'Sylvester Stallone'
         },
         'K_ein-glueckliches-jahr/28675.html' : { 
             'title'               : 'Ein gl?ckliches Jahr',
@@ -345,12 +407,14 @@
             'studio'              : 'Columbia TriStar',
             'o_site'              : False,
             'site'                : 'http://www.kino.de/kinofilm/ein-glueckliches-jahr/28675.html',
-            'trailer'             : False,
+            'trailer'             : 'http://www.kino.de/kinofilm/ein-glueckliches-jahr/trailer/28675.html',
             'year'                : 1973,
             'notes'               : False,
             'runtime'             : 115,
             'image'               : False,
-            'rating'              : False
+            'rating'              : False,
+            'cameraman'           : 'Jean Collomb',
+            'screenplay'          : 'Claude Lelouch'
         },
         'V_ein-glueckliches-jahr-dvd/85546.html' : { 
             'title'               : 'Ein gl?ckliches Jahr',
@@ -363,26 +427,28 @@
 Andr? Falcon',
             'country'             : 'Frankreich/Italien',
             'genre'               : 'Drama',
-            'classification'      : 'Freigegeben ab 12 Jahren',
-            'studio'              : 'Black Hill Pictures',
+            'classification'      : 'ab 12 Jahren',
+            'studio'              : 'Warner Home Video',
             'o_site'              : False,
-            'site'                : 'http://www.kino.de/videofilm/ein-glueckliches-jahr-dvd/85546.html',
+            'site'                : 'http://www.video.de/videofilm/ein-glueckliches-jahr-dvd/85546.html',
             'trailer'             : False,
             'year'                : 1973,
             'notes'               : 'Sprachen:\n\
 Deutsch DD 2.0, Franz?sisch DD 2.0\n\
 \n\
-Mehrkanalton:\n\
+Tonformat:\n\
 Dolby Digital 2.0\n\
 \n\
-EAN:\n\
-7321921998843',
+Bildformat:\n\
+1:1,33/4:3',
             'runtime'             : 110,
             'image'               : True,
-            'rating'              : False
+            'rating'              : False,
+            'cameraman'           : 'Jean Collomb',
+            'screenplay'          : 'Claude Lelouch'
         },
         'V_arahan-vanilla-dvd/90405.html' : { 
-            'title'               : 'Arahan (Vanilla-DVD)',
+            'title'               : 'Arahan',
             'o_title'             : 'Arahan jangpung dae jakjeon',
             'director'            : 'Ryoo Seung-wan',
             'plot'                : True,
@@ -392,23 +458,25 @@
 Jung Doo-hong' + _(' as ') + 'Heuk-woon\n\
 Yun Ju-sang' + _(' as ') + 'Mu-woon',
             'country'             : 'S?dkorea',
-            'genre'               : 'Action/Kom?die',
-            'classification'      : 'Freigegeben ab 16 Jahren',
-            'studio'              : 'Splendid',
+            'genre'               : 'Action/ Kom?die',
+            'classification'      : 'ab 16 Jahren',
+            'studio'              : 'WVG Medien',
             'o_site'              : False,
-            'site'                : 'http://www.kino.de/videofilm/arahan-vanilla-dvd/90405.html',
+            'site'                : 'http://www.video.de/videofilm/arahan-vanilla-dvd/90405.html',
             'trailer'             : False,
             'year'                : 2004,
             'notes'               : 'Sprachen:\n\
 Deutsch DD 5.1\n\
 \n\
-Mehrkanalton:\n\
+Tonformat:\n\
 Dolby Digital 5.1\n\
 \n\
-EAN:\n\
-4013549871105',
+Bildformat:\n\
+1:1,78/16:9',
             'runtime'             : 108,
             'image'               : True,
-            'rating'              : False
+            'rating'              : False,
+            'cameraman'           : 'Lee Jun-gyu',
+            'screenplay'          : 'Ryoo Seung-wan'
         }
     }



From mikej06 at mail.berlios.de  Mon Dec 21 22:29:20 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 21 Dec 2009 22:29:20 +0100
Subject: [Griffith-svn] r1336 - in trunk: . lib/plugins/movie
Message-ID: <200912212129.nBLLTKh8019036@sheep.berlios.de>

Author: mikej06
Date: 2009-12-21 22:29:11 +0100 (Mon, 21 Dec 2009)
New Revision: 1336

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieCinematografo.py
Log:
updated movie plugin Cinematografo

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-21 21:14:17 UTC (rev 1335)
+++ trunk/ChangeLog	2009-12-21 21:29:11 UTC (rev 1336)
@@ -6,7 +6,7 @@
 
 
 2009-12-21  Michael Jahn
-	* updated movie plugin Kino.de
+	* updated movie plugin Kino.de, Cinematografo
 
 2009-12-20  Piotr O?arowski
 	* Add "Extensions toolbar" menu item

Modified: trunk/lib/plugins/movie/PluginMovieCinematografo.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-21 21:14:17 UTC (rev 1335)
+++ trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-21 21:29:11 UTC (rev 1336)
@@ -35,7 +35,7 @@
     def __init__(self, id):
         self.encode   = 'iso-8859-1'
         self.movie_id = id
-        self.url      = "http://www.cinematografo.it/bancadati/consultazione/schedafilm.jsp?completa=si&codice=%s" % str(self.movie_id)
+        self.url      = "http://www.cinematografo.it/bancadati/consultazione/schedafilm_2009.jsp?completa=si&codice=%s" % str(self.movie_id)
 
     def get_image(self):
         # Find the film's poster image
@@ -214,7 +214,7 @@
             'classification'    : False,
             'studio'            : 'Minervafilm - Mfd Home Video',
             'o_site'            : False,
-            'site'              : 'http://www.cinematografo.it/bancadati/consultazione/schedafilm.jsp?completa=si&codice=3996',
+            'site'              : 'http://www.cinematografo.it/bancadati/consultazione/schedafilm_2009.jsp?completa=si&codice=3996',
             'trailer'           : False,
             'year'              : 1951,
             'notes'             : False,



From piotrek at mail.berlios.de  Tue Dec 22 20:25:33 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Tue, 22 Dec 2009 20:25:33 +0100
Subject: [Griffith-svn] r1337 - trunk/lib/plugins/extensions
Message-ID: <200912221925.nBMJPXP8029266@sheep.berlios.de>

Author: piotrek
Date: 2009-12-22 20:25:32 +0100 (Tue, 22 Dec 2009)
New Revision: 1337

Modified:
   trunk/lib/plugins/extensions/ge_player.py
Log:
replace %s with {1}


Modified: trunk/lib/plugins/extensions/ge_player.py
===================================================================
--- trunk/lib/plugins/extensions/ge_player.py	2009-12-21 21:29:11 UTC (rev 1336)
+++ trunk/lib/plugins/extensions/ge_player.py	2009-12-22 19:25:32 UTC (rev 1337)
@@ -29,6 +29,7 @@
 
 log = logging.getLogger('Griffith')
 
+
 class GriffithExtension(Base):
     name = 'Player'
     description = _('Plays movie trailer')
@@ -39,8 +40,8 @@
     enabled = False # disabled by default
 
     preferences = {'command': {'name': _('Command'),
-                               'hint': _('%s (if given) will be replaced with file path'),
-                               'default': 'mplayer %s',
+                               'hint': _('{1} (if given) will be replaced with file path'),
+                               'default': 'mplayer {1}',
                                'type': unicode}}
     if is_windows_system():
         preferences['command']['default'] = ''
@@ -57,8 +58,8 @@
             win32api.ShellExecute(0, None, movie.trailer, None, None, 0)
             return
 
-        if '%s' in command:
-            command %= movie.trailer
+        if '{1}' in command:
+            command = command.replace('{1}', movie.trailer)
         else:
             command = "%s %s" % (command, movie.trailer)
         Popen(command, shell=True)



From piotrek at mail.berlios.de  Tue Dec 22 20:37:43 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Tue, 22 Dec 2009 20:37:43 +0100
Subject: [Griffith-svn] r1338 - in trunk: . lib lib/db
Message-ID: <200912221937.nBMJbhbR030672@sheep.berlios.de>

Author: piotrek
Date: 2009-12-22 20:37:40 +0100 (Tue, 22 Dec 2009)
New Revision: 1338

Modified:
   trunk/griffith
   trunk/lib/config.py
   trunk/lib/db/__init__.py
   trunk/lib/db/_movie.py
   trunk/lib/db/_objects.py
   trunk/lib/db/tables.py
   trunk/lib/initialize.py
   trunk/lib/sql.py
Log:
pep8ify few files


Modified: trunk/griffith
===================================================================
--- trunk/griffith	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/griffith	2009-12-22 19:37:40 UTC (rev 1338)
@@ -3,7 +3,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2008 Vasco Nunes, Piotr O?arowski
+# Copyright ? 2005-2009 Vasco Nunes, Piotr O?arowski
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by

Modified: trunk/lib/config.py
===================================================================
--- trunk/lib/config.py	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/lib/config.py	2009-12-22 19:37:40 UTC (rev 1338)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2009 Vasco Nunes, Piotr O?arowski
+# Copyright ? 2005-2009 Vasco Nunes, Piotr O?arowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -26,9 +26,11 @@
 import logging
 log = logging.getLogger("Griffith")
 
+
 class Config(object):
     subst = {'True': True, 'False': False, 'None': None}
-    def __init__ (self, file):
+
+    def __init__(self, file):
         self._file = file
         if not self.load():
             self.make_defaults()
@@ -55,10 +57,10 @@
         self._cfg.set(section, option, value)
 
     def has_key(self, key, section='main'):
-        return self._cfg.has_option(section,key)
+        return self._cfg.has_option(section, key)
 
     def __setitem__(self, k, v):
-        self.set(k,v, section='main')
+        self.set(k, v, section='main')
 
     def __getitem__(self, key):
         return self.get('main', key)
@@ -67,14 +69,17 @@
         return self._cfg.remove_option(section, option)
 
     def keys(self, section='main'):
-        return [ i[0] for i in self._cfg.items(section) ]
+        return [i[0] for i in self._cfg.items(section)]
+
     def values(self, section='main'):
-        return [ i[1] for i in self._cfg.items(section) ]
+        return [i[1] for i in self._cfg.items(section)]
+
     def items(self, section='main'):
         return self._cfg.items(section)
+
     def to_dict(self, section='main'):
         d = {}
-        for i,j in self._cfg.items(section):
+        for i, j in self._cfg.items(section):
             d[i] = j
         return d
 
@@ -131,7 +136,7 @@
             return True
         else:
             return False
-            
+
     def make_defaults(self):
         self._cfg = ConfigParser.SafeConfigParser()
         self._cfg.read(self._file)

Modified: trunk/lib/db/__init__.py
===================================================================
--- trunk/lib/db/__init__.py	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/lib/db/__init__.py	2009-12-22 19:37:40 UTC (rev 1338)
@@ -43,24 +43,23 @@
     'movies': relation(Movie, backref='ratio')})
 mapper(VCodec, tables.vcodecs, properties={
     'movies': relation(Movie, backref='vcodec')})
-mapper(Person, tables.people, properties = {
+mapper(Person, tables.people, properties={
     'loans': relation(Loan, backref='person', cascade='all, delete-orphan'),
     'loaned_movies_count': column_property(select(
         [func.count(tables.loans.c.loan_id)],
         and_(tables.people.c.person_id == tables.loans.c.person_id,
-             tables.loans.c.return_date == None
-        )).label('loaned_movies_count'), deferred=True),
+             tables.loans.c.return_date == None))\
+        .label('loaned_movies_count'), deferred=True),
     'returned_movies_count': column_property(select( # AKA loan history
         [func.count(tables.loans.c.loan_id)],
         and_(tables.people.c.person_id == tables.loans.c.person_id,
-             tables.loans.c.return_date != None
-        )).label('returned_movies_count'), deferred=True)
-    })
-mapper(MovieLang, tables.movie_lang, primary_key=[tables.movie_lang.c.ml_id], properties = {
-    'movie'    : relation(Movie),
-    'language' : relation(Lang),
-    'achannel' : relation(AChannel),
-    'acodec'   : relation(ACodec),
+             tables.loans.c.return_date != None))\
+        .label('returned_movies_count'), deferred=True)})
+mapper(MovieLang, tables.movie_lang, primary_key=[tables.movie_lang.c.ml_id], properties={
+    'movie': relation(Movie),
+    'language': relation(Lang),
+    'achannel': relation(AChannel),
+    'acodec': relation(ACodec),
     'subformat': relation(SubFormat)})
 mapper(ACodec, tables.acodecs, properties={
     'movielangs': relation(MovieLang)})
@@ -72,19 +71,17 @@
     'movielangs': relation(MovieLang)})
 mapper(MovieTag, tables.movie_tag)
 mapper(Tag, tables.tags, properties={'movietags': relation(MovieTag, backref='tag')})
-mapper(Loan, tables.loans, properties = {
-    'volume'    : relation(Volume),
+mapper(Loan, tables.loans, properties={
+    'volume': relation(Volume),
     'collection': relation(Collection)})
-mapper(Movie, tables.movies, order_by=tables.movies.c.number , properties = {
-    'loans'     : relation(Loan, backref='movie', cascade='all, delete-orphan'),
-    #'tags'      : relation(Tag, cascade='all, delete-orphan', secondary=movie_tag,
-    'tags'      : relation(Tag, secondary=tables.movie_tag,
-                           primaryjoin=tables.movies.c.movie_id==tables.movie_tag.c.movie_id,
-                           secondaryjoin=tables.movie_tag.c.tag_id==tables.tags.c.tag_id),
-    'languages' : relation(MovieLang, cascade='all, delete-orphan')})
+mapper(Movie, tables.movies, order_by=tables.movies.c.number, properties={
+    'loans': relation(Loan, backref='movie', cascade='all, delete-orphan'),
+    #'tags': relation(Tag, cascade='all, delete-orphan', secondary=movie_tag,
+    'tags': relation(Tag, secondary=tables.movie_tag,
+                     primaryjoin=tables.movies.c.movie_id == tables.movie_tag.c.movie_id,
+                     secondaryjoin=tables.movie_tag.c.tag_id == tables.tags.c.tag_id),
+    'languages': relation(MovieLang, cascade='all, delete-orphan')})
 mapper(Poster, tables.posters, properties={
     'movies': relation(Movie),
-    'data'  : deferred(tables.posters.c.data)
-    })
+    'data': deferred(tables.posters.c.data)})
 mapper(Filter, tables.filters)
-

Modified: trunk/lib/db/_movie.py
===================================================================
--- trunk/lib/db/_movie.py	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/lib/db/_movie.py	2009-12-22 19:37:40 UTC (rev 1338)
@@ -60,6 +60,7 @@
         res_alias_res[alias.upper()] = res
 del aliases, alias, res
 
+
 class Movie(object):
 
     def _set_resolution(self, res_string):
@@ -93,8 +94,8 @@
         return "<Movie:%s (number=%s)>" % (self.movie_id, self.number)
 
     def __contains__(self, name):
-        if name in ('volume','collection','medium','vcodec','loans','tags',\
-                    'languages','lectors','dubbings','subtitles','resolution'):
+        if name in ('volume', 'collection', 'medium', 'vcodec', 'loans', 'tags',\
+                    'languages', 'lectors', 'dubbings', 'subtitles', 'resolution'):
             return True
         else:
             return name in tables.movies.columns
@@ -103,31 +104,32 @@
         if hasattr(self, name):
             return getattr(self, name)
         else:
-            raise AttributeError, name
+            raise AttributeError(name)
 
     def _get_loan_history(self):
-        where = [tables.loans.c.movie_id==self.movie_id]
+        where = [tables.loans.c.movie_id == self.movie_id]
         if self.collection_id is not None:
-            where.append(tables.loans.c.collection_id==self.collection_id)
+            where.append(tables.loans.c.collection_id == self.collection_id)
         if self.volume_id is not None:
-            where.append(tables.loans.c.volume_id==self.volume_id)
-        return object_session(self).query(Loan).filter(and_(tables.loans.c.return_date!=None, or_(*where))).all()
+            where.append(tables.loans.c.volume_id == self.volume_id)
+        return object_session(self).query(Loan).filter(\
+                and_(tables.loans.c.return_date != None, or_(*where))).all()
     loan_history = property(_get_loan_history, doc='list of already returned loans')
 
     def _get_loan_details(self):
-        where = [tables.loans.c.movie_id==self.movie_id]
+        where = [tables.loans.c.movie_id == self.movie_id]
         if self.collection_id is not None:
-            where.append(tables.loans.c.collection_id==self.collection_id)
+            where.append(tables.loans.c.collection_id == self.collection_id)
         if self.volume_id is not None:
-            where.append(tables.loans.c.volume_id==self.volume_id)
-        return object_session(self).query(Loan).filter(and_(tables.loans.c.return_date==None, or_(*where))).first()
+            where.append(tables.loans.c.volume_id == self.volume_id)
+        return object_session(self).query(Loan).filter(and_(tables.loans.c.return_date == None, or_(*where))).first()
     loan_details = property(_get_loan_details, doc='current loan details or None')
 
     def loan_to(self, person, whole_collection=False):
         """
         Loans movie, all other movies from the same volume and optionally
         movie's collection.
-        
+
         :param person: Person instance or person_id.
         :param whole_collection=False: if True, will loan all movies from the same
             collection.
@@ -166,4 +168,3 @@
         session.add(loan)
 
         return True
-

Modified: trunk/lib/db/_objects.py
===================================================================
--- trunk/lib/db/_objects.py	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/lib/db/_objects.py	2009-12-22 19:37:40 UTC (rev 1338)
@@ -35,13 +35,16 @@
 
 EMAIL_PATTERN = re.compile('^[a-z0-9]+[.a-z0-9_+-]*@[a-z0-9_-]+(\.[a-z0-9_-]+)+$', re.IGNORECASE)
 
+
 class DBTable(object):
+
     def __init__(self, **kwargs):
         for i in kwargs:
             if hasattr(self, i):
                 setattr(self, i, kwargs[i])
             else:
                 log.warn("%s.%s not set", self.__class__.__name__, i)
+
     def __repr__(self):
         return "<%s:%s>" % (self.__class__.__name__, self.name.encode('utf-8'))
 
@@ -52,20 +55,48 @@
             raise ValueError(_("Name cannot be empty"))
         return name.strip()
 
-class AChannel(DBTable): pass
-class ACodec(DBTable): pass
-class Lang(DBTable): pass
-class Medium(DBTable): pass
-class Ratio(DBTable): pass
-class SubFormat(DBTable): pass
-class Tag(DBTable): pass
-class VCodec(DBTable): pass
-class Filter(DBTable): pass
 
+class AChannel(DBTable):
+    pass
+
+
+class ACodec(DBTable):
+    pass
+
+
+class Lang(DBTable):
+    pass
+
+
+class Medium(DBTable):
+    pass
+
+
+class Ratio(DBTable):
+    pass
+
+
+class SubFormat(DBTable):
+    pass
+
+
+class Tag(DBTable):
+    pass
+
+
+class VCodec(DBTable):
+    pass
+
+
+class Filter(DBTable):
+    pass
+
+
 class Collection(DBTable):
+
     def _set_loaned_flag(self, flag):
         """Sets loaned flag in current collection and all associated movies.
-       
+
         :param flag: if True and there are loaned movies in the collection
             already, exception will be raised (whole collection cannot be
             loaned if one of the movies is not available).
@@ -77,14 +108,14 @@
 
         if flag: # loaning whole collection
             loaned_movies = session.execute(select([tables.movies.columns.movie_id])\
-                    .where(and_(tables.movies.columns.collection_id==self.collection_id,\
-                        tables.movies.columns.loaned==True))).fetchall()
+                    .where(and_(tables.movies.columns.collection_id == self.collection_id,\
+                        tables.movies.columns.loaned == True))).fetchall()
             if loaned_movies:
                 log.error('cannot loan it, collection contains loaned movie(s): %s', loaned_movies)
                 raise Exception('loaned movies in the collection already')
 
         self._loaned = flag
-        update_query = update(tables.movies, tables.movies.columns.collection_id==self.collection_id)
+        update_query = update(tables.movies, tables.movies.columns.collection_id == self.collection_id)
         session.execute(update_query, params={'loaned': flag})
 
     def _is_loaned(self):
@@ -92,7 +123,9 @@
 
     loaned = property(_is_loaned, _set_loaned_flag)
 
+
 class Volume(DBTable):
+
     def _set_loaned_flag(self, flag):
         """Sets loaned flag in current volume and all associated movies.
 
@@ -103,7 +136,7 @@
         session = object_session(self)
 
         self._loaned = flag
-        update_query = update(tables.movies, tables.movies.columns.volume_id==self.volume_id)
+        update_query = update(tables.movies, tables.movies.columns.volume_id == self.volume_id)
         session.execute(update_query, params={'loaned': flag})
 
     def _is_loaned(self):
@@ -111,16 +144,16 @@
 
     loaned = property(_is_loaned, _set_loaned_flag)
 
+
 class Loan(object):
+
     def __repr__(self):
         return "<Loan:%s (person:%s, movie_id:%s, volume_id:%s, collection_id:%s )>" % \
                 (self.loan_id, self.person_id, self.movie_id, self.volume_id, self.collection_id)
-    
+
     def returned_on(self, date=None):
         """
         Marks the loan as returned and clears loaned flag in related movies.
-        
-        :param date=None: return date; accepted types: datetime, YYYYMMDD string or None
         """
 
         if date is None:
@@ -132,7 +165,7 @@
             return True
 
         session = object_session(self)
-       
+
         if self.collection_id:
             self.collection.loaned = False # will update the loaned flag in all associated movies as well
         if self.volume_id:
@@ -141,7 +174,9 @@
             self.movie.loaned = False
         self.return_date = date
 
+
 class Person(DBTable):
+
     @validates('email')
     def _validate_email(self, key, address):
         address = address.strip()
@@ -157,7 +192,9 @@
         delchars = allchars.translate(allchars, string.digits)
         return unicode(str(value).translate(allchars, delchars))
 
+
 class Poster(object):
+
     @validates('md5sum')
     def _check_md5sum_length(self, key, value):
         if len(value) != 32:
@@ -172,11 +209,15 @@
     def __repr__(self):
         return "<Poster:%s>" % self.md5sum
 
+
 class Configuration(object):
+
     def __repr__(self):
         return "<Config:%s=%s>" % (self.param, self.value)
 
+
 class MovieLang(object):
+
     def __init__(self, lang_id=None, type=None, acodec_id=None, achannel_id=None, subformat_id=None):
         self.lang_id = lang_id
         self.type = type
@@ -188,7 +229,9 @@
         return "<MovieLang:%s-%s (Type:%s ACodec:%s AChannel:%s SubFormat:%s)>" % \
             (self.movie_id, self.lang_id, self.type, self.acodec_id, self.achannel_id, self.subformat_id)
 
+
 class MovieTag(object):
+
     def __init__(self, tag_id=None):
         self.tag_id = tag_id
 

Modified: trunk/lib/db/tables.py
===================================================================
--- trunk/lib/db/tables.py	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/lib/db/tables.py	2009-12-22 19:37:40 UTC (rev 1338)
@@ -100,7 +100,7 @@
 
 loans = Table('loans', metadata,
     Column('loan_id', Integer, primary_key=True),
-    Column('person_id',  ForeignKey(people.c.person_id), nullable=False),
+    Column('person_id', ForeignKey(people.c.person_id), nullable=False),
     Column('movie_id', ForeignKey(movies.c.movie_id), nullable=False),
     Column('volume_id', ForeignKey(volumes.c.volume_id)),
     Column('collection_id', ForeignKey(collections.c.collection_id)),

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/lib/initialize.py	2009-12-22 19:37:40 UTC (rev 1338)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2009 Vasco Nunes, Piotr O?arowski
+# Copyright ? 2005-2009 Vasco Nunes, Piotr O?arowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -22,9 +22,8 @@
 # GNU General Public License, version 2 or later
 
 import gettext
-import gobject
-import gutils
 import logging
+import math
 import os
 import platform
 import re
@@ -32,9 +31,11 @@
 from glob import glob
 from locale import getdefaultlocale
 
+import gobject
 import gtk
 
 import db
+import gutils
 
 try:
     import gtkspell
@@ -44,26 +45,27 @@
 
 log = logging.getLogger("Griffith")
 
+
 def locations(self, home_dir):
     defaultLang, defaultEnc = getdefaultlocale()
     if defaultEnc is None:
         defaultEnc = 'UTF-8'
     locations = {}
     locations['exec'] = os.path.abspath(os.path.dirname(sys.argv[0])) # deprecated
-    locations['lib']  = os.path.dirname(__file__)
+    locations['lib'] = os.path.dirname(__file__)
     locations['home'] = home_dir
 
     if os.name == 'nt' or os.name.startswith('win'): # win32, win64
         import winshell
         from win32com.shell import shellcon, shell
 
-        locations['movie_plugins']  = "%s\\lib\\plugins\\movie" % locations['exec']
+        locations['movie_plugins'] = "%s\\lib\\plugins\\movie" % locations['exec']
         locations['export_plugins'] = "%s\\lib\\plugins\\export" % locations['exec']
-        locations['images']         = "%s\\images" % locations['exec']
-        locations['share']          = locations['images']
-        locations['glade']          = "%s\\glade\\" % locations['exec']
-        locations['desktop']        = ''
-        locations['i18n']           = "%s\\i18n" % locations['exec']
+        locations['images'] = "%s\\images" % locations['exec']
+        locations['share'] = locations['images']
+        locations['glade'] = "%s\\glade\\" % locations['exec']
+        locations['desktop'] = ''
+        locations['i18n'] = "%s\\i18n" % locations['exec']
         os.environ['PATH'] += ";lib;"
 
         # windows hack for locale setting
@@ -77,13 +79,13 @@
     elif os.name == 'posix':
         locations['share'] = os.path.abspath(os.path.join(locations['lib'], '..'))
         locations['glade'] = os.path.join(locations['share'], 'glade')
-        locations['i18n']  = os.path.abspath(os.path.join(locations['share'], '..', 'locale'))
+        locations['i18n'] = os.path.abspath(os.path.join(locations['share'], '..', 'locale'))
         if not os.path.isdir(locations['i18n']):
             locations['i18n'] = os.path.join(locations['share'], 'i18n')
         #some locations
-        locations['movie_plugins']  = os.path.join(locations['lib'], 'plugins', 'movie')
+        locations['movie_plugins'] = os.path.join(locations['lib'], 'plugins', 'movie')
         locations['export_plugins'] = os.path.join(locations['lib'], 'plugins', 'export')
-        locations['images']  = os.path.join(locations['share'], 'images')
+        locations['images'] = os.path.join(locations['share'], 'images')
         locations['desktop'] = os.path.join(os.path.expanduser('~'), 'Desktop').decode(defaultEnc)
     else:
         print 'Operating system not supported'
@@ -119,6 +121,7 @@
     self.locations = locations
     return locations
 
+
 def gui(self):
     self._ = None
 
@@ -138,6 +141,7 @@
 
     self.pdf_reader = self.config.get('pdf_reader')
 
+
 def i18n(self, location):
     gettext.bindtextdomain('griffith', location)
     gettext.textdomain('griffith')
@@ -145,6 +149,7 @@
     gtk.glade.textdomain('griffith')
     gettext.install('griffith', location, unicode=1)
 
+
 def toolbar(self):
     """if toolbar is hide in config lets hide the widget"""
     if not self.config.get('view_toolbar', True, section='window'):
@@ -160,80 +165,81 @@
         self.widgets['extensions']['toolbar_hb'].show()
         self.widgets['menu']['ext_toolbar'].set_active(True)
 
+
 def treeview(self):
     self.treemodel = gtk.TreeStore(str, gtk.gdk.Pixbuf, str, str, str, str, bool, str, str)
     self.widgets['treeview'].set_model(self.treemodel)
     self.widgets['treeview'].set_headers_visible(True)
     # number column
-    renderer=gtk.CellRendererText()
-    self.number_column=gtk.TreeViewColumn(_('N.'), renderer, text=0)
+    renderer = gtk.CellRendererText()
+    self.number_column = gtk.TreeViewColumn(_('N.'), renderer, text=0)
     self.number_column.set_resizable(True)
     self.number_column.set_sort_column_id(0)
     self.number_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.number_column)
     # pic column
-    renderer=gtk.CellRendererPixbuf()
-    self.image_column=gtk.TreeViewColumn(_('Image'), renderer, pixbuf=1)
+    renderer = gtk.CellRendererPixbuf()
+    self.image_column = gtk.TreeViewColumn(_('Image'), renderer, pixbuf=1)
     self.image_column.set_resizable(False)
     self.image_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.image_column)
     # original title column
-    renderer=gtk.CellRendererText()
-    self.otitle_column=gtk.TreeViewColumn(_('Original Title'), renderer, text=2)
+    renderer = gtk.CellRendererText()
+    self.otitle_column = gtk.TreeViewColumn(_('Original Title'), renderer, text=2)
     self.otitle_column.set_resizable(True)
     self.otitle_column.set_sort_column_id(2)
     self.otitle_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.otitle_column)
     # title column
-    renderer=gtk.CellRendererText()
-    self.title_column=gtk.TreeViewColumn(_('Title'), renderer, text=3)
+    renderer = gtk.CellRendererText()
+    self.title_column = gtk.TreeViewColumn(_('Title'), renderer, text=3)
     self.title_column.set_resizable(True)
     self.title_column.set_sort_column_id(3)
     self.title_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.title_column)
     # director column
-    renderer=gtk.CellRendererText()
-    self.director_column=gtk.TreeViewColumn(_('Director'), renderer, text=4)
+    renderer = gtk.CellRendererText()
+    self.director_column = gtk.TreeViewColumn(_('Director'), renderer, text=4)
     self.director_column.set_sort_column_id(4)
     self.director_column.set_resizable(True)
     self.director_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.director_column)
     # genre column
-    renderer=gtk.CellRendererText()
-    self.genre_column=gtk.TreeViewColumn(_('Genre'), renderer, text=5)
+    renderer = gtk.CellRendererText()
+    self.genre_column = gtk.TreeViewColumn(_('Genre'), renderer, text=5)
     self.genre_column.set_sort_column_id(5)
     self.genre_column.set_resizable(True)
     self.genre_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.genre_column)
     # seen column
-    renderer=gtk.CellRendererToggle()
-    self.seen_column=gtk.TreeViewColumn(_('Seen it'), renderer, active=6)
+    renderer = gtk.CellRendererToggle()
+    self.seen_column = gtk.TreeViewColumn(_('Seen it'), renderer, active=6)
     self.seen_column.set_sort_column_id(6)
     self.seen_column.set_resizable(True)
     self.seen_column.set_reorderable(True)
     self.widgets['treeview'].insert_column(self.seen_column, 1)
     # year column
-    renderer=gtk.CellRendererText()
+    renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 0.5)
-    self.year_column=gtk.TreeViewColumn(_('Year'), renderer, text=7)
+    self.year_column = gtk.TreeViewColumn(_('Year'), renderer, text=7)
     self.year_column.set_sort_column_id(7)
     self.year_column.set_resizable(True)
     self.year_column.set_alignment(0.5)
     self.year_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.year_column)
     # runtime column
-    renderer=gtk.CellRendererText()
+    renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 1)
-    self.runtime_column=gtk.TreeViewColumn(_('Runtime'), renderer, text=8)
+    self.runtime_column = gtk.TreeViewColumn(_('Runtime'), renderer, text=8)
     self.runtime_column.set_sort_column_id(8)
     self.runtime_column.set_resizable(True)
     self.runtime_column.set_alignment(1)
     self.runtime_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.runtime_column)
     # rating column
-    renderer=gtk.CellRendererText()
+    renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 0.5)
-    self.rating_column=gtk.TreeViewColumn(_('Rating'), renderer, text=9)
+    self.rating_column = gtk.TreeViewColumn(_('Rating'), renderer, text=9)
     self.rating_column.set_sort_column_id(9)
     self.rating_column.set_resizable(True)
     self.rating_column.set_alignment(0.5)
@@ -279,27 +285,29 @@
     self.total = self.db.session.query(db.Movie).count()
     self.widgets['treeview'].show()
 
+
 def loans_treeview(self):
     self.loans_treemodel = gtk.TreeStore(str, str, str) # move to self.widgets
     self.widgets['movie']['loan_history'].set_model(self.loans_treemodel)
     self.widgets['movie']['loan_history'].set_headers_visible(True)
     # loan date
-    renderer=gtk.CellRendererText()
-    self.date_column=gtk.TreeViewColumn(_('Loan Date'), renderer, text=0)
+    renderer = gtk.CellRendererText()
+    self.date_column = gtk.TreeViewColumn(_('Loan Date'), renderer, text=0)
     self.date_column.set_resizable(True)
     self.widgets['movie']['loan_history'].append_column(self.date_column)
     self.date_column.set_sort_column_id(0)
     # return date
-    renderer=gtk.CellRendererText()
-    self.return_column=gtk.TreeViewColumn(_('Return Date'), renderer, text=1)
+    renderer = gtk.CellRendererText()
+    self.return_column = gtk.TreeViewColumn(_('Return Date'), renderer, text=1)
     self.return_column.set_resizable(True)
     self.widgets['movie']['loan_history'].append_column(self.return_column)
     # loan to
-    renderer=gtk.CellRendererText()
-    self.loaner_column=gtk.TreeViewColumn(_('Loaned To'), renderer, text=2)
+    renderer = gtk.CellRendererText()
+    self.loaner_column = gtk.TreeViewColumn(_('Loaned To'), renderer, text=2)
     self.loaner_column.set_resizable(True)
     self.widgets['movie']['loan_history'].append_column(self.loaner_column)
 
+
 def lang_treeview(self):
     treeview = self.widgets['add']['lang_treeview']
     self.lang['model'] = gtk.TreeStore(str, str, str, str, str)
@@ -315,7 +323,7 @@
     combo.set_property('editable', True)
     combo.set_property('has-entry', False)
     combo.connect('edited', self.on_tv_lang_combo_edited, 0)
-    column=gtk.TreeViewColumn(_('Language'), combo, text=0)
+    column = gtk.TreeViewColumn(_('Language'), combo, text=0)
     column.set_property('min-width', 80)
     column.set_property('resizable', True)
     column.set_sort_column_id(0)
@@ -337,7 +345,7 @@
     combo.set_property('editable', True)
     combo.set_property('has-entry', False)
     combo.connect('edited', self.on_tv_lang_combo_edited, 1)
-    column=gtk.TreeViewColumn(_('Type'), combo, text=1)
+    column = gtk.TreeViewColumn(_('Type'), combo, text=1)
     column.set_property('min-width', 80)
     column.set_property('resizable', True)
     column.set_sort_column_id(1)
@@ -352,7 +360,7 @@
     combo.set_property('editable', True)
     combo.set_property('has-entry', False)
     combo.connect('edited', self.on_tv_lang_combo_edited, 2)
-    column=gtk.TreeViewColumn(_('Codec'), combo, text=2)
+    column = gtk.TreeViewColumn(_('Codec'), combo, text=2)
     column.set_property('min-width', 80)
     column.set_property('resizable', True)
     column.set_sort_column_id(2)
@@ -367,7 +375,7 @@
     combo.set_property('editable', True)
     combo.set_property('has-entry', False)
     combo.connect('edited', self.on_tv_lang_combo_edited, 3)
-    column=gtk.TreeViewColumn(_('Channels'), combo, text=3)
+    column = gtk.TreeViewColumn(_('Channels'), combo, text=3)
     column.set_property('min-width', 80)
     column.set_property('resizable', True)
     column.set_sort_column_id(3)
@@ -382,7 +390,7 @@
     combo.set_property('editable', True)
     combo.set_property('has-entry', False)
     combo.connect('edited', self.on_tv_lang_combo_edited, 4)
-    column=gtk.TreeViewColumn(_('Subtitle format'), combo, text=4)
+    column = gtk.TreeViewColumn(_('Subtitle format'), combo, text=4)
     column.set_property('min-width', 80)
     column.set_property('resizable', True)
     column.set_sort_column_id(4)
@@ -390,6 +398,7 @@
 
     treeview.show_all()
 
+
 def movie_plugins(self):
     """
     dinamically finds the movie source information plugins
@@ -401,8 +410,8 @@
     mcounter = 0
     default_plugin = self.config.get('default_movie_plugin')
     for p in self.plugins:
-        plugin_module = os.path.basename(p).replace('.py','')
-        plugin_name = plugin_module.replace('PluginMovie','')
+        plugin_module = os.path.basename(p).replace('.py', '')
+        plugin_name = plugin_module.replace('PluginMovie', '')
         self.widgets['add']['source'].append_text(plugin_name)
         self.widgets['preferences']['default_plugin'].append_text(plugin_name)
         if plugin_name == default_plugin:
@@ -410,6 +419,7 @@
             self.widgets['add']['source'].set_active(mcounter)
         mcounter = mcounter + 1
 
+
 def export_plugins(self):
     """
     dinamically finds the available export plugins
@@ -426,15 +436,16 @@
         menu_items.connect('activate', self.on_export_activate, plugin_name)
         menu_items.show()
 
+
 def import_plugins(self):
     """
     dinamically finds the available import plugins
     and fills the import menu entry
     """
 
-    import plugins.imp, math
+    import plugins.imp
 
-    fields_to_import = ( 'number','title', 'o_title', 'director', 'year', 'runtime', 'country',
+    fields_to_import = ('number', 'title', 'o_title', 'director', 'year', 'runtime', 'country',
         'seen', 'rating', 'genre', 'studio', 'plot', 'cast', 'notes', 'classification',
         'site', 'o_site', 'trailer', 'medium_id', 'media_num', 'vcodec_id', 'color', 'cond',
         'layers', 'region', 'collection_id', 'volume_id', 'image', 'ratio_id', 'screenplay',
@@ -445,21 +456,21 @@
     get = lambda x: glade_file.get_widget(x)
 
     w = self.widgets['import'] = {
-        'window'    : get('dialog_import'),
-        'pwindow'    : get('dialog_progress'),
-        'pabort'    : get('p_abortbutton'),
-        'fcw'        : get('fcw'),
-        'plugin'    : get('combo_plugin'),
-        'author'    : get('l_author'),
-        'email'        : get('l_email'),
-        'version'    : get('l_version'),
-        'description'    : get('l_description'),
-        'box_import_1'    : get('box_import_1'),
-        'box_import_2'    : get('box_import_2'),
-        'box_import_3'    : get('box_import_3'),
-        'progress'    : get('l_progress'),
-        'progressbar'    : get('progressbar'),
-        'fields'    : {},
+        'window': get('dialog_import'),
+        'pwindow': get('dialog_progress'),
+        'pabort': get('p_abortbutton'),
+        'fcw': get('fcw'),
+        'plugin': get('combo_plugin'),
+        'author': get('l_author'),
+        'email': get('l_email'),
+        'version': get('l_version'),
+        'description': get('l_description'),
+        'box_import_1': get('box_import_1'),
+        'box_import_2': get('box_import_2'),
+        'box_import_3': get('box_import_3'),
+        'progress': get('l_progress'),
+        'progressbar': get('progressbar'),
+        'fields': {},
     }
     get('cancel_button').connect('clicked', plugins.imp.on_abort_button_clicked, self)
     get('import_button').connect('clicked', plugins.imp.on_import_button_clicked, self)
@@ -473,14 +484,14 @@
 
     # fields to import
     j = 0
-    k = math.ceil( len(self.field_names) / float(3) )
+    k = math.ceil(len(self.field_names) / float(3))
     for i in fields_to_import:
         j = j + 1
         w['fields'][i] = gtk.CheckButton(self.field_names[i])
         w['fields'][i].set_active(True) # TODO: get from config
         if j <= k:
             w['box_import_1'].add(w['fields'][i])
-        elif j<= 2*k:
+        elif j <= 2 * k:
             w['box_import_2'].add(w['fields'][i])
         else:
             w['box_import_3'].add(w['fields'][i])
@@ -488,6 +499,7 @@
     w['box_import_2'].show_all()
     w['box_import_3'].show_all()
 
+
 def extension(self, module, enabled):
     if enabled:
         try:
@@ -515,6 +527,7 @@
 
     return ext
 
+
 def extension_preferences(self, module, enabled):
     # preferences window
     p_vbox = self.widgets['extensions']['preferences_vbox']
@@ -567,9 +580,9 @@
                 count = count + 1
             # combobox with complex binding to a model needs cell renderer
             w = gtk.ComboBox(model=model)
-            renderer=gtk.CellRendererText()
+            renderer = gtk.CellRendererText()
             w.pack_start(renderer)
-            w.add_attribute(renderer, 'text', 1);
+            w.add_attribute(renderer, 'text', 1)
             if pos is not None:
                 w.set_active(int(pos))
         else:
@@ -590,6 +603,7 @@
 
     return configwidgets
 
+
 def extensions(self):
     import plugins.extensions
     user_extensions_path = os.path.join(self.locations['home'], 'lib', 'extensions')
@@ -610,22 +624,23 @@
         if ext:
             self.extensions.append(ext)
 
+
 def people_treeview(self, create=True):
     row = None
     self.p_treemodel = gtk.TreeStore(gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING)
     self.widgets['preferences']['treeview'].set_model(self.p_treemodel)
     self.widgets['preferences']['treeview'].set_headers_visible(True)
 
-    if create==True:
+    if create is True:
         # name column
-        renderer=gtk.CellRendererText()
-        column=gtk.TreeViewColumn(_('Name'), renderer, text=0)
+        renderer = gtk.CellRendererText()
+        column = gtk.TreeViewColumn(_('Name'), renderer, text=0)
         column.set_resizable(True)
         column.set_sort_column_id(0)
         self.widgets['preferences']['treeview'].append_column(column)
         # email column
-        renderer=gtk.CellRendererText()
-        column=gtk.TreeViewColumn(_('E-mail'),renderer, text=1)
+        renderer = gtk.CellRendererText()
+        column = gtk.TreeViewColumn(_('E-mail'), renderer, text=1)
         column.set_resizable(True)
         column.set_sort_column_id(1)
         self.widgets['preferences']['treeview'].append_column(column)
@@ -637,6 +652,7 @@
         self.p_treemodel.set_value(myiter, 1, i.email)
     self.widgets['preferences']['treeview'].show()
 
+
 def combos(self):
     i = 0
     for cond in self._conditions:
@@ -678,6 +694,7 @@
     self.widgets['preferences']['sortby'].set_wrap_width(3)
     self.widgets['preferences']['sortby'].set_active(0) # Number
 
+
 def dictionaries(self):
     """initializes data filled dynamically by users"""
     self.am_tags = {} # dictionary for tag CheckBoxes
@@ -702,42 +719,42 @@
         'o_title', 'title', 'number', 'director', 'plot', 'cast', 'notes', 'year',
         'runtime', 'country', 'genre', 'studio', 'media_num', 'rating')
     self.field_names = {
-        'barcode'        : _('Barcode'),
-        'cast'           : _('Cast'),
-        'cameraman'      : _('Cameraman'),
-        'classification' : _('Classification'),
-        'collection_id'  : _('Collection'),
-        'color'          : _('Color'),
-        'cond'           : _('Condition'),
-        'country'        : _('Country'),
-        'director'       : _('Director'),
-        'genre'          : _('Genre'),
-        'image'          : _('Image'),
-        'layers'         : _('Layers'),
-        'loaned'         : _('Loaned'),
-        'media_num'      : _('Discs'),
-        'medium_id'      : _('Medium'),
-        'notes'          : _('Notes'),
-        'number'         : _('Number'),
-        'o_site'         : _('Official site'),
-        'o_title'        : _('Original Title'),
-        'plot'           : _('Plot'),
-        'poster'         : _('Poster'),
-        'ratio_id'       : _('Aspect ratio'),
-        'rating'         : _('Rating'),
-        'region'         : _('Region'),
-        'runtime'        : _('Runtime'),
-        'screenplay'     : _('Screenplay'),
-        'seen'           : _('Seen it'),
-        'site'           : _('Site'),
-        'studio'         : _('Studio'),
-        'tags'           : _('Tags'),
-        'title'          : _('Title'),
-        'trailer'        : _('Trailer'),
-        'vcodec_id'      : _('Video codec'),
-        'volume_id'      : _('Volume'),
-        'year'           : _('Year')}
-    self._conditions = (_('N/A'), _('Damaged'), _('Poor'),  _('Fair'), _('Good'), _('Excellent'))
+        'barcode': _('Barcode'),
+        'cast': _('Cast'),
+        'cameraman': _('Cameraman'),
+        'classification': _('Classification'),
+        'collection_id': _('Collection'),
+        'color': _('Color'),
+        'cond': _('Condition'),
+        'country': _('Country'),
+        'director': _('Director'),
+        'genre': _('Genre'),
+        'image': _('Image'),
+        'layers': _('Layers'),
+        'loaned': _('Loaned'),
+        'media_num': _('Discs'),
+        'medium_id': _('Medium'),
+        'notes': _('Notes'),
+        'number': _('Number'),
+        'o_site': _('Official site'),
+        'o_title': _('Original Title'),
+        'plot': _('Plot'),
+        'poster': _('Poster'),
+        'ratio_id': _('Aspect ratio'),
+        'rating': _('Rating'),
+        'region': _('Region'),
+        'runtime': _('Runtime'),
+        'screenplay': _('Screenplay'),
+        'seen': _('Seen it'),
+        'site': _('Site'),
+        'studio': _('Studio'),
+        'tags': _('Tags'),
+        'title': _('Title'),
+        'trailer': _('Trailer'),
+        'vcodec_id': _('Video codec'),
+        'volume_id': _('Volume'),
+        'year': _('Year')}
+    self._conditions = (_('N/A'), _('Damaged'), _('Poor'), _('Fair'), _('Good'), _('Excellent'))
     self._colors = (_('N/A'), _('Color'), _('Black and White'), _('Mixed'))
     self._lang_types = ('', _('lector'), _('dubbing'), _('subtitles'), _('commentary'))
     self._layers = (_('N/A'), _('Single Side, Single Layer'), _('Single Side, Dual Layer'), _('Dual Side, Single Layer'), _('Dual Side, Dual Layer'))
@@ -753,6 +770,7 @@
         _('Region 8 (Airlines/Cruise Ships)'),
     )
 
+
 def web_results(self):
     self.treemodel_results = gtk.TreeStore(str, str)
     self.widgets['results']['treeview'].set_model(self.treemodel_results)
@@ -769,6 +787,7 @@
     column2.set_sort_column_id(1)
     self.widgets['results']['treeview'].append_column(column2)
 
+
 def spellcheck(self):
     global spell_support
     spell_error = False
@@ -779,7 +798,7 @@
                     self.notes_spell = gtkspell.Spell(self.widgets['add']['cast'], self.config.get('lang', section='spell'))
                 except:
                     spell_error = True
-            if self.config.get('plot', True, section='spell')==True and self.config.get('lang', section='spell') != '':
+            if self.config.get('plot', True, section='spell') is True and self.config.get('lang', section='spell') != '':
                 try:
                     self.plot_spell = gtkspell.Spell(self.widgets['add']['plot'], self.config.get('lang', section='spell'))
                 except:
@@ -788,18 +807,19 @@
                 log.info('Dictionary not available. Spellcheck will be disabled.')
                 if not self.config.get('notified', False, section='spell'):
                     gutils.info(_("Dictionary not available. Spellcheck will be disabled. \n" + \
-                        "Please install the aspell-%s package or adjust the spellchekcer preferences.")%self.config.get('lang', section='spell'), \
+                        "Please install the aspell-%s package or adjust the spellchekcer preferences.") % self.config.get('lang', section='spell'), \
                         self.widgets['preferences']['window'])
                     self.config.set('notified', True, section='spell')
                     self.config.save()
     else:
         log.info('Spellchecker is not available')
 
+
 def preferences(self):
-    self.widgets['preferences']['db_type'].insert_text(0,'SQLite3 (internal)')
-    self.widgets['preferences']['db_type'].insert_text(1,'PostgreSQL')
-    self.widgets['preferences']['db_type'].insert_text(2,'MySQL')
-    self.widgets['preferences']['db_type'].insert_text(3,'Microsoft SQL')
+    self.widgets['preferences']['db_type'].insert_text(0, 'SQLite3 (internal)')
+    self.widgets['preferences']['db_type'].insert_text(1, 'PostgreSQL')
+    self.widgets['preferences']['db_type'].insert_text(2, 'MySQL')
+    self.widgets['preferences']['db_type'].insert_text(3, 'Microsoft SQL')
     self.widgets['preferences']['db_host'].set_text(self.config.get('host', '', section='database'))
     self.widgets['preferences']['db_port'].set_value(int(self.config.get('port', 0, section='database')))
     self.widgets['preferences']['db_user'].set_text(self.config.get('user', '', section='database'))
@@ -826,18 +846,21 @@
     completion.set_model(treemodel)
     completion.set_text_column(0)
 
+
 def update_volume_combo_ids(self):
     self.volume_combo_ids = {}
     self.volume_combo_ids[0] = 0
     for i, item in enumerate(self.db.session.query(db.Volume.volume_id).all()):
-        self.volume_combo_ids[i+1] = item.volume_id
+        self.volume_combo_ids[i + 1] = item.volume_id
 
+
 def update_collection_combo_ids(self):
     self.collection_combo_ids = {}
     self.collection_combo_ids[0] = 0
     for i, item in enumerate(self.db.session.query(db.Collection.collection_id).all()):
-        self.collection_combo_ids[i+1] = item.collection_id
+        self.collection_combo_ids[i + 1] = item.collection_id
 
+
 def fill_volumes_combo(self, default=0):
     _tmp = self.initialized
     self.initialized = False # don't refresh main treeview
@@ -856,6 +879,7 @@
     self.widgets['add']['volume'].set_wrap_width(3)
     self.initialized = _tmp
 
+
 def fill_collections_combo(self, default=0):
     _tmp = self.initialized
     self.initialized = False # don't refresh main treeview
@@ -879,6 +903,7 @@
     self.widgets['add']['collection'].set_wrap_width(2)
     self.initialized = _tmp
 
+
 def fill_advfilter_combo(self):
     _tmp = self.initialized
     self.initialized = False # don't refresh main treeview
@@ -886,11 +911,12 @@
     self.widgets['filter']['advfilter'].insert_text(0, '') # empty one
     for i, item in enumerate(self.db.session.query(db.Filter.name).all()):
         # add some white spaces to prevent scrollbar hides parts of the names
-        self.widgets['filter']['advfilter'].insert_text(i+1, item.name + '   ')
+        self.widgets['filter']['advfilter'].insert_text(i + 1, item.name + '   ')
     self.widgets['filter']['advfilter'].show_all()
     self.widgets['filter']['advfilter'].set_active(0)
     self.initialized = _tmp
 
+
 def fill_preferences_tags_combo(self):
     _tmp = self.initialized
     self.initialized = False # don't refresh main treeview
@@ -903,6 +929,7 @@
     self.widgets['preferences']['tag_name'].set_active(0)
     self.initialized = _tmp
 
+
 def language_combos(self):
     self.widgets['preferences']['lang_name'].get_model().clear()
     self.languages_ids = {}
@@ -911,12 +938,13 @@
     self.widgets['preferences']['lang_name'].insert_text(0, '')
     for i, lang in enumerate(self.db.session.query(db.Lang.lang_id, db.Lang.name).all()):
         self.languages_ids[i] = lang.lang_id
-        self.widgets['preferences']['lang_name'].insert_text(i+1, lang.name)
+        self.widgets['preferences']['lang_name'].insert_text(i + 1, lang.name)
         # add movie languages treeview
         self.lang['lang'].append([lang.lang_id, lang.name])
     self.widgets['preferences']['lang_name'].show_all()
     self.widgets['preferences']['lang_name'].set_active(0)
 
+
 def acodec_combos(self):
     self.widgets['preferences']['acodec_name'].get_model().clear()
     self.acodecs_ids = {}
@@ -925,12 +953,13 @@
     self.widgets['preferences']['acodec_name'].insert_text(0, '')
     for i, acodec in enumerate(self.db.session.query(db.ACodec.acodec_id, db.ACodec.name).all()):
         self.acodecs_ids[i] = acodec.acodec_id
-        self.widgets['preferences']['acodec_name'].insert_text(i+1, acodec.name)
+        self.widgets['preferences']['acodec_name'].insert_text(i + 1, acodec.name)
         # add movie languages treeview
         self.lang['acodec'].append([acodec.acodec_id, acodec.name])
     self.widgets['preferences']['acodec_name'].show_all()
     self.widgets['preferences']['acodec_name'].set_active(0)
 
+
 def achannel_combos(self):
     self.widgets['preferences']['achannel_name'].get_model().clear()
     self.achannels_ids = {}
@@ -939,12 +968,13 @@
     self.widgets['preferences']['achannel_name'].insert_text(0, '')
     for i, achannel in enumerate(self.db.session.query(db.AChannel.achannel_id, db.AChannel.name).all()):
         self.achannels_ids[i] = achannel.achannel_id
-        self.widgets['preferences']['achannel_name'].insert_text(i+1, achannel.name)
+        self.widgets['preferences']['achannel_name'].insert_text(i + 1, achannel.name)
         # add movie languages treeview
         self.lang['achannel'].append([achannel.achannel_id, achannel.name])
     self.widgets['preferences']['achannel_name'].show_all()
     self.widgets['preferences']['achannel_name'].set_active(0)
 
+
 def subformat_combos(self):
     self.widgets['preferences']['subformat_name'].get_model().clear()
     self.subformats_ids = {}
@@ -953,12 +983,13 @@
     self.widgets['preferences']['subformat_name'].insert_text(0, '')
     for i, subformat in enumerate(self.db.session.query(db.SubFormat.subformat_id, db.SubFormat.name).all()):
         self.subformats_ids[i] = subformat.subformat_id
-        self.widgets['preferences']['subformat_name'].insert_text(i+1, subformat.name)
+        self.widgets['preferences']['subformat_name'].insert_text(i + 1, subformat.name)
         # add movie languages treeview
         self.lang['subformat'].append([subformat.subformat_id, subformat.name])
     self.widgets['preferences']['subformat_name'].show_all()
     self.widgets['preferences']['subformat_name'].set_active(0)
 
+
 def media_combos(self):
     # clear data
     self.widgets['preferences']['medium_name'].get_model().clear()
@@ -972,10 +1003,10 @@
     self.widgets['add']['media'].insert_text(0, _('N/A'))
     self.widgets['preferences']['media'].insert_text(0, _('N/A'))
     for i, medium in enumerate(self.db.session.query(db.Medium.medium_id, db.Medium.name).all()):
-        self.media_ids[i+1] = medium.medium_id
-        self.widgets['preferences']['medium_name'].insert_text(i+1, medium.name)
-        self.widgets['add']['media'].insert_text(i+1, medium.name)
-        self.widgets['preferences']['media'].insert_text(i+1, medium.name)
+        self.media_ids[i + 1] = medium.medium_id
+        self.widgets['preferences']['medium_name'].insert_text(i + 1, medium.name)
+        self.widgets['add']['media'].insert_text(i + 1, medium.name)
+        self.widgets['preferences']['media'].insert_text(i + 1, medium.name)
 
     self.widgets['preferences']['medium_name'].show_all()
     self.widgets['add']['media'].show_all()
@@ -990,6 +1021,7 @@
         self.widgets['preferences']['media'].set_active(0)
     self.widgets['preferences']['medium_name'].set_active(0)
 
+
 def vcodec_combos(self):
     # clear data
     self.widgets['preferences']['vcodec_name'].get_model().clear()
@@ -1003,10 +1035,10 @@
     self.widgets['add']['vcodec'].insert_text(0, _('N/A'))
     self.widgets['preferences']['vcodec'].insert_text(0, _('N/A'))
     for i, vcodec in enumerate(self.db.session.query(db.VCodec.vcodec_id, db.VCodec.name).all()):
-        self.vcodecs_ids[i+1] = vcodec.vcodec_id
-        self.widgets['preferences']['vcodec_name'].insert_text(i+1, vcodec.name)
-        self.widgets['add']['vcodec'].insert_text(i+1, vcodec.name)
-        self.widgets['preferences']['vcodec'].insert_text(i+1, vcodec.name)
+        self.vcodecs_ids[i + 1] = vcodec.vcodec_id
+        self.widgets['preferences']['vcodec_name'].insert_text(i + 1, vcodec.name)
+        self.widgets['add']['vcodec'].insert_text(i + 1, vcodec.name)
+        self.widgets['preferences']['vcodec'].insert_text(i + 1, vcodec.name)
 
     self.widgets['preferences']['vcodec_name'].show_all()
     self.widgets['add']['vcodec'].show_all()
@@ -1019,6 +1051,7 @@
         self.widgets['preferences']['vcodec'].set_active(0)
     self.widgets['preferences']['vcodec_name'].set_active(0)
 
+
 def create_tag_vbox(self, widget, tab):
     for i in widget.get_children():
         i.destroy()
@@ -1030,6 +1063,7 @@
         widget.pack_start(tab[i])
     widget.show_all()
 
+
 def remove_hbox(self, widget, tab):
     number = len(widget.get_children())-1    # last box number
     try:
@@ -1038,4 +1072,3 @@
     except:
         log.info('List is empty')
     widget.show_all()
-

Modified: trunk/lib/sql.py
===================================================================
--- trunk/lib/sql.py	2009-12-22 19:25:32 UTC (rev 1337)
+++ trunk/lib/sql.py	2009-12-22 19:37:40 UTC (rev 1338)
@@ -3,7 +3,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2009 Vasco Nunes, Piotr O?arowski
+# Copyright ? 2005-2009 Vasco Nunes, Piotr O?arowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -144,15 +144,16 @@
         except:
             log.exception('')
 
+
 def update_whereclause(query, cond): # {{{
     if cond['loaned'] is True:
-        query = query.where(db.Movie.loaned==True)
+        query = query.where(db.Movie.loaned == True)
     if cond['loaned'] is False:
-        query = query.where(db.Movie.loaned==False)
+        query = query.where(db.Movie.loaned == False)
     if cond['seen'] is True:
-        query = query.where(db.Movie.seen==True)
+        query = query.where(db.Movie.seen == True)
     if cond['seen'] is False:
-        query = query.where(db.Movie.seen==False)
+        query = query.where(db.Movie.seen == False)
 
     if cond["collections"]:
         query = query.where(db.Movie.collection_id.in_(cond["collections"]))
@@ -167,68 +168,74 @@
     loaned_to = []
     for per_id in cond["loaned_to"]:
         loaned_to.append(exists([db.tables.loans.c.movie_id],\
-                and_(db.Movie.movie_id==db.tables.loans.c.movie_id, db.tables.loans.c.person_id==per_id, db.tables.loans.c.return_date==None)))
+                and_(db.Movie.movie_id == db.tables.loans.c.movie_id,
+                     db.tables.loans.c.person_id == per_id,
+                     db.tables.loans.c.return_date == None)))
     if loaned_to:
         query = query.where(or_(*loaned_to))
 
     loan_history = []
     for per_id in cond["loan_history"]:
         loan_history.append(exists([db.tables.loans.c.movie_id],\
-                and_(db.Movie.movie_id==db.tables.loans.c.movie_id, db.tables.loans.c.person_id==per_id)))
+                and_(db.Movie.movie_id == db.tables.loans.c.movie_id,
+                     db.tables.loans.c.person_id == per_id)))
     if loan_history:
         query = query.where(or_(*loan_history))
 
     required_tags = []
     for tag_id in cond["required_tags"]:
         required_tags.append(exists([db.MovieTag.movie_id], \
-            and_(db.Movie.movie_id==db.MovieTag.movie_id, db.MovieTag.tag_id==tag_id)))
+            and_(db.Movie.movie_id == db.MovieTag.movie_id,
+                 db.MovieTag.tag_id == tag_id)))
     if required_tags:
         query = query.where(and_(*required_tags))
 
     tags = []
     for tag_id in cond["tags"]:
         tags.append(exists([db.MovieTag.movie_id], \
-            and_(db.Movie.movie_id==db.MovieTag.movie_id, db.MovieTag.tag_id==tag_id)))
+            and_(db.Movie.movie_id == db.MovieTag.movie_id,
+                 db.MovieTag.tag_id == tag_id)))
     if tags:
         query = query.where(or_(*tags))
 
     no_tags = []
     for tag_id in cond["no_tags"]:
         no_tags.append(~exists([db.MovieTag.movie_id], \
-            and_(db.Movie.movie_id==db.MovieTag.movie_id, db.MovieTag.tag_id==tag_id)))
+            and_(db.Movie.movie_id == db.MovieTag.movie_id,
+                 db.MovieTag.tag_id == tag_id)))
     if no_tags:
         query = query.where(and_(*no_tags))
 
     for field in cond["equals_n"]:
-        values = [ db.tables.movies.columns[field]!=value for value in cond["equals_n"][field] ]
+        values = [db.tables.movies.columns[field] != value for value in cond["equals_n"][field]]
         query = query.where(and_(*values))
 
     for field in cond["startswith_n"]:
-        values = [ not_(db.tables.movies.columns[field].startswith(value)) for value in cond["startswith_n"][field] ]
+        values = [not_(db.tables.movies.columns[field].startswith(value)) for value in cond["startswith_n"][field]]
         query = query.where(and_(*values))
 
     for field in cond["like_n"]:
-        values = [ not_(db.tables.movies.columns[field].like(value)) for value in cond["like_n"][field] ]
+        values = [not_(db.tables.movies.columns[field].like(value)) for value in cond["like_n"][field]]
         query = query.where(and_(*values))
 
     for field in cond["contains_n"]: # XXX: it's not the SQLAlchemy's .contains() i.e. not for one-to-many or many-to-many collections
-        values = [ not_(db.tables.movies.columns[field].like('%'+value+'%')) for value in cond["contains_n"][field] ]
+        values = [not_(db.tables.movies.columns[field].like('%' + value + '%')) for value in cond["contains_n"][field]]
         query = query.where(and_(*values))
 
     for field in cond["equals"]:
-        values = [ db.tables.movies.columns[field]==value for value in cond["equals"][field] ]
+        values = [db.tables.movies.columns[field] == value for value in cond["equals"][field]]
         query = query.where(or_(*values))
 
     for field in cond["startswith"]:
-        values = [ db.tables.movies.columns[field].startswith(value) for value in cond["startswith"][field] ]
+        values = [db.tables.movies.columns[field].startswith(value) for value in cond["startswith"][field]]
         query = query.where(or_(*values))
 
     for field in cond["like"]:
-        values = [ db.tables.movies.columns[field].like(value) for value in cond["like"][field] ]
+        values = [db.tables.movies.columns[field].like(value) for value in cond["like"][field]]
         query = query.where(or_(*values))
 
     for field in cond["contains"]: # XXX: it's not the SQLAlchemy's .contains() i.e. not for one-to-many or many-to-many collections
-        values = [ db.tables.movies.columns[field].like('%'+value+'%') for value in cond["contains"][field] ]
+        values = [db.tables.movies.columns[field].like('%' + value + '%') for value in cond["contains"][field]]
         query = query.where(or_(*values))
 
     # sorting
@@ -254,4 +261,3 @@
 
     log.debug(query)
     return query #}}}
-



From piotrek at mail.berlios.de  Tue Dec 22 22:12:41 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Tue, 22 Dec 2009 22:12:41 +0100
Subject: [Griffith-svn] r1339 - in trunk: . glade lib
Message-ID: <200912222112.nBMLCfBf005050@sheep.berlios.de>

Author: piotrek
Date: 2009-12-22 22:12:40 +0100 (Tue, 22 Dec 2009)
New Revision: 1339

Modified:
   trunk/ChangeLog
   trunk/glade/griffith.glade
   trunk/lib/initialize.py
Log:
Fix few spelling mistakes (thanks to Sean Cass)


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-22 19:37:40 UTC (rev 1338)
+++ trunk/ChangeLog	2009-12-22 21:12:40 UTC (rev 1339)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-22  Piotr O?arowski
+	* Fix few spelling mistakes (thanks to Sean Cass)
+
 2009-12-21  Michael Jahn
 	* updated movie plugin Kino.de, Cinematografo
 

Modified: trunk/glade/griffith.glade
===================================================================
--- trunk/glade/griffith.glade	2009-12-22 19:37:40 UTC (rev 1338)
+++ trunk/glade/griffith.glade	2009-12-22 21:12:40 UTC (rev 1339)
@@ -5,7 +5,7 @@
   <widget class="GtkWindow" id="main_window">
     <property name="width_request">790</property>
     <property name="height_request">590</property>
-    <property name="title" translatable="yes">Griffith</property>
+    <property name="title" translatable="no">Griffith</property>
     <property name="window_position">GTK_WIN_POS_CENTER</property>
     <property name="default_width">700</property>
     <property name="default_height">500</property>
@@ -517,7 +517,7 @@
                     <child>
                       <widget class="GtkToolButton" id="toolbutton5">
                         <property name="visible">True</property>
-                        <property name="tooltip" translatable="yes">Add new movie</property>
+                        <property name="tooltip" translatable="yes">Adds new movie</property>
                         <property name="stock_id">gtk-add</property>
                         <signal name="clicked" handler="on_toolbar_add_clicked"/>
                         <accelerator key="A" modifiers="GDK_CONTROL_MASK" signal="clicked"/>
@@ -616,7 +616,7 @@
                     <child>
                       <widget class="GtkToolButton" id="t_delete_poster">
                         <property name="visible">True</property>
-                        <property name="tooltip" translatable="yes">Removes poster</property>
+                        <property name="tooltip" translatable="yes">Remove poster</property>
                         <property name="stock_id">gtk-clear</property>
                         <signal name="clicked" handler="on_delete_poster_clicked"/>
                       </widget>
@@ -697,7 +697,7 @@
               <widget class="GtkToolButton" id="toolbutton14">
                 <property name="height_request">28</property>
                 <property name="visible">True</property>
-                <property name="tooltip" translatable="yes">Clears filter</property>
+                <property name="tooltip" translatable="yes">Clear filter</property>
                 <property name="stock_id">gtk-clear</property>
                 <signal name="clicked" handler="on_clear_filter_clicked"/>
               </widget>

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-12-22 19:37:40 UTC (rev 1338)
+++ trunk/lib/initialize.py	2009-12-22 21:12:40 UTC (rev 1339)
@@ -172,7 +172,7 @@
     self.widgets['treeview'].set_headers_visible(True)
     # number column
     renderer = gtk.CellRendererText()
-    self.number_column = gtk.TreeViewColumn(_('N.'), renderer, text=0)
+    self.number_column = gtk.TreeViewColumn(_('No.'), renderer, text=0)
     self.number_column.set_resizable(True)
     self.number_column.set_sort_column_id(0)
     self.number_column.set_reorderable(True)



From mikej06 at mail.berlios.de  Tue Dec 22 22:22:08 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 22 Dec 2009 22:22:08 +0100
Subject: [Griffith-svn] r1340 - trunk/lib/plugins/extensions
Message-ID: <200912222122.nBMLM89x005608@sheep.berlios.de>

Author: mikej06
Date: 2009-12-22 22:21:54 +0100 (Tue, 22 Dec 2009)
New Revision: 1340

Modified:
   trunk/lib/plugins/extensions/ge_player.py
Log:
some mainly windows related changes to the player extension
(windows doesn't like Popen with useShell=True; force list2command because of probably white spaces in the paths)

Modified: trunk/lib/plugins/extensions/ge_player.py
===================================================================
--- trunk/lib/plugins/extensions/ge_player.py	2009-12-22 21:12:40 UTC (rev 1339)
+++ trunk/lib/plugins/extensions/ge_player.py	2009-12-22 21:21:54 UTC (rev 1340)
@@ -52,18 +52,25 @@
         if not movie or not movie.trailer:
             return False
 
+        useShell = True
         command = self.get_config_value('command', self.preferences['command']['default'])
-        if is_windows_system() and not command:
-            import win32api
-            win32api.ShellExecute(0, None, movie.trailer, None, None, 0)
-            return
+        if is_windows_system():
+            useShell = False # Popen with shell=True doesn't work under windows with spaces in filenames
+            if not command:
+                import win32api
+                log.debug('try ShellExecute with trailer %s' % movie.trailer)
+                win32api.ShellExecute(0, None, movie.trailer, None, None, 0)
+                return
 
         if '{1}' in command:
             command = command.replace('{1}', movie.trailer)
         else:
-            command = "%s %s" % (command, movie.trailer)
-        Popen(command, shell=True)
+            # make a sequence results in Popen calls list2cmdline
+            command = [command, movie.trailer]
 
+        log.debug(command)
+        Popen(command, shell=useShell)
+
     def maintree_clicked(self, selection, movie):
         if movie and movie.trailer:
             self.toolbar_icon_widget.set_sensitive(True)



From piotrek at mail.berlios.de  Tue Dec 22 22:23:51 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Tue, 22 Dec 2009 22:23:51 +0100
Subject: [Griffith-svn] r1341 - in trunk: . lib
Message-ID: <200912222123.nBMLNpnA005820@sheep.berlios.de>

Author: piotrek
Date: 2009-12-22 22:23:50 +0100 (Tue, 22 Dec 2009)
New Revision: 1341

Modified:
   trunk/ChangeLog
   trunk/NEWS
   trunk/README
   trunk/lib/version.py
Log:
change version to 0.11


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-22 21:21:54 UTC (rev 1340)
+++ trunk/ChangeLog	2009-12-22 21:23:50 UTC (rev 1341)
@@ -7,6 +7,7 @@
 
 2009-12-22  Piotr O?arowski
 	* Fix few spelling mistakes (thanks to Sean Cass)
+	* Version changed to 0.11
 
 2009-12-21  Michael Jahn
 	* updated movie plugin Kino.de, Cinematografo

Modified: trunk/NEWS
===================================================================
--- trunk/NEWS	2009-12-22 21:21:54 UTC (rev 1340)
+++ trunk/NEWS	2009-12-22 21:23:50 UTC (rev 1341)
@@ -2,6 +2,11 @@
 =============
 * Griffith extensions feature added. You can add your own extensions in
   ~/.griffith/lib/extensions
+* New extensions:
+   - Amazon
+   - Mark as seen
+   - Player
+   - Remover
 * New import plugins:
    - All My Movies
    - Barret Enterprise Software The Movie Library
@@ -14,10 +19,6 @@
    - Personal Video Database
    - The Movie Library
    - wintoolz Filmdatenbank
-
-
-Griffith 0.10.1
-===============
 * Few posters related fixes (updating, cleaning, etc.)
 * FilmAffinity and Amazon movie plugins updated
   (Amazon access works only with a separate Amazon Account since 15th August 2009

Modified: trunk/README
===================================================================
--- trunk/README	2009-12-22 21:21:54 UTC (rev 1340)
+++ trunk/README	2009-12-22 21:23:50 UTC (rev 1341)
@@ -1,4 +1,4 @@
-Griffith 0.10 README
+Griffith 0.11 README
 ====================
 
 This document was last updated on Thu Jun 10 2009.

Modified: trunk/lib/version.py
===================================================================
--- trunk/lib/version.py	2009-12-22 21:21:54 UTC (rev 1340)
+++ trunk/lib/version.py	2009-12-22 21:23:50 UTC (rev 1341)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2009 Vasco Nunes, Piotr O?arowski
+# Copyright ? 2005-2009 Vasco Nunes, Piotr O?arowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -21,9 +21,9 @@
 # You may use and distribute this software under the terms of the
 # GNU General Public License, version 2 or later
 
-pname        = "Griffith"
-pversion     = "0.11~svn"
-pauthor      = "Vasco Nunes, Piotr O?arowski <griffith-private at lists.berlios.de>"
-pyear        = "2005-2009"
-pwebsite     = "http://www.griffith.cc/"
-pdescription = _("Griffith is a film collection manager.")
+pname = 'Griffith'
+pversion = '0.11'
+pauthor = 'Vasco Nunes, Piotr O?arowski <griffith-private at lists.berlios.de>'
+pyear = '2005-2009'
+pwebsite = 'http://www.griffith.cc/'
+pdescription = _('Griffith is a film collection manager.')



From mikej06 at mail.berlios.de  Tue Dec 22 22:31:03 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 22 Dec 2009 22:31:03 +0100
Subject: [Griffith-svn] r1342 - trunk/lib/plugins/extensions
Message-ID: <200912222131.nBMLV33S006496@sheep.berlios.de>

Author: mikej06
Date: 2009-12-22 22:30:33 +0100 (Tue, 22 Dec 2009)
New Revision: 1342

Modified:
   trunk/lib/plugins/extensions/ge_player.py
Log:
s/useShell/use_shell

Modified: trunk/lib/plugins/extensions/ge_player.py
===================================================================
--- trunk/lib/plugins/extensions/ge_player.py	2009-12-22 21:23:50 UTC (rev 1341)
+++ trunk/lib/plugins/extensions/ge_player.py	2009-12-22 21:30:33 UTC (rev 1342)
@@ -52,10 +52,10 @@
         if not movie or not movie.trailer:
             return False
 
-        useShell = True
+        use_shell = True
         command = self.get_config_value('command', self.preferences['command']['default'])
         if is_windows_system():
-            useShell = False # Popen with shell=True doesn't work under windows with spaces in filenames
+            use_shell = False # Popen with shell=True doesn't work under windows with spaces in filenames
             if not command:
                 import win32api
                 log.debug('try ShellExecute with trailer %s' % movie.trailer)
@@ -69,7 +69,7 @@
             command = [command, movie.trailer]
 
         log.debug(command)
-        Popen(command, shell=useShell)
+        Popen(command, shell=use_shell)
 
     def maintree_clicked(self, selection, movie):
         if movie and movie.trailer:



From mikej06 at mail.berlios.de  Tue Dec 22 22:47:29 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 22 Dec 2009 22:47:29 +0100
Subject: [Griffith-svn] r1343 - trunk/lib/plugins/imp
Message-ID: <200912222147.nBMLlTiN007820@sheep.berlios.de>

Author: mikej06
Date: 2009-12-22 22:47:14 +0100 (Tue, 22 Dec 2009)
New Revision: 1343

Modified:
   trunk/lib/plugins/imp/__init__.py
Log:
* set current directory back after importing data
* pep8ify

Modified: trunk/lib/plugins/imp/__init__.py
===================================================================
--- trunk/lib/plugins/imp/__init__.py	2009-12-22 21:30:33 UTC (rev 1342)
+++ trunk/lib/plugins/imp/__init__.py	2009-12-22 21:47:14 UTC (rev 1343)
@@ -38,6 +38,7 @@
 __all__ = [os.path.basename(x)[:-3] for x in glob.glob("%s/*.py" % os.path.dirname(__file__))]
 __all__.remove('__init__')
 
+
 class ImportPlugin(object):
     description = None
     author = None
@@ -52,10 +53,12 @@
     imported = 0
     data = None
 
+    previous_dir = None
+
     # mapping dicts name to id
-    mediummap    = None
-    tagmap       = None
-    vcodecsmap   = None
+    mediummap = None
+    tagmap = None
+    vcodecsmap = None
 
     def __init__(self, parent, fields_to_import):
         self.parent = parent
@@ -109,6 +112,7 @@
     def set_source(self, name):
         """Prepare source (open file, etc.)"""
         # change current dir because there are posters with relative paths (perhaps)
+        self.previous_dir = os.getcwd()
         os.chdir(os.path.dirname(name))
 
     def count_movies(self):
@@ -124,11 +128,11 @@
         from add import validate_details, edit_movie
         from sqlalchemy import select
         import gtk
-        
+
         if not self.set_source(name):
             log.info("Can't read data from file %s", name)
             return False
-        
+
         self.widgets['pwindow'].show()
         while gtk.events_pending():    # give GTK some time for updates
             gtk.main_iteration()
@@ -137,12 +141,12 @@
         update_on = []
         count = self.count_movies()
         if count > 0:
-            for i in range(0,100):
-                update_on.append(int(float(i)/100*count))
+            for i in range(0, 100):
+                update_on.append(int(float(i) / 100 * count))
 
         session = self.db.Session()
         session.bind = self.db.session.bind
-        
+
         # move some stuff outside the loop to speed it up
         set_fraction = self.widgets['progressbar'].set_fraction
         set_text = self.widgets['progressbar'].set_text
@@ -170,7 +174,7 @@
 
                 processed += 1
                 if processed in update_on:
-                    set_fraction(float(processed)/count)
+                    set_fraction(float(processed) / count)
                     main_iteration()
                     set_text("%s (%s/%s)" % (self.imported, processed, count))
                     main_iteration()
@@ -252,13 +256,13 @@
                                             tag_id = self.tagmap[tag.lower()]
                                         else:
                                             tag_id = int(tag)
-                                        db.tables.movie_tag.insert(bind=self.db.session.bind).execute({ 'movie_id':movie.lastrowid, 'tag_id':tag_id })
+                                        db.tables.movie_tag.insert(bind=self.db.session.bind).execute({'movie_id': movie.lastrowid, 'tag_id': tag_id})
                                     except:
                                         pass
                             # adding poster
                             if poster:
                                 if len(poster) > 4:
-                                    # check for JPEG/PNG header otherwise it should be a filename 
+                                    # check for JPEG/PNG header otherwise it should be a filename
                                     header = struct.unpack_from('4s', poster)[0]
                                     if header == '\xff\xd8\xff\xe0' or \
                                        header == '\x89\x50\x4e\x47':
@@ -293,7 +297,9 @@
         self.imported = 0
         self.__source_name = None
         self._continue = True
-    
+        if self.previous_dir:
+            os.chdir(self.previous_dir)
+
     def destroy(self):
         """close all resources"""
         pass
@@ -307,8 +313,8 @@
     ip = eval("plugins.imp.%s.ImportPlugin" % plugin_name)
     widgets['author'].set_markup("<i>%s</i>" % ip.author)
     widgets['email'].set_markup("<i>%s</i>" % ip.email)
-    widgets['version'].set_markup("<i>%s</i>" %ip.version)
-    widgets['description'].set_markup("<i>%s</i>" %ip.description)
+    widgets['version'].set_markup("<i>%s</i>" % ip.version)
+    widgets['description'].set_markup("<i>%s</i>" % ip.description)
     # file filters
     for i in widgets['fcw'].list_filters():
         widgets['fcw'].remove_filter(i)
@@ -332,11 +338,13 @@
     f.add_pattern("*")
     widgets['fcw'].add_filter(f)
 
+
 def on_import_button_clicked(button, self, *args):
-    import plugins.imp, gutils
+    import plugins.imp
+    import gutils
     plugin_name = self.widgets['import']['plugin'].get_active_text()
     filenames = self.widgets['import']['fcw'].get_filenames()
-    
+
     fields = []
     w = self.widgets['import']['fields']
     for i in w:
@@ -370,8 +378,8 @@
             self.widgets['import']['pwindow'].hide()
             self.widgets['window'].set_sensitive(True)
 
+
 def on_abort_button_clicked(button, self, *args):
     self.widgets['import']['window'].hide()
     self.widgets['import']['pwindow'].hide()
     self.widgets['window'].set_sensitive(True)
-



From mikej06 at mail.berlios.de  Wed Dec 23 15:27:33 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 23 Dec 2009 15:27:33 +0100
Subject: [Griffith-svn] r1345 - in trunk: . lib/plugins/movie
Message-ID: <200912231427.nBNERXRl012297@sheep.berlios.de>

Author: mikej06
Date: 2009-12-23 15:27:13 +0100 (Wed, 23 Dec 2009)
New Revision: 1345

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieCinematografo.py
Log:
updated movie plugin Cinematografo

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-22 21:57:40 UTC (rev 1344)
+++ trunk/ChangeLog	2009-12-23 14:27:13 UTC (rev 1345)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-23  Michael Jahn
+	* updated movie plugin Cinematografo
+
 2009-12-22  Piotr O?arowski
 	* Fix few spelling mistakes (thanks to Sean Cass)
 	* Version changed to 0.11

Modified: trunk/lib/plugins/movie/PluginMovieCinematografo.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-22 21:57:40 UTC (rev 1344)
+++ trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-23 14:27:13 UTC (rev 1345)
@@ -21,7 +21,10 @@
 # You may use and distribute this software under the terms of the
 # GNU General Public License, version 2 or later
 
-import gutils, movie, string, re
+import string
+import re
+import gutils
+import movie
 
 plugin_name         = "Cinematografo"
 plugin_description  = "Rivista del Cinematografo dal 1928"
@@ -29,9 +32,11 @@
 plugin_language     = _("Italian")
 plugin_author       = "Vasco Nunes, Piotr O?arowski"
 plugin_author_email = "<vasco.m.nunes at gmail.com>"
-plugin_version      = "1.3"
+plugin_version      = "1.4"
 
+
 class Plugin(movie.Movie):
+
     def __init__(self, id):
         self.encode   = 'iso-8859-1'
         self.movie_id = id
@@ -43,7 +48,7 @@
         if tmp_poster != "":
             self.image_url = "http://www.cinematografo.it/bancadati/images_locandine/%s/%s.jpg" % (self.movie_id, tmp_poster)
         else:
-            self.image_url=""
+            self.image_url = ""
 
     def get_o_title(self):
         # Find the film's original title
@@ -69,7 +74,7 @@
 
     def get_plot(self):
         # Find the film's plot
-        self.plot = gutils.trim(self.page, "\"fontYellowB\">Trama</font>", "\n")
+        self.plot = gutils.regextrim(self.page, '"fontYellowB">Trama</font>', "(\n|Critica<)")
 
     def get_year(self):
         # Find the film's year
@@ -89,7 +94,7 @@
         # Find the actors. Try to make it comma separated.
         self.cast = gutils.regextrim(self.page, ">Attori</font>", '(<font class="fontViolaB">|\n)')
         self.cast = string.replace(self.cast, "target='_self'>", "\n>")
-        self.cast = string.replace(self.cast, "<a>",_(" as ").encode('utf8'))
+        self.cast = string.replace(self.cast, "<a>", _(" as ").encode('utf8'))
         self.cast = string.replace(self.cast, "</tr><tr>", '\n')
         self.cast = string.replace(self.cast, "...vedi il resto del cast", '')
         self.cast = gutils.clean(self.cast)
@@ -115,7 +120,12 @@
 
     def get_trailer(self):
         # Find the film's trailer page or location
-        self.trailer = ""
+        self.trailer = ''
+        pos_end = string.find(self.page, '>guarda il trailer<')
+        if pos_end > -1:
+            pos_beg = string.rfind(self.page[:pos_end], '<a href')
+            if pos_beg > -1:
+                self.trailer = gutils.trim(self.page[pos_beg:pos_end], '"', '"')
 
     def get_country(self):
         # Find the film's country
@@ -126,7 +136,29 @@
         # Convert if needed when assigning.
         self.rating = 0
 
+    def get_screenplay(self):
+        # Find the screenplay
+        self.screenplay = gutils.trim(self.page, 'Sceneggiatura</font></td></tr><tr>', '<td colspan="2"')
+        self.screenplay = string.replace(self.screenplay, '<tr>', ', ')
+        # beautification
+        self.screenplay = gutils.clean(self.screenplay)
+        self.screenplay = string.replace(self.screenplay, ' ,', ',')
+        self.screenplay = re.sub('[ ]+', ' ', self.screenplay)
+        self.screenplay = re.sub('[,][ ]*$', '', self.screenplay)
+
+    def get_cameraman(self):
+        # Find the cameraman
+        self.cameraman = gutils.trim(self.page, 'Fotografia</font></td></tr><tr>', '<td colspan="2"')
+        self.cameraman = string.replace(self.cameraman, '<tr>', ', ')
+        # beautification
+        self.cameraman = gutils.clean(self.cameraman)
+        self.cameraman = string.replace(self.cameraman, ' ,', ',')
+        self.cameraman = re.sub('[ ]+', ' ', self.cameraman)
+        self.cameraman = re.sub('[,][ ]*$', '', self.cameraman)
+
+
 class SearchPlugin(movie.SearchMovie):
+
     # A movie search object
     def __init__(self):
         self.encode                = 'iso-8859-1'
@@ -161,17 +193,19 @@
 #
 # Plugin Test
 #
+
+
 class SearchPluginTest(SearchPlugin):
     #
     # Configuration for automated tests:
     # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
     #
     test_configuration = {
-        'Rocky'      : [ 12, 12 ],
-        'per?'       : [  6,  6 ],
-        'il ritorno' : [ 97, 97 ]
-    }
+        'Rocky'      : [12, 12],
+        'per?'       : [6, 6],
+        'il ritorno' : [97, 97]}
 
+
 class PluginTest:
     #
     # Configuration for automated tests:
@@ -181,7 +215,7 @@
     #        * or the expected value
     #
     test_configuration = {
-        '3996' : { 
+        '3996' : {
             'title'             : 'Amor non ho, per?... per?...',
             'o_title'           : 'Amor non ho, per?... per?...',
             'director'          : 'Giorgio Bianchi',
@@ -220,6 +254,6 @@
             'notes'             : False,
             'runtime'           : 90,
             'image'             : False,
-            'rating'            : False
-        },
-    }
+            'rating'            : False,
+            'screenplay'        : 'Giuseppe Marotta, Mario Brancacci, Vittorio Veltroni, Augusto Borselli, Franco Riganti',
+            'cameraman'         : 'Mario Bava'}, }



From mikej06 at mail.berlios.de  Wed Dec 23 22:20:32 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 23 Dec 2009 22:20:32 +0100
Subject: [Griffith-svn] r1346 - trunk/lib/plugins/movie
Message-ID: <200912232120.nBNLKW5c023941@sheep.berlios.de>

Author: mikej06
Date: 2009-12-23 22:20:17 +0100 (Wed, 23 Dec 2009)
New Revision: 1346

Modified:
   trunk/lib/plugins/movie/PluginMovieCinematografo.py
Log:
updated movie plugin Cinematografo

Modified: trunk/lib/plugins/movie/PluginMovieCinematografo.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-23 14:27:13 UTC (rev 1345)
+++ trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-23 21:20:17 UTC (rev 1346)
@@ -74,7 +74,7 @@
 
     def get_plot(self):
         # Find the film's plot
-        self.plot = gutils.regextrim(self.page, '"fontYellowB">Trama</font>', "(\n|Critica<)")
+        self.plot = gutils.regextrim(self.page, '"fontYellowB">Trama</font>', "(\n|Critica<|Note<)")
 
     def get_year(self):
         # Find the film's year
@@ -88,7 +88,7 @@
 
     def get_genre(self):
         # Find the film's genre
-        self.genre = gutils.trim(self.page, ">Genere</font>", "</tr>").lower()
+        self.genre = string.capwords(gutils.trim(self.page, ">Genere</font>", "</tr>"))
 
     def get_cast(self):
         # Find the actors. Try to make it comma separated.
@@ -129,13 +129,22 @@
 
     def get_country(self):
         # Find the film's country
-        self.country = gutils.trim(self.page, ">Origine</font>", "</tr>")
+        self.country = string.replace(string.capwords(gutils.clean(gutils.trim(self.page, ">Origine</font>", "</tr>"))), 'Usa', 'USA')
 
     def get_rating(self):
         # Find the film's rating. From 0 to 10.
         # Convert if needed when assigning.
         self.rating = 0
 
+    def get_notes(self):
+        self.notes = ''
+        critica = gutils.clean(string.replace(gutils.regextrim(self.page, 'Critica</font>', "(</td>|\n|Note<)"), '<br>', '\n'))
+        if critica:
+            self.notes = 'Critica:\n\n' + critica + '\n\n'
+        note = gutils.clean(string.replace(gutils.regextrim(self.page, 'Note</font>', "(</td>|\n|Critica<)"), '<br>', '\n'))
+        if note:
+            self.notes = 'Note:\n\n' + string.capwords(note)
+
     def get_screenplay(self):
         # Find the screenplay
         self.screenplay = gutils.trim(self.page, 'Sceneggiatura</font></td></tr><tr>', '<td colspan="2"')
@@ -243,15 +252,15 @@
 Pia De Doses' + _(' as ') + '\n\
 Guido Barbarisi' + _(' as ') + '\n\
 Galeazzo Benti as',
-            'country'           : 'ITALIA',
-            'genre'             : 'commedia',
+            'country'           : 'Italia',
+            'genre'             : 'Commedia',
             'classification'    : False,
             'studio'            : 'Minervafilm - Mfd Home Video',
             'o_site'            : False,
             'site'              : 'http://www.cinematografo.it/bancadati/consultazione/schedafilm_2009.jsp?completa=si&codice=3996',
             'trailer'           : False,
             'year'              : 1951,
-            'notes'             : False,
+            'notes'             : True,
             'runtime'           : 90,
             'image'             : False,
             'rating'            : False,



From mikej06 at mail.berlios.de  Sat Dec 26 22:11:16 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 26 Dec 2009 22:11:16 +0100
Subject: [Griffith-svn] r1347 - trunk/lib/plugins/movie
Message-ID: <200912262111.nBQLBGEt003349@sheep.berlios.de>

Author: mikej06
Date: 2009-12-26 22:11:03 +0100 (Sat, 26 Dec 2009)
New Revision: 1347

Modified:
   trunk/lib/plugins/movie/PluginMovieCinematografo.py
Log:
updated movie plugin Cinematografo

Modified: trunk/lib/plugins/movie/PluginMovieCinematografo.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-23 21:20:17 UTC (rev 1346)
+++ trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-12-26 21:11:03 UTC (rev 1347)
@@ -53,17 +53,19 @@
     def get_o_title(self):
         # Find the film's original title
         self.o_title = gutils.trim(self.page, ">Titolo Originale</font>", "</tr>")
-        self.o_title = string.capwords(self.o_title)
+        self.o_title = self.capwords(self.o_title)
         # if nothing found, use the title
         if self.o_title == '':
             self.o_title = gutils.trim(self.page, "<!--TITOLO-->", "<!--FINE TITOLO-->")
             self.o_title = gutils.trim(self.o_title, "<b>", "</b>")
+        self.o_title = self.capwords(self.o_title)
 
     def get_title(self):
         # Find the film's local title.
         # Probably the original title translation
         self.title = gutils.trim(self.page, "<!--TITOLO-->", "<!--FINE TITOLO-->")
         self.title = gutils.trim(self.title, "<b>", "</b>")
+        self.title = self.capwords(self.title)
 
     def get_director(self):
         # Find the film's director
@@ -88,7 +90,7 @@
 
     def get_genre(self):
         # Find the film's genre
-        self.genre = string.capwords(gutils.trim(self.page, ">Genere</font>", "</tr>"))
+        self.genre = self.capwords(gutils.trim(self.page, ">Genere</font>", "</tr>"))
 
     def get_cast(self):
         # Find the actors. Try to make it comma separated.
@@ -108,7 +110,7 @@
 
     def get_studio(self):
         # Find the studio
-        self.studio = string.capwords(gutils.clean(gutils.trim(self.page, ">Distribuzione</font>", "</tr>")))
+        self.studio = self.capwords(gutils.clean(gutils.trim(self.page, ">Distribuzione</font>", "</tr>")))
 
     def get_o_site(self):
         # Find the film's oficial site
@@ -129,7 +131,7 @@
 
     def get_country(self):
         # Find the film's country
-        self.country = string.replace(string.capwords(gutils.clean(gutils.trim(self.page, ">Origine</font>", "</tr>"))), 'Usa', 'USA')
+        self.country = string.replace(self.capwords(gutils.clean(gutils.trim(self.page, ">Origine</font>", "</tr>"))), 'Usa', 'USA')
 
     def get_rating(self):
         # Find the film's rating. From 0 to 10.
@@ -141,9 +143,11 @@
         critica = gutils.clean(string.replace(gutils.regextrim(self.page, 'Critica</font>', "(</td>|\n|Note<)"), '<br>', '\n'))
         if critica:
             self.notes = 'Critica:\n\n' + critica + '\n\n'
-        note = gutils.clean(string.replace(gutils.regextrim(self.page, 'Note</font>', "(</td>|\n|Critica<)"), '<br>', '\n'))
+        note = gutils.clean(string.replace(gutils.regextrim(self.page, 'Note</font>', "(</td>|\n|Critica<)"), '<br>', '--BR--'))
         if note:
-            self.notes = 'Note:\n\n' + string.capwords(note)
+            # string.capwords removes line breaks, preventing them with placeholder --BR--
+            note = self.capwords(note)
+            self.notes = self.notes + 'Note:\n\n' + string.replace(note, '--br--', '\n')
 
     def get_screenplay(self):
         # Find the screenplay
@@ -165,6 +169,11 @@
         self.cameraman = re.sub('[ ]+', ' ', self.cameraman)
         self.cameraman = re.sub('[,][ ]*$', '', self.cameraman)
 
+    def capwords(self, name):
+        tmp = gutils.clean(name)
+        if tmp == string.upper(tmp):
+            return string.capwords(name)
+        return name
 
 class SearchPlugin(movie.SearchMovie):
 
@@ -184,6 +193,12 @@
         # Isolating just a portion (with the data we want) of the results
         self.page = gutils.trim(self.page, '<td valign="top" width="73%" bgcolor="#4d4d4d">', '</td>')
 
+    def capwords(self, name):
+        tmp = gutils.clean(name)
+        if tmp == string.upper(tmp):
+            return string.capwords(name)
+        return name
+
     def get_searches(self):
         # Try to find both id and film title for each search result
         elements = string.split(self.page, "<li>")
@@ -194,7 +209,7 @@
                 id = gutils.trim(element, "?codice=", "\">")
                 if id <> '':
                     self.ids.append(id)
-                    self.titles.append(gutils.convert_entities(gutils.trim(element, "<b>", "</b>")))
+                    self.titles.append(self.capwords(gutils.convert_entities(gutils.trim(element, "<b>", "</b>"))))
         else:
             self.number_results = 0
 



From mikej06 at mail.berlios.de  Mon Dec 28 15:50:38 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 28 Dec 2009 15:50:38 +0100
Subject: [Griffith-svn] r1348 - in trunk: . lib/plugins/movie
Message-ID: <200912281450.nBSEocBp022917@sheep.berlios.de>

Author: mikej06
Date: 2009-12-28 15:50:21 +0100 (Mon, 28 Dec 2009)
New Revision: 1348

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieAmazon.py
Log:
updated movie plugin Amazon (locale was not used)

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-26 21:11:03 UTC (rev 1347)
+++ trunk/ChangeLog	2009-12-28 14:50:21 UTC (rev 1348)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-12-28  Michael Jahn
+	* updated movie plugin Amazon
+
 2009-12-23  Michael Jahn
 	* updated movie plugin Cinematografo
 

Modified: trunk/lib/plugins/movie/PluginMovieAmazon.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAmazon.py	2009-12-26 21:11:03 UTC (rev 1347)
+++ trunk/lib/plugins/movie/PluginMovieAmazon.py	2009-12-28 14:50:21 UTC (rev 1348)
@@ -41,6 +41,7 @@
 plugin_author_email = "<mikej06 at hotmail.com>"
 plugin_version      = "1.2"
 
+
 class Plugin(movie.Movie):
 
     def __init__(self, id):
@@ -61,15 +62,15 @@
             amazon.setLicense(accesskey, secretkey)
 
             locale = self.config.get('amazon_locale', 0, section='extensions')
-            if locale == '1':
+            if locale == '1' or locale == 'UK':
                 locale = 'uk'
-            elif locale == '2':
+            elif locale == '2' or locale == 'DE':
                 locale = 'de'
-            elif locale == '3':
+            elif locale == '3' or locale == 'CA':
                 locale = 'ca'
-            elif locale == '4':
+            elif locale == '4' or locale == 'FR':
                 locale = 'fr'
-            elif locale == '5':
+            elif locale == '5' or locale == 'JP':
                 locale = 'jp'
             else:
                 locale = None
@@ -233,6 +234,7 @@
             if hasattr(self.page.ItemAttributes, 'EAN'):
                 self.barcode = self.page.ItemAttributes.EAN
 
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
@@ -241,7 +243,7 @@
         self.encode                = 'utf8'
         self.remove_accents        = False
 
-    def search(self,parent_window):
+    def search(self, parent_window):
         # dont use base functionality
         # use the Amazon Web API
         self.titles = [""]
@@ -255,15 +257,15 @@
             amazon.setLicense(accesskey, secretkey)
 
             locale = self.config.get('amazon_locale', 0, section='extensions')
-            if locale == '1':
+            if locale == '1' or locale == 'UK':
                 locale = 'uk'
-            elif locale == '2':
+            elif locale == '2' or locale == 'DE':
                 locale = 'de'
-            elif locale == '3':
+            elif locale == '3' or locale == 'CA':
                 locale = 'ca'
-            elif locale == '4':
+            elif locale == '4' or locale == 'FR':
                 locale = 'fr'
-            elif locale == '5':
+            elif locale == '5' or locale == 'JP':
                 locale = 'jp'
             else:
                 locale = None
@@ -313,6 +315,7 @@
             theatricalReleaseDate = ''
         self.titles.append("%s%s%s (ASIN: %s)" % (productGroup, title, theatricalReleaseDate, item.ASIN))
 
+
 class AmazonRetriever(threading.Thread):
 
     def __init__(self, title, locale, parent_window, progress, lookuptype='Search', destination=None):
@@ -387,17 +390,20 @@
 #
 # Plugin Test
 #
+# Amazon test data for DE locale only
+#
 class SearchPluginTest(SearchPlugin):
     #
     # Configuration for automated tests:
     # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
     #
     test_configuration = {
-        'Rocky Balboa'         : [ 16, 16 ],
+        'Rocky Balboa'         : [ 17, 17 ],
         'Arahan'               : [  7,  7 ],
-        'Ein gl?ckliches Jahr' : [  2,  2 ]
+        'Ein gl?ckliches Jahr' : [  3,  3 ]
     }
 
+
 class PluginTest:
     #
     # Configuration for automated tests:
@@ -460,7 +466,7 @@
 Yoon So-yi\n\
 Ahn Sung-kee',
             'country'             : 'S?dkorea',
-            'genre'               : 'Actionkom?die, Abenteuer- & Actionkom?die, Fantasykom?die, General AAS, Action, Kom?die, Action, Fantasy, Kom?die, Korea, Unter 10 EUR',
+            'genre'               : 'Actionkom?die, Abenteuer- & Actionkom?die, Fantasykom?die, General AAS, Action, Kom?die, Action, Fantasy, Kom?die, Korea',
             'classification'      : 'Freigegeben ab 16 Jahren',
             'o_site'              : False,
             'site'                : 'http://www.amazon.de/dp/B000BSNOD6',



From mikej06 at mail.berlios.de  Mon Dec 28 15:57:22 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 28 Dec 2009 15:57:22 +0100
Subject: [Griffith-svn] r1349 - trunk/lib
Message-ID: <200912281457.nBSEvMfi023587@sheep.berlios.de>

Author: mikej06
Date: 2009-12-28 15:57:12 +0100 (Mon, 28 Dec 2009)
New Revision: 1349

Modified:
   trunk/lib/widgets.py
Log:
removed old amazon widget reference

Modified: trunk/lib/widgets.py
===================================================================
--- trunk/lib/widgets.py	2009-12-28 14:50:21 UTC (rev 1348)
+++ trunk/lib/widgets.py	2009-12-28 14:57:12 UTC (rev 1349)
@@ -252,7 +252,6 @@
         'vcodec_name'       : get('vcodec_name_combo'),
         'sortby'            : get('p_sortby'),
         'sortby_reverse'    : get('p_sortby_reverse'),
-        'amazon_locale'     : get('cb_amazon_locale'),
     }
     self.widgets['preferences']['treeview'].connect('button_press_event', self.on_p_tree_button_press_event)
     self.widgets['preferences']['window'].connect('delete_event', self.on_delete_event_p)



From mikej06 at mail.berlios.de  Mon Dec 28 22:17:56 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 28 Dec 2009 22:17:56 +0100
Subject: [Griffith-svn] r1350 - in trunk: . lib/plugins/imp
Message-ID: <200912282117.nBSLHu8U005747@sheep.berlios.de>

Author: mikej06
Date: 2009-12-28 22:17:45 +0100 (Mon, 28 Dec 2009)
New Revision: 1350

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/imp/CSV.py
Log:
updated import plugin CSV
(optional auto-detect dialect settings, fixed pre-selection of encoding)
pep8ify

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-28 14:57:12 UTC (rev 1349)
+++ trunk/ChangeLog	2009-12-28 21:17:45 UTC (rev 1350)
@@ -7,6 +7,8 @@
 
 2009-12-28  Michael Jahn
 	* updated movie plugin Amazon
+	* updated import plugin CSV
+	  (optional auto-detect dialect settings, fixed pre-selection of encoding)
 
 2009-12-23  Michael Jahn
 	* updated movie plugin Cinematografo

Modified: trunk/lib/plugins/imp/CSV.py
===================================================================
--- trunk/lib/plugins/imp/CSV.py	2009-12-28 14:57:12 UTC (rev 1349)
+++ trunk/lib/plugins/imp/CSV.py	2009-12-28 21:17:45 UTC (rev 1350)
@@ -3,8 +3,8 @@
 __revision__ = '$Id$'
 
 ###########################################################################
-#    Copyright (C) 2006-2007 by Jessica Katharina Parth                         
-#    <Jessica.K.P at women-at-work.org>                                       
+#    Copyright (C) 2006-2007 by Jessica Katharina Parth
+#    <Jessica.K.P at women-at-work.org>
 #
 # Copyright: See COPYING file that comes with this distribution
 #
@@ -18,34 +18,39 @@
 import sys
 import gutils
 import string
+import re
+import logging
+log = logging.getLogger("Griffith")
 
 
 def digits_only(s):
-    import string, re
     _match = re.compile(r"\d+")
     try:
-        s = reduce( string.join, _match.findall(s) )
+        s = reduce(string.join, _match.findall(s))
     except:
         s = '0'
     return s
-    
+
+
 def letters_only(s):
-    import string, re
     _match = re.compile(r"\D+")
     try:
-        s = reduce( unicode.join, _match.findall(s) )
+        s = reduce(unicode.join, _match.findall(s))
     except:
         s = unicode(s)
     return s
-    
+
+
 class ImportPlugin(IP):
-    description    = _("Full CSV list import plugin")
-    author        = "Jessica Katharina Parth"
+    description  = _("Full CSV list import plugin")
+    author       = "Jessica Katharina Parth"
     email        = "Jessica.K.P at women-at-work.org"
-    version        = "0.3"
-    file_filters    = '*.[cC][sS][vV]'
-    mime_types    = ('text/comma-separated-values', 'text/csv', 'application/csv')
+    version      = "0.3"
+    file_filters = '*.[cC][sS][vV]'
+    mime_types   = ('text/comma-separated-values', 'text/csv', 'application/csv')
 
+    _encoding_cleanup = re.compile('[_-]')
+
     def initialize(self):
         if not IP.initialize(self):
             return False
@@ -58,22 +63,22 @@
             log.info("Glade-file %s can not be loaded.", gf)
             return False
         # open gtk window
-        self.gtk.get_widget('d_import').set_transient_for( self.widgets['window'] )
-        
+        self.gtk.get_widget('d_import').set_transient_for(self.widgets['window'])
+
         # simple string lists
         self.tv_csv = self.gtk.get_widget('tv_csv')
         self.tv_assigned = self.gtk.get_widget('tv_assigned')
         self.tv_griffith = self.gtk.get_widget('tv_griffith')
-        
+
         # 1st list
         self.ls_csv = gtk.ListStore(str)
         self.tv_csv.set_model(self.ls_csv)
         renderer = gtk.CellRendererText()
         column = gtk.TreeViewColumn("none", renderer, text=0)
         self.tv_csv.append_column(column)
-        
-        # 2nd list 
-        self.ls_griffith = gtk.ListStore(str,str)
+
+        # 2nd list
+        self.ls_griffith = gtk.ListStore(str, str)
         self.tv_griffith.set_model(self.ls_griffith)
         renderer = gtk.CellRendererText()
         column = gtk.TreeViewColumn("none", renderer, text=0)
@@ -82,9 +87,9 @@
         column = gtk.TreeViewColumn("none", renderer, text=1)
         self.tv_griffith.append_column(column)
         self.set_griffith_fields()
-        
+
         # 3rd list
-        self.ls_assigned = gtk.ListStore(str,str,str)
+        self.ls_assigned = gtk.ListStore(str, str, str)
         self.tv_assigned.set_model(self.ls_assigned)
         renderer = gtk.CellRendererText()
         column = gtk.TreeViewColumn("none", renderer, text=0)
@@ -96,51 +101,51 @@
         column = gtk.TreeViewColumn("none", renderer, text=2)
         column.set_visible(False)
         self.tv_assigned.append_column(column)
-    
+
         # hide tabs
         self.nb_pages = self.gtk.get_widget('nb_pages')
         self.nb_pages.get_nth_page(1).hide()
         self.nb_pages.connect("switch-page", self._on_page_changed)
-        
+
         # Events
         # Buttons
         self.b_cancel = self.gtk.get_widget("b_cancel")
         self.b_cancel.connect("clicked", self._clicked)
-        
+
         self.b_next = self.gtk.get_widget("b_next")
         self.b_next.connect("clicked", self._clicked)
-        
+
         self.b_back = self.gtk.get_widget("b_back")
         self.b_back.connect("clicked", self._clicked)
-        
+
         self.b_add = self.gtk.get_widget("b_add")
         self.b_add.connect("clicked", self._clicked)
-        
+
         self.b_del = self.gtk.get_widget("b_del")
         self.b_del.connect("clicked", self._clicked)
-        
+
         # Treeviews
         self.tv_griffith.connect("row_activated", self._on_row_activated)
         self.tv_griffith.connect("cursor_changed", self._on_cursor_changed)
         self.tv_csv.connect("row_activated", self._on_row_activated)
         self.tv_csv.connect("cursor_changed", self._on_cursor_changed)
         self.tv_assigned.connect("cursor_changed", self._on_cursor_changed)
-        
+
         self.gtk.get_widget('e_lineterminator').set_active(0)
-        
+
         self.selected_griffith = None
         self.selected_csv = None
         self.current_csv_row = 0
         self.csv_header = None
         return True
-    
+
     def set_griffith_fields(self):
         # 2nd list
-        sorted_list = ( "number", "title", "o_title", "director", "year", "country",
+        sorted_list = ("number", "title", "o_title", "director", "year", "country",
                 "cast", "studio", "plot", "runtime", "genre", "classification",
                 "site", "o_site", "trailer", "image", "seen", "loaned", "notes",
                 "rating", "movie_id", "collection_id", "volume_id", "medium_id",
-                "vcodec_id", "color", "cond", "layers", "region", "media_num" )
+                "vcodec_id", "color", "cond", "layers", "region", "media_num")
         # sort the list and add field and translated field-name
         for sorted in sorted_list:
             for name in self.fields_to_import:
@@ -153,22 +158,21 @@
         self.import_table = {}
         item = self.ls_assigned.get_iter_first()
         while item is not None:
-            self.import_table[self.ls_assigned.get_value(item,1)] = self.ls_assigned.get_value(item,2)
+            self.import_table[self.ls_assigned.get_value(item, 1)] = self.ls_assigned.get_value(item, 2)
             item = self.ls_assigned.iter_next(item)
-            
+
     def _on_page_changed(self, notebook, page, page_num):
         if page_num == 0:
             self.b_back.set_sensitive(False)
         if page_num == 1:
             self.b_back.set_sensitive(True)
             self.open_source()
-            
-        
+
     def _clicked(self, widget, event=None, data=None):
         if widget == self.b_cancel:
             self.gtk.get_widget('d_import').hide()
             self.gtk.get_widget('d_import').response(gtk.RESPONSE_CANCEL)
-            
+
         if widget == self.b_back:
             if self.nb_pages.get_current_page() == 1:
                 self.nb_pages.prev_page()
@@ -183,100 +187,98 @@
                     if self.ls_assigned.get_iter_first() is not None:
                         # prepare tabelle for import
                         self.create_import_table()
-                            
                         # hide everything
                         self.gtk.get_widget('d_import').hide()
                         self.gtk.get_widget('d_import').response(gtk.RESPONSE_OK)
                     else:
-                        gutils.info(_("Please assign at least one field first!"), self.gtk.get_widget('d_import') )
-                        
+                        gutils.info(_("Please assign at least one field first!"), self.gtk.get_widget('d_import'))
+
         if widget == self.b_add:
             iterator = self.ls_assigned.append()
-            self.ls_assigned.set_value(iterator, 0, "%s > %s" % (self.selected_csv, self.fields[self.selected_griffith]) )
+            self.ls_assigned.set_value(iterator, 0, "%s > %s" % (self.selected_csv, self.fields[self.selected_griffith]))
             # add information for the import tabelle
-            self.ls_assigned.set_value(iterator, 1, self.selected_griffith )
-            self.ls_assigned.set_value(iterator, 2, str(self.csv_header.index(self.selected_csv)) )
+            self.ls_assigned.set_value(iterator, 1, self.selected_griffith)
+            self.ls_assigned.set_value(iterator, 2, str(self.csv_header.index(self.selected_csv)))
             self.ls_griffith.remove(self.iter_griffith)
             self.selected_griffith = None
-            
+
             self.b_add.set_sensitive(False)
-        
+
         if widget == self.b_del:
             # re-add field to griffith
-            field_name = self.ls_assigned.get_value(self.iter_assigned,1)
+            field_name = self.ls_assigned.get_value(self.iter_assigned, 1)
 
             iterator = self.ls_griffith.append()
             self.ls_griffith.set_value(iterator, 0, field_name)
             self.ls_griffith.set_value(iterator, 1, self.fields[field_name])
-            
+
             # remove assigned row
             self.ls_assigned.remove(self.iter_assigned)
-            
+
             self.b_del.set_sensitive(False)
-            
-                    
+
     def _on_row_activated(self, treeview, path, view_column, data = None):
         # get selected rows from both treeviews/lists
         if treeview == self.tv_griffith:
             self.iter_griffith = self.ls_griffith.get_iter(path)
-        
+
             if self.iter_griffith:
-                self.selected_griffith = self.ls_griffith.get_value(self.iter_griffith,0)
-        
+                self.selected_griffith = self.ls_griffith.get_value(self.iter_griffith, 0)
+
         if treeview == self.tv_csv:
             iter = self.ls_csv.get_iter(path)
-        
             if iter:
-                self.selected_csv = self.ls_csv.get_value(iter,0)
-                
+                self.selected_csv = self.ls_csv.get_value(iter, 0)
+
         # enable add button if both lists have a selected item
         if self.selected_griffith is not None and self.selected_csv is not None:
             self.b_add.set_sensitive(True)
         else:
             self.b_add.set_sensitive(False)
-        
+
     def _on_cursor_changed(self, widget, data1 = None, data2 = None):
         # get selected rows from both treeviews/lists
         selection = widget.get_selection()
-        (model,iter) = selection.get_selected()
-            
+        (model, iter) = selection.get_selected()
+
         if widget == self.tv_griffith:
             self.iter_griffith = iter
             if self.iter_griffith:
                 self.selected_griffith = str(model.get_value(self.iter_griffith, 0))
             else:
                 self.selected_griffith = None
-        
+
         if widget == self.tv_csv:
             if iter:
                 self.selected_csv = str(model.get_value(iter, 0))
             else:
                 self.selected_csv = None
-                
+
         if widget == self.tv_assigned:
             self.iter_assigned = iter
             if self.iter_assigned:
                 self.b_del.set_sensitive(True)
             else:
                 self.b_del.set_sensitive(False)
-                
+
         # enable add button if both lists have a selected item
         if self.selected_griffith is not None and self.selected_csv is not None:
             self.b_add.set_sensitive(True)
         else:
             self.b_add.set_sensitive(False)
-            
+
     def open_source(self):
-        import csv, codecs, os
+        import csv
+        import codecs
         # get user values for converting/opening the csv-file
-        self.start_row = int(digits_only( self.gtk.get_widget('e_startrow').get_text() ))
+        self.start_row = int(digits_only(self.gtk.get_widget('e_startrow').get_text()))
         encoding = self.gtk.get_widget('e_encoding').get_active_text()
-        encoding = encoding[:string.find( encoding, ' ' )]
+        encoding = encoding[:string.find(encoding, ' ')]
         delimiter = self.gtk.get_widget('e_delimiter').get_text()
         if delimiter == '':
             delimiter = ","
         # quotechar
-        quotechar =  self.gtk.get_widget('e_quotechar').get_text()
+        quotechar = self.gtk.get_widget('e_quotechar').get_text()
         if quotechar == '':
             quotechar == '"'
         # lineterminator
@@ -286,19 +288,18 @@
         # windows lineterminator
         if active == 1:
             lineterminator = '\r\n'
-        
+
         # open file
         try:
-            self.data = csv.reader(codecs.open(self.__source_name, 'r', encoding), dialect='excel', quotechar=quotechar, delimiter=delimiter, lineterminator = lineterminator)
+            self.data = csv.reader(codecs.open(self.__source_name, 'r', encoding), dialect = 'excel', quotechar = quotechar, delimiter = delimiter, lineterminator = lineterminator)
 
             # get the first line in csv file for the field names
             self.csv_header = self.data.next()
-            
-            # if the user wants to import line 0 then we have to open it again 
+
+            # if the user wants to import line 0 then we have to open it again
             if self.start_row == 0:
-                self.data = csv.reader(codecs.open(self.__source_name, 'r', encoding), dialect='excel', quotechar=quotechar, delimiter=delimiter, lineterminator = lineterminator)
-            
-        
+                self.data = csv.reader(codecs.open(self.__source_name, 'r', encoding), dialect = 'excel', quotechar = quotechar, delimiter = delimiter, lineterminator = lineterminator)
+
             # fill the found csv-headers in the simple string list
             self.ls_csv.clear()
             for name in self.csv_header:
@@ -306,12 +307,10 @@
                 self.ls_csv.set_value(iterator, 0, name)
             return True
         except:
-            gutils.info(_("Can't open the file %s") % self.__source_name, self.gtk.get_widget('d_import') )
+            gutils.info(_("Can't open the file %s") % self.__source_name, self.gtk.get_widget('d_import'))
             return False
-            
 
     def set_source(self, name):
-        import os
         # source _dependent_ initialization goes here
         if name is None or not os.path.isfile(name):
             return False
@@ -328,21 +327,44 @@
                 if detector.done or lines == 50:
                     break
             detector.close()
-            encoding = detector.result['encoding'].replace('-', '')
+            encoding = string.lower(detector.result['encoding'])
         except:
+            log.exception('')
             encoding = 'utf_8'
-        # remove - and _ for better detection
-        encoding = encoding.replace('_', '')
-        
-        model    = self.gtk.get_widget('e_encoding').get_model()
-        itempos    = 0
+        encoding = self._encoding_cleanup.sub('', encoding)
+        model = self.gtk.get_widget('e_encoding').get_model()
+        itempos = 0
         for item in model:
-            pos1 = string.find( string.replace( string.lower(str(item[0])), '_', '' ) , encoding )
+            pos1 = string.find(self._encoding_cleanup.sub('', string.lower(str(item[0]))), encoding)
             if pos1 == 0:
                 break
             itempos += 1
         self.gtk.get_widget('e_encoding').set_active(itempos)
-        
+        # auto-detect CSV import settings (optional)
+        try:
+            import csv
+            sniffer = csv.Sniffer()
+            csvfilesize = os.path.getsize(self.__source_name)
+            if csvfilesize > 65535:
+                csvfilesize = 65535
+            csvfile = file(self.__source_name, 'rb')
+            try:
+                # quote char, line terminator and field delimiter
+                proposed_dialect = sniffer.sniff(csvfile.read(csvfilesize))
+                self.gtk.get_widget('e_delimiter').set_text(proposed_dialect.delimiter)
+                self.gtk.get_widget('e_quotechar').set_text(proposed_dialect.quotechar)
+                if proposed_dialect.lineterminator == '\r\n':
+                    self.gtk.get_widget('e_lineterminator').set_active(1)
+                # first row with column headers
+                csvfile.seek(0)
+                if sniffer.has_header(csvfile.read(csvfilesize)):
+                    self.gtk.get_widget('e_startrow').set_text('1')
+                else:
+                    self.gtk.get_widget('e_startrow').set_text('0')
+            finally:
+                csvfile.close()
+        except:
+            log.exception('')
         # run dialog
         response = self.gtk.get_widget('d_import').run()
         if response == gtk.RESPONSE_OK:
@@ -359,7 +381,7 @@
                 i += 1
         except:
             return i
-    
+
     def get_movie_details(self):
         try:
             item = self.data.next()
@@ -372,7 +394,7 @@
         self.current_csv_row += 1
         if self.current_csv_row < self.start_row:
             return None
-        
+
         # assign the keys
         t_movies = copy.deepcopy(self.import_table)
 
@@ -381,26 +403,26 @@
             try:
                 # some minor fixes to the import so it fits the griffith variable types
                 if field == 'year' or field == 'runtime' or field == 'media_num' or field == 'number'  or field == 'volume_id':
-                    t_movies[field] = int( digits_only( item[ int(self.import_table[field]) ] ) )
+                    t_movies[field] = int(digits_only(item[int(self.import_table[field])]))
                 elif field == 'seen' or field == 'loaned':
-                    t_movies[field] = bool( item[ int(self.import_table[field]) ] )
+                    t_movies[field] = bool(item[int(self.import_table[field])])
                 elif field == 'country':
-                    t_movies[field] = letters_only( item[ int(self.import_table[field]) ] )
+                    t_movies[field] = letters_only(item[int(self.import_table[field])])
                 elif field == 'cast':
                     try:
                         if item[int(self.import_table[field])].index(", ") != -1:
-                            t_movies[field] = item[ int(self.import_table[field]) ].replace(', ', "\n")
+                            t_movies[field] = item[int(self.import_table[field])].replace(', ', "\n")
                     except:
-                        t_movies[field] = item[ int(self.import_table[field]) ].replace(',', "\n")
+                        t_movies[field] = item[int(self.import_table[field])].replace(',', "\n")
                     t_movies[field] = unicode(t_movies[field])
                 else:
                     # 1:1 import
-                    t_movies[field] = unicode(item[ int(self.import_table[field])])
+                    t_movies[field] = unicode(item[int(self.import_table[field])])
             except:
                 # error field can't be imported
                 log.debug("field %s cannot be imported (%s)", field, e)
                 t_movies.pop(field)
-        
+
         return t_movies
 
     def clear(self):



From mikej06 at mail.berlios.de  Mon Dec 28 22:19:01 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 28 Dec 2009 22:19:01 +0100
Subject: [Griffith-svn] r1351 - in trunk: . lib/plugins/movie
Message-ID: <200912282119.nBSLJ1uQ005835@sheep.berlios.de>

Author: mikej06
Date: 2009-12-28 22:18:49 +0100 (Mon, 28 Dec 2009)
New Revision: 1351

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieFilmDb.py
Log:
updated movie plugin FilmDb

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-28 21:17:45 UTC (rev 1350)
+++ trunk/ChangeLog	2009-12-28 21:18:49 UTC (rev 1351)
@@ -6,7 +6,7 @@
 
 
 2009-12-28  Michael Jahn
-	* updated movie plugin Amazon
+	* updated movie plugin Amazon, FilmDb
 	* updated import plugin CSV
 	  (optional auto-detect dialect settings, fixed pre-selection of encoding)
 

Modified: trunk/lib/plugins/movie/PluginMovieFilmDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-12-28 21:17:45 UTC (rev 1350)
+++ trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-12-28 21:18:49 UTC (rev 1351)
@@ -40,7 +40,7 @@
         self.url      = "http://www.filmdb.de/filmanzeige.php?alle=1&filmid=" + self.movie_id
 
     def get_image(self):
-        tmp = gutils.regextrim(self.page, 'plakat.php?', '["\']')
+        tmp = gutils.regextrim(self.page, 'plakat.php[?]', '["\']')
         if tmp:
             page_image = self.open_page(url='http://www.filmdb.de/plakat.php?' + tmp)
             tmp = gutils.regextrim(self.page, 'bilder.filmdb.de', '["\']')



From mikej06 at mail.berlios.de  Mon Dec 28 22:47:07 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 28 Dec 2009 22:47:07 +0100
Subject: [Griffith-svn] r1352 - in trunk: . lib/plugins/movie
Message-ID: <200912282147.nBSLl7JF008489@sheep.berlios.de>

Author: mikej06
Date: 2009-12-28 22:46:53 +0100 (Mon, 28 Dec 2009)
New Revision: 1352

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieAllocine.py
Log:
updated movie plugin Allocine

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-12-28 21:18:49 UTC (rev 1351)
+++ trunk/ChangeLog	2009-12-28 21:46:53 UTC (rev 1352)
@@ -6,7 +6,7 @@
 
 
 2009-12-28  Michael Jahn
-	* updated movie plugin Amazon, FilmDb
+	* updated movie plugin Allocine, Amazon, FilmDb
 	* updated import plugin CSV
 	  (optional auto-detect dialect settings, fixed pre-selection of encoding)
 

Modified: trunk/lib/plugins/movie/PluginMovieAllocine.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAllocine.py	2009-12-28 21:18:49 UTC (rev 1351)
+++ trunk/lib/plugins/movie/PluginMovieAllocine.py	2009-12-28 21:46:53 UTC (rev 1352)
@@ -23,7 +23,8 @@
 
 import gutils
 import movie
-import string, re
+import string
+import re
 
 plugin_name         = "Allocine"
 plugin_description  = "Internet Movie Database"
@@ -33,7 +34,10 @@
 plugin_author_email = ""
 plugin_version      = "0.7"
 
+
 class Plugin(movie.Movie):
+    replace_tabs = re.compile('[\t\r\n]', re.M)
+
     def __init__(self, id):
         self.movie_id = id
         self.url      = "http://www.allocine.fr/film/fichefilm_gen_cfilm=%s.html" % str(self.movie_id)
@@ -52,9 +56,8 @@
                 break
 
     def get_o_title(self):
-        self.o_title = ""
-        self.o_title = gutils.trim(self.page,"Titre original : <i>","</i>")
-        if (self.o_title==''):
+        self.o_title = gutils.trim(self.page, "Titre original : <i>", "</i>")
+        if (self.o_title == ''):
             self.o_title = re.sub('[(][0-9]+[)]', '', string.replace(gutils.trim(self.page, '<title>', '</title>'), u' - AlloCin?', ''))
 
     def get_title(self):
@@ -72,11 +75,11 @@
     def get_runtime(self):
         self.runtime = gutils.clean(gutils.trim(self.page, u'Dur?e :', 'min'))
         if self.runtime:
-            self.runtime = str (int(gutils.before(self.runtime,"h"))*60 + int(gutils.after(self.runtime,"h")))
+            self.runtime = str(int(gutils.before(self.runtime, "h")) * 60 + int(gutils.after(self.runtime, "h")))
 
     def get_genre(self):
-        self.genre = gutils.trim(self.page, 'Genre : ', '</a')
-        self.genre = gutils.strip_tags(self.genre)
+        self.genre = gutils.regextrim(self.page, 'Genre : ', '</a>[^,]')
+        self.genre = string.replace(self.replace_tabs.sub('', gutils.clean(self.genre)), ',', ', ')
 
     def get_cast(self):
         self.cast = ""
@@ -84,9 +87,14 @@
         parts = string.split(casts, 'href="/personne/fichepersonne_gen_cpersonne=')
         for index in range(1, len(parts), 1):
             character = gutils.clean(gutils.trim(parts[index], 'R?le :', '<'))
+            if not character:
+                character = gutils.clean(gutils.trim(parts[index - 1], '<td>', '</td>'))
             actor = gutils.clean(gutils.trim(parts[index], '>', '<'))
             if actor:
-                self.cast = self.cast + actor + _(' as ') + character + '\n'
+                if character:
+                    self.cast = self.cast + actor + _(' as ') + character + '\n'
+                else:
+                    self.cast = self.cast + actor + '\n'
 
     def get_classification(self):
         self.classification = ""
@@ -111,7 +119,7 @@
         self.rating = gutils.trim(self.rating, 'class="stareval n', ' ')
         if self.rating:
             try:
-                self.rating = str(round(float(int(self.rating)*.225)))
+                self.rating = str(round(float(int(self.rating) * .225)))
             except:
                 self.rating = 0
 
@@ -121,6 +129,7 @@
     def get_cameraman(self):
         self.cameraman = gutils.clean(gutils.trim(self.page_cast, 'Directeur de la photographie', '</tr>'))
 
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
@@ -128,7 +137,7 @@
         self.translated_url_search = "http://www.allocine.fr/recherche/?q="
         self.encode                = 'utf-8'
 
-    def search(self,parent_window):
+    def search(self, parent_window):
         if not self.open_search(parent_window):
             return None
         self.sub_search()
@@ -139,7 +148,7 @@
 
     def get_searches(self):
         elements = string.split(self.page, '<a href=\'/film/fichefilm_gen_cfilm=')
-        if (elements[0]<>''):
+        if (elements[0] <> ''):
             for index in range(1, len(elements), 1):
                 element = elements[index]
                 title = gutils.clean(gutils.convert_entities(gutils.trim(element, '>', '</a>')))
@@ -151,9 +160,12 @@
                     else:
                         self.titles.append(title)
 
+
 #
 # Plugin Test
 #
+
+
 class SearchPluginTest(SearchPlugin):
     #
     # Configuration for automated tests:
@@ -163,6 +175,7 @@
         'Le Prix ? payer' : [ 4, 4 ],
     }
 
+
 class PluginTest:
     #
     # Configuration for automated tests:
@@ -201,4 +214,39 @@
             'screenplay'          : u'Alexandra Lecl?re',
             'barcode'             : False
         },
+        '309' : { 
+            'title'               : u'Terminator',
+            'o_title'             : u'Terminator',
+            'director'            : u'James Cameron',
+            'plot'                : True,
+            'cast'                : u'Arnold Schwarzenegger' + _(' as ') + 'le Terminator\n\
+Michael Biehn' + _(' as ') + 'Kyle Reese\n\
+Linda Hamilton' + _(' as ') + 'Sarah Connor\n\
+Lance Henriksen' + _(' as ') + 'l\'inspecteur Vukovich\n\
+Paul Winfield' + _(' as ') + 'le lieutenant Ed Traxler\n\
+Bess Motta' + _(' as ') + 'Ginger Ventura\n\
+Rick Rossovich' + _(' as ') + 'Matt Buchanan\n\
+Earl Boen' + _(' as ') + 'le Dr Peter Silberman\n\
+Dick Miller' + _(' as ') + 'le marchand d\'armes\n\
+Shawn Schepps' + _(' as ') + 'Nancy\n\
+Bill Paxton' + _(' as ') + 'le chef des punks\n\
+Brian Thompson' + _(' as ') + 'un punk\n\
+Marianne Muellerleile' + _(' as ') + 'la \'mauvaise\' Sarah Connor\n\
+Franco Columbu' + _(' as ') + 'le Terminator infiltrant le bunker dans le futur',
+            'country'             : u'am?ricain',
+            'genre'               : u'Science fiction, Thriller',
+            'classification'      : False,
+            'studio'              : False,
+            'o_site'              : False,
+            'site'                : 'http://www.allocine.fr/film/fichefilm_gen_cfilm=309.html',
+            'trailer'             : 'http://www.allocine.fr/film/video_gen_cfilm=309.html',
+            'year'                : 1984,
+            'notes'               : False,
+            'runtime'             : 108,
+            'image'               : True,
+            'rating'              : 8,
+            'cameraman'           : u'Adam Greenberg',
+            'screenplay'          : u'James Cameron',
+            'barcode'             : False
+        },
     }



