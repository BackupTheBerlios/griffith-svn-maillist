From filosottile at mail.berlios.de  Sat Apr 23 01:11:37 2011
From: filosottile at mail.berlios.de (filosottile at mail.berlios.de)
Date: Sat, 23 Apr 2011 01:11:37 +0200
Subject: [Griffith-svn] r1541 - in trunk: i18n/it/LC_MESSAGES
	lib/plugins/movie po
Message-ID: <20110422231138.53561481490@sheep.berlios.de>

Author: filosottile
Date: 2011-04-23 01:11:37 +0200 (Sat, 23 Apr 2011)
New Revision: 1541

Modified:
   trunk/i18n/it/LC_MESSAGES/griffith.mo
   trunk/lib/plugins/movie/PluginMovieCSFD.py
   trunk/lib/plugins/movie/PluginMovieIMDB-it.py
   trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py
   trunk/po/it.po
Log:
New CSFD plugin by Kamil Hanus; minor fixes in IMDB-it and MyMoviesIt; typo in it.po

Modified: trunk/i18n/it/LC_MESSAGES/griffith.mo
===================================================================
(Binary files differ)

Modified: trunk/lib/plugins/movie/PluginMovieCSFD.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCSFD.py	2011-03-20 15:53:55 UTC (rev 1540)
+++ trunk/lib/plugins/movie/PluginMovieCSFD.py	2011-04-22 23:11:37 UTC (rev 1541)
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-__revision__ = '$Id: PluginMovieCSFD.py 12 2007-01-05 09:08:06Z blondak $'
-# Copyright (c) 2005 Blondak
+__revision__ = '$Id: PluginMovieCSFD.py 12 2011-05-22 08:37:14Z KamilHanus $'
+# Copyright (c) 2011 Kamil Hanus
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -19,6 +19,7 @@
 # You may use and distribute this software under the terms of the
 # GNU General Public License, version 2 or later
 
+from gettext import gettext as _
 import gutils
 import movie,string
 import re
@@ -27,36 +28,31 @@
 plugin_description = "Cesko-Slovenska Filmova Databaze"
 plugin_url = "www.csfd.cz"
 plugin_language = _("Czech")
-plugin_author = "Blondak"
-plugin_author_email = "<blondak at neser.cz>"
-plugin_version = '0.9'
+plugin_author = "Kamil Hanus"
+plugin_author_email = "<kamilhanus at gmail.com>"
+plugin_version = '1.1'
 
 class Plugin(movie.Movie):
     def __init__(self, id):
         self.movie_id = id
         self.encode = "utf-8"
-        self.url = "http://www.csfd.cz/"+str(id)
+        self.url = "http://www.csfd.cz"+str(id)
 
     def get_image(self):
-        self.image_url = re.search(r"background=\"http://img.csfd.cz/posters/([^\"]*)\"",self.page)
+        self.image_url = re.search(r"content=\"http://img.csfd.cz/posters/([^\"]*)\"",self.page)
         if self.image_url:
             self.image_url = "http://img.csfd.cz/posters/" + gutils.strip_tags(self.image_url.group(1))
         else:
             self.image_url = ""
 
-    def get_o_title(self):
-        self.o_title = re.findall(r"/images/flag_[\d]+\.gif'[^>]*></td><td>([^<]*)",self.page)
-        if len(self.o_title)>0:
-            self.o_title = self.o_title[len(self.o_title)-1]
-        else:
-            self.o_title = ""
-        if self.o_title == "":
-            self.o_title = self.get_title(True)
 
     def get_title(self, ret=False):
-        data = re.search(r"<title>CSFD.cz - ([^,]*)\(\d{4}\)",self.page)
+        data = re.search(r'<title>*>([^>]*)',self.page)
         if data:
-            data = data.group(1)
+            if len(data.group(1).split("/")) == 2:
+		data = data.group(1).split(" | ")[0][:-7]
+	    else:
+		data = data.group(1).split(" / ")[0]
         else:
             data = ""
         if ret is True:
@@ -64,56 +60,104 @@
         else:
             self.title = data
 
-    def get_director(self):
-        self.director = re.search(r"ie:(.*)<br><b>Hraj", self.page)
-        if self.director:
-            self.director = gutils.strip_tags(self.director.group(1))
+
+    def get_o_title(self):
+        self.o_title = re.findall(r'/images/flags/flag_[\d]+.gif"[^<]*>([^/]*)',self.page)
+        if len(self.o_title)>0:
+            self.o_title = self.o_title[0]
+	    self.o_title = self.o_title[11:-1]
         else:
-            self.director = ""
+            self.o_title = ""
+        if self.o_title == "":
+            self.o_title = self.get_title(True)
 
+
+
+    def get_director(self):
+	a=re.sub("\t", "", self.page)
+	a=re.sub("\n", "", a)
+	try:
+	    b = re.search(r'data-truncate="60">(.*)</span></div><div>',a).group()
+	    b = re.search(r"<a(.*)</span", b).group()[:-6]
+	    b = b.split(",")
+
+	    self.director=""
+	    for i in b:
+	        self.director=self.director + ", "+i[:-4].split(">")[-1]
+	    if self.director[0] == ",":
+	        self.director=self.director[2:]
+	except:
+	    self.director=""
+	if self.director=="":
+	    try:
+		b = re.search(r'data-truncate="60">(.*)</a></span></div>',a).group()
+
+		b = re.search(r"<a(.*)</span", b).group()[:-6]
+		b = b.split(",")
+
+		self.director=""
+	        for i in b:
+	            self.director=self.director + ", "+i[:-4].split(">")[-1]
+	        if self.director[0] == ",":
+	            self.director=self.director[2:]
+	    except:
+		self.director=""
+
+
     def get_year(self):
-        self.year = re.search(r"<title>.*\(([\d]+)\)", self.page)
+        self.year = re.search(r'<p class="origin"[^<]*>([^>]*)', self.page)
         if self.year:
-            self.year = self.year.group(1)
+            self.year = self.year.group()[18:-7].split(", ")[-2]
         else:
             self.year = ""
 
     def get_runtime(self):
-        self.runtime = re.search(r"([\d]+) min</b><BR><BR><b>Re", self.page)
+        self.runtime = re.search(r'<p class="origin"[^<]*>([^>]*)', self.page)
         if self.runtime:
-            self.runtime = gutils.strip_tags(self.runtime.group(1))
+	    self.runtime = self.runtime.group()[18:-7].split(", ")[-1]
+
         else:
             self.runtime = ""
 
     def get_genre(self):
-        self.genre = re.search(r"/images/flag_[\d]+.gif.*</table>[\s]*<br>[\s]*<b>([^&:]*)&nbsp;<br>",self.page)
-        if self.genre:
-            self.genre = gutils.strip_tags(self.genre.group(1))
-        else:
+	try:
+            self.genre = re.search(r'<p class="genre"[^<]*>([^>]*)',self.page).group()[17:-3]
+        except:
             self.genre = ""
 
     def get_country(self):
-        self.country = re.search(r"/images/flag_[\d]+.gif.*</table>[\s]*<br>[\s]*<b>[^&:]*&nbsp;<br>(.*), [\d]{4}, ",self.page)
+        self.country = re.search(r'<p class="origin"[^<]*>([^>]*)', self.page)
         if self.country:
-            self.country = gutils.strip_tags(self.country.group(1))
+            self.country = self.country.group()[18:-7].split(", ")[0]
         else:
             self.country = ""
 
     def get_cast(self):
-        self.cast = re.search(r"Hraj?: (.*)</div><br>", self.page)
-        if self.cast:
-            self.cast = gutils.strip_tags(self.cast.group(1))
-        else:
-            self.cast = ""
+	a=re.sub("\t", "", self.page)
+	a=re.sub("\n", "", a)
+	try:
+	    b = re.search(r'data-truncate="280">(.*)</span></div></div>',a).group()
+	    b = re.search(r"<a(.*)</span", b).group()[:-6]
+	    b = b.split(",")
+	
+	    self.cast=""
+	    for i in b:
+	        self.cast=self.cast + ", "+i[:-4].split(">")[-1]
+	    if self.cast[0] == ",":
+	        self.cast=self.cast[2:]
+	except:
+	    self.cast=""
 
     def get_plot(self):
-        text = re.search(r"\?text=([\d]*)", self.page)
-        if text:
-            page_content = self.open_page(url=self.url+"?text="+text.group(1))
-            self.plot = gutils.strip_tags(gutils.trim(page_content,"Obsah:","&nbsp;&nbsp;&nbsp;<b><i>("))
-        else:
-            self.plot = gutils.strip_tags(gutils.trim(self.page,"Obsah:","&nbsp;&nbsp;&nbsp;<b><i>("))
 
+	a= re.sub("\t", "", self.page)
+	a= re.sub("\n", "", a)
+	a= re.sub("<BR>", "", a)
+	try:
+            self.plot = re.search(r'ka"([^<]*)',a).group(0)[6:]
+	except:
+	    self.plot = ""
+
     def get_site(self):
         self.site = re.search(r"href=[\"'](http://.*imdb\.com/title/[^\"']*)",self.page)
         if self.site:
@@ -123,24 +167,27 @@
 
     def get_trailer(self):
         self.trailer = re.search(r"<a href=\"([^\"]*)\"[^>]*>trailer<br><img src=\"http://img.csfd.cz/images/new/film/ikona_trailer",self.page)
-        if self.trailer:
-            self.trailer = "http://www.csfd.cz/"+gutils.strip_tags(self.trailer.group(1))
+        try:
+            self.trailer = self.url+"videa"
 
-        else:
+        except:
             self.trailer = ""
 
     def get_rating(self):
-        self.rating = re.search(r"[\s]*([\d]+)%[\s]*</td>",self.page)
+	a= re.sub("\t", "", self.page)
+	a= re.sub("\n", "", a)
+        self.rating = re.search(r"[\s]*([\d]+)%[\s]*</h2>",a).group()[:-6]
+	
         if self.rating:
-            self.rating = str(float(self.rating.group(1))/10)
+            self.rating = str(float(self.rating)/10)
         else:
             self.rating = ""
 
     def get_o_site(self):
-        self.o_site = re.search(r"href=\"([^\"]*)\"[^>]*>www<br><img src=\"http://img.csfd.cz/images/new/film/ikona_www",self.page)
-        if self.o_site:
-            self.o_site = gutils.strip_tags(self.o_site.group(1))
-        else:
+	try:
+            self.o_site = "http://"+re.findall(r'<li><a\ href="http://([^>]*)',self.page)[1][:-36]
+
+        except:
             self.o_site = ""
 
     def get_notes(self):
@@ -155,8 +202,8 @@
 class SearchPlugin(movie.SearchMovie):
     def __init__(self):
         self.encode = "utf-8"
-        self.original_url_search   = "http://www.csfd.cz/search_pg.php?search="
-        self.translated_url_search = "http://www.csfd.cz/search_pg.php?search="
+        self.original_url_search   = "http://www.csfd.cz/hledat/?q="
+        self.translated_url_search = "http://www.csfd.cz/hledat/?q="
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
@@ -175,4 +222,3 @@
                     self.ids.append(item[0])
 #                    self.titles.append(gutils.convert_entities(item[1])+' '+item[2])
                     self.titles.append(item[1]+' '+item[2])
-

Modified: trunk/lib/plugins/movie/PluginMovieIMDB-it.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB-it.py	2011-03-20 15:53:55 UTC (rev 1540)
+++ trunk/lib/plugins/movie/PluginMovieIMDB-it.py	2011-04-22 23:11:37 UTC (rev 1541)
@@ -82,8 +82,8 @@
                     self.plot = self.plot + gutils.strip_tags(gutils.before(element, '</a>')) + '\n\n'
 
     def get_year(self):
-        self.year = gutils.trim(self.o_page, '<a href="/Sections/Years/', '</a>')
-        self.year = gutils.after(self.year, '">')
+        self.year = gutils.trim(self.page, '<title>', '</title>')
+        self.year = gutils.trim(self.year, '(', ')')
 
     def get_runtime(self):
         self.runtime = gutils.trim(self.page, '<h5>Durata:</h5>', ' min')

Modified: trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py	2011-03-20 15:53:55 UTC (rev 1540)
+++ trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py	2011-04-22 23:11:37 UTC (rev 1541)
@@ -111,7 +111,7 @@
         self.country = gutils.trim(self.page[pos+2:], '- ', '  <')
 
     def get_rating(self):
-        rat = gutils.trim(self.page, '<div style="text-align:center; font-size:23px; font-weight:bold; letter-spacing:1px; margin:0px 11px 7px 11px">', '<span style="font-size:11px">/5</span></div>')
+        rat = gutils.trim(self.page, '<div style="text-align:center; font-size:23px; font-weight:bold; letter-spacing:1px; margin:0px 11px 7px 11px"><span class="rating">', '</span><span style="font-size:11px">/5</span></div>')
         if rat != '':
             self.rating = int(round(float(rat.replace(',', '.'))*2, 0))
         else:

Modified: trunk/po/it.po
===================================================================
--- trunk/po/it.po	2011-03-20 15:53:55 UTC (rev 1540)
+++ trunk/po/it.po	2011-04-22 23:11:37 UTC (rev 1541)
@@ -2149,7 +2149,7 @@
 
 #: ../glade/griffith.glade.h:46
 msgid "Create backup"
-msgstr "Creare bacjup"
+msgstr "Creare backup"
 
 #: ../glade/griffith.glade.h:48
 msgid "DVD layers"



From filosottile at mail.berlios.de  Wed Apr 27 21:29:42 2011
From: filosottile at mail.berlios.de (filosottile at mail.berlios.de)
Date: Wed, 27 Apr 2011 21:29:42 +0200
Subject: [Griffith-svn] r1542 - in trunk: . lib/plugins/movie
Message-ID: <20110427192943.1E5FF480D97@sheep.berlios.de>

Author: filosottile
Date: 2011-04-27 21:29:42 +0200 (Wed, 27 Apr 2011)
New Revision: 1542

Added:
   trunk/lib/plugins/movie/PluginMovieInterfilmes.py
Modified:
   trunk/ChangeLog
Log:
New Interfilmes plugin by Elencarlos Soares; updated ChangeLog for last 2 commits

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2011-04-22 23:11:37 UTC (rev 1541)
+++ trunk/ChangeLog	2011-04-27 19:29:42 UTC (rev 1542)
@@ -4,7 +4,14 @@
 ------------------
 (c) 2005-2011  Vasco Nunes, Piotr O?arowski
 
+2011-04-27  Filippo Valsorda
+    * New Interfilmes plugin by Elencarlos Soares
 
+2011-04-22  Filippo Valsorda
+    * New CSFD plugin by Kamil Hanus
+    * Minor fixes in IMDB-it and MyMoviesIt plugins
+    * Fixed a typo in it.po
+
 2011-03-20  Piotr O?arowski
 	* "spellchekcer" typo fixed (thanks to Olivier BOURSIN)
 

Added: trunk/lib/plugins/movie/PluginMovieInterfilmes.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieInterfilmes.py	                        (rev 0)
+++ trunk/lib/plugins/movie/PluginMovieInterfilmes.py	2011-04-27 19:29:42 UTC (rev 1542)
@@ -0,0 +1,146 @@
+# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id: PluginMovieE-Pipoca.py 1467 2010-10-14 18:16:49Z mikej06 $'
+
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr O?arowski
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+# Updated on 04/29/2007 by Djohnson "Joe" Lima
+# joe1310 at terra.com.br - S?o Paulo/Brasil
+
+
+import gutils
+import movie
+import string
+
+plugin_name         = "Interfilmes"
+plugin_description  = "Interfilmes Brasil"
+plugin_url          = "www.interfilmes.com"
+plugin_language     = _("Brazilian Portuguese")
+plugin_author       = "Elencarlos Soares"
+plugin_author_email = "<elencarlos at gmail.com>"
+plugin_version      = "0.3"
+
+class Plugin(movie.Movie):
+
+    def __init__(self, id):
+        self.encode   = 'iso-8859-1'
+        self.movie_id = id
+        self.url      = "http://www.interfilmes.com/filme_" + str(self.movie_id) + "_.html"
+        print(self.url)
+
+    def get_image(self):
+        """Finds the film's poster image"""
+        tmp_pic = gutils.trim(self.page, "content=\"http://www.interfilmes.com/FILMES/", "\"")
+        self.image_url = "http://www.interfilmes.com/FILMES/" + tmp_pic
+        print(self.image_url)
+
+    def get_o_title(self):
+        self.o_title = string.capwords(gutils.trim(self.page, "<u>T?tulo Original:</u>&nbsp;", "<br>"))
+        print(self.o_title)
+        
+    def get_title(self):
+        self.title = gutils.trim(self.page, "<u>T?tulo no Brasil:</u>&nbsp;", "<br><u>")
+        print(self.title)
+
+    def get_director(self):
+        self.director = gutils.strip_tags(gutils.trim(self.page, "<u>Dire??o:</u>&nbsp;", "<br></font>"))
+        print(self.director)
+
+    def get_plot(self):
+        self.plot = gutils.trim(self.page, "<div align=\"justify\">", "</div>")
+        print(self.plot)
+
+    def get_year(self):
+        self.year = gutils.trim(self.page, "<u>Ano de Lan?amento:</u>&nbsp;", "<br>")
+
+    def get_runtime(self):
+        "Find the film's running time"
+        self.runtime = gutils.trim(self.page, "<u>Tempo de Dura??o:</u>", " minutos<br>")
+        print(self.runtime)
+        self.runtime = self.runtime[4:]
+        print(self.runtime)
+
+    def get_genre(self):
+        self.genre = gutils.trim(self.page, "nero:</u>&nbsp;", "<br>")
+
+    def get_cast(self):
+        self.cast = ""
+
+    def get_classification(self):
+        self.classification = ""
+
+    def get_studio(self):
+        self.studio = gutils.trim(self.page, "<u>Est?dio/Distrib.:</u>&nbsp;", "<br>")
+
+    def get_o_site(self):
+        self.o_site = ""
+
+    def get_site(self):
+        tmp_site = gutils.trim(self.page, "content=\"http://www.interfilmes.com/filme_", "\"")
+        self.site = "http://www.interfilmes.com/filme_" + tmp_site
+        print(self.site)
+
+    def get_trailer(self):        
+        self.trailer = ""
+            
+    def get_country(self):  
+        self.country = gutils.trim(self.page, "<u>Pa?s de Origem:</u>&nbsp;", "<br>")
+
+    def get_rating(self):
+        self.rating = ""
+
+    def get_screenplay(self):
+        self.screenplay = ""
+
+    def get_cameraman(self):
+        self.cameraman = ""
+
+class SearchPlugin(movie.SearchMovie):
+    def __init__(self):
+        self.original_url_search = "http://interfilmes.com/busca.%s.html"
+        self.translated_url_search = self.original_url_search
+        self.encode = 'iso-8859-1'        
+        
+    def search(self, parent_window):
+	    
+        if not self.open_search(parent_window):
+            return None
+        self.sub_search()
+        return self.page
+
+    def sub_search(self):
+        "Isolating just a portion (with the data we want) of the results"
+        self.page = gutils.trim(self.page, "<td bgcolor=#DEFEE6 width=100% height=1 colspan=3>", "</tr></table>    </td>")
+
+    def get_searches(self):
+
+        elements = string.split(self.page, "<td width=100% height=18")
+        self.number_results = elements[-1]
+
+        if (elements[0] != ''):
+            for element in elements:
+                print (gutils.trim(element, "align=center valign=top><a href=\"filme_", "_"))
+                self.ids.append(gutils.trim(element, "align=center valign=top><a href=\"filme_", "_"))
+                print(gutils.strip_tags(gutils.trim(element, "<font color=#FFFFFF face=Verdana size=2>", "</font></a></b></td>")+' - '+gutils.trim(element, "Ano de Lan?amento:", "<br>")))
+                self.titles.append(gutils.strip_tags(gutils.trim(element, "<font color=#FFFFFF face=Verdana size=2>", "</font></a></b></td>")+' - '+gutils.trim(element, "Ano de Lan?amento:", "<br>")))
+        else:
+            self.number_results = 0
+
+			



