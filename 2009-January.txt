From mikej06 at mail.berlios.de  Fri Jan  2 22:52:11 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Fri, 2 Jan 2009 22:52:11 +0100
Subject: [Griffith-svn] r1109 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901022152.n02LqBTw015772@sheep.berlios.de>

Author: mikej06
Date: 2009-01-02 22:51:49 +0100 (Fri, 02 Jan 2009)
New Revision: 1109

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMoviePTGate.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMoviePTGate.py
Log:
PTGate movie plugin updated

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2008-12-27 22:32:44 UTC (rev 1108)
+++ branches/0.9.x/ChangeLog	2009-01-02 21:51:49 UTC (rev 1109)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O??arowski
 
 
+2009-01-02  Michael Jahn
+	* PTGate movie plugin updated
+
 ---- 0.9.9 ----
 
 2008-12-26  Piotr O??arowski

Modified: branches/0.9.x/lib/plugins/movie/PluginMoviePTGate.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMoviePTGate.py	2008-12-27 22:32:44 UTC (rev 1108)
+++ branches/0.9.x/lib/plugins/movie/PluginMoviePTGate.py	2009-01-02 21:51:49 UTC (rev 1109)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2007 Vasco Nunes, Piotr Ozarowski
+# Copyright (c) 2005-2008 Vasco Nunes, Piotr Ozarowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -24,109 +24,129 @@
 import gutils
 import movie
 import string
+import re
 
-plugin_name = "PTGate"
-plugin_description = "Cinema PTGate"
-plugin_url = "www.cinema.ptgate.pt"
-plugin_language = _("Portuguese")
-plugin_author = "Vasco Nunes"
-plugin_author_email="<vasco.m.nunes at gmail.com>"
-plugin_version = "0.4.1"
+plugin_name         = "PTGate"
+plugin_description  = "Cinema PTGate"
+plugin_url          = "cinema.ptgate.pt"
+plugin_language     = _("Portuguese")
+plugin_author       = "Vasco Nunes"
+plugin_author_email = "<vasco.m.nunes at gmail.com>"
+plugin_version      = "0.5"
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode='iso-8859-1'
+		self.encode   ='iso-8859-1'
 		self.movie_id = id
-		self.url = "http://cinema.ptgate.pt/filme.php?code=" + str(self.movie_id)
+		self.url      = "http://cinema.ptgate.pt/filmes/" + str(self.movie_id)
 
+	def initialize(self):
+		self.page = gutils.convert_entities(self.page.decode(self.encode))
+		self.page = self.page.replace(u'\x93', u'"')
+		self.page = self.page.replace(u'\x94', u'"')
+		self.page = self.page.replace(u'\x96', u'-')
+
 	def get_image(self):
-		self.image_url = "http://cinema.ptgate.pt/Movies/" + str(self.movie_id)+".jpg"
+		self.image_url = 'http://cinema.ptgate.pt/Movies/' + str(self.movie_id) + '.jpg'
 
 	def get_o_title(self):
-		self.o_title = string.capwords(gutils.trim(self.page,"<b class=title>","</b><br>") )
+		self.o_title = gutils.trim(gutils.after(self.page, u'<h2>'), u'???', u'<br />') # <--  &#8250;
+		self.o_title = self.o_title.encode(self.encode)
 
 	def get_title(self):
-		self.title = string.capwords(gutils.trim(self.page,"class=subtitle>","</b><br>") )
+		self.title = gutils.trim(self.page, u'<h2>', u'</h2>')
+		self.title = self.title.encode(self.encode)
 
 	def get_director(self):
-		self.director = gutils.trim(self.page,"<b>realiza????o</b><br>","<br><br><b>")
+		self.director = gutils.trim(self.page, u'<b>realiza????o</b><br />', u'<br />')
+		self.director = self.director.encode(self.encode)
 
 	def get_plot(self):
-		self.plot = gutils.trim(self.page,"<b>sinopse</b><br>","<br><br>")
-		self.plot = string.replace(self.plot,"'","\"")
-		self.plot = string.replace(self.plot,"'","\"")
+		self.plot = gutils.trim(self.page, u'<b>sinopse</b><br />', u'<br />')
+		self.plot = self.plot.encode(self.encode)
+		self.plot = string.replace(self.plot, "'", "\"")
+		self.plot = string.replace(self.plot, "'", "\"")
 
 	def get_year(self):
-		self.year = gutils.trim(self.page,"<br><b>ano</b><br>","<br><br><b>pa")
+		self.year = gutils.trim(self.page, u'<b>ano</b>: ', u'<br />')
 
 	def get_runtime(self):
-		self.runtime = ""
+		self.runtime = ''
 
 	def get_genre(self):
-		self.genre = gutils.trim(self.page,"nero</b><br>","<br><br><b>realiza")
-		self.genre = string.replace(self.genre," | ",", ")
+		self.genre = gutils.trim(self.page, u'<b>g??nero</b>: ', u'<br />')
+		self.genre = self.genre.encode(self.encode)
 
 	def get_cast(self):
-		self.cast = ""
-		self.cast = gutils.trim(self.page,"pretes</b><br>","<br><br><b>data de estreia</b><br>")
-		self.cast = string.replace(self.cast,"<br> ","\n")
-		self.cast = string.replace(self.cast,"<br>", "\n")
+		self.cast = gutils.trim(self.page, u'pretes</b><br />', u'<br />')
 		self.cast = gutils.strip_tags(self.cast)
+		self.cast = string.replace(self.cast, ', ', '\n')
 
 	def get_classification(self):
-		self.classification = ""
+		self.classification = ''
 
 	def get_studio(self):
-		self.studio = ""
+		self.studio = ''
 
 	def get_o_site(self):
-		self.o_site = gutils.trim(self.page,"tio oficial</b><br><a class=external href='", "'>")
+		self.o_site = ''
+		tmp = string.find(self.page, u'(site oficial)')
+		if tmp >= 0:
+			index = string.rfind(self.page[:tmp], u'<a href="')
+			if index >= 0:
+				self.o_site = gutils.before(self.page[index + 9:], '"')
 
 	def get_site(self):
-		self.site = gutils.trim(self.page,"<br><b>imdb</b><br><a class=external href='", "'>www.imdb.com")
+		self.site = ''
+		tmp = string.find(self.page, u'www.imdb.com/title/')
+		if tmp >= 0:
+			self.site = u'http://www.imdb.com/title/' + gutils.before(self.page[tmp:], '"')
 
 	def get_trailer(self):
-		self.trailer = gutils.trim(self.page,"trailer</b><br><a class=external href='", "'>visionar")
+		self.trailer = ''
+		tmp = string.find(self.page, u'(trailers)')
+		if tmp >= 0:
+			index = string.rfind(self.page[:tmp], u'<a href="')
+			if index >= 0:
+				self.trailer = gutils.before(self.page[index + 9:], '"')
 
 	def get_country(self):
-		self.country = gutils.trim(self.page,"s</b><br>","<br><br><b>g")
+		self.country = gutils.trim(self.page, u'<b>pa??s</b>: ', '<br />')
+		self.country = self.country.encode(self.encode)
 		
 	def get_notes(self):
-		self.notes = gutils.trim(self.page,"pr??mios e nomea????es</b><br><b>", "<td width=6 background='Images/group_r.gif'")
+		self.notes = gutils.trim(self.page,"pr??mios e nomea????es</b><br /><b>", "<td width=6 background='Images/group_r.gif'")
 		self.notes = gutils.strip_tags(self.notes)
 
 	def get_rating(self):
-		tmp=gutils.trim(self.page,"'Images/mstar",".gif")
-		if(tmp):
-			self.rating = float(tmp)
-			if (self.rating>10):
-				self.rating = int(self.rating/10)
-				self.rating = self.rating*2
+		tmp = re.findall('[0-9.]+', string.replace(gutils.clean('<' + gutils.trim(self.page, u'imgs/blank.gif"', u'</small>')), u'&nbsp;', ''))
+		if tmp and len(tmp) > 0:
+			self.rating = float(tmp[0])
+			if self.rating:
+				self.rating = round(self.rating * 2)
 		else:
-			self.rating=""
+			self.rating = ''
 
 class SearchPlugin(movie.SearchMovie):
 	def __init__(self):
-		self.original_url_search	= "http://cinema.ptgate.pt/pesquisa-filme.php?titulo="
-		self.translated_url_search	= "http://cinema.ptgate.pt/pesquisa-filme.php?titulo="
-		self.encode='iso-8859-1'
+		self.original_url_search   = 'http://cinema.ptgate.pt/pesquisa/?q='
+		self.translated_url_search = 'http://cinema.ptgate.pt/pesquisa/?q='
+		self.encode                = 'iso-8859-1'
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
-		self.sub_search()
 		return self.page
 
-	def sub_search(self):
-		self.page = gutils.trim(self.page,"<!-- DISPLAY RESULTS -->", "<!-- /DISPLAY RESULTS -->")
-
 	def get_searches(self):
-		elements = string.split(self.page,"</td><td>")
+		elements = string.split(self.page, '<a href="/filmes/')
 		self.number_results = elements[-1]
 
-		if (len(elements[0])):
+		if len(elements[0]):
 			for element in elements:
-				element = string.replace(element,"</a>","")
-				self.ids.append(gutils.trim(element,"?code=","'>"))
-				self.titles.append(gutils.convert_entities(gutils.trim(element,"'>","</td><td width=6")))
+				id = gutils.digits_only(gutils.before(element, '"'))
+				title = gutils.clean(re.sub('</div>.*', '', string.replace(gutils.before(gutils.after(element, '>'), '</small>'), '<small>', ' / ')))
+				if id and title and title[0] != '<':
+					self.ids.append(id)
+					self.titles.append(gutils.convert_entities(title))
 		else:
 			self.number_results = 0

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2008-12-27 22:32:44 UTC (rev 1108)
+++ trunk/ChangeLog	2009-01-02 21:51:49 UTC (rev 1109)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O??arowski
 
 
+2009-01-02  Michael Jahn
+	* PTGate movie plugin updated
+
 2008-12-25  Michael Jahn
 	* [#309373] export to pdf
 	* Cinematografo movie plugin updated

Modified: trunk/lib/plugins/movie/PluginMoviePTGate.py
===================================================================
--- trunk/lib/plugins/movie/PluginMoviePTGate.py	2008-12-27 22:32:44 UTC (rev 1108)
+++ trunk/lib/plugins/movie/PluginMoviePTGate.py	2009-01-02 21:51:49 UTC (rev 1109)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2007 Vasco Nunes, Piotr Ozarowski
+# Copyright (c) 2005-2008 Vasco Nunes, Piotr Ozarowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -24,110 +24,129 @@
 import gutils
 import movie
 import string
+import re
 
-plugin_name = "PTGate"
-plugin_description = "Cinema PTGate"
-plugin_url = "www.cinema.ptgate.pt"
-plugin_language = _("Portuguese")
-plugin_author = "Vasco Nunes"
-plugin_author_email="<vasco.m.nunes at gmail.com>"
-plugin_version = "0.4.1"
+plugin_name         = "PTGate"
+plugin_description  = "Cinema PTGate"
+plugin_url          = "cinema.ptgate.pt"
+plugin_language     = _("Portuguese")
+plugin_author       = "Vasco Nunes"
+plugin_author_email = "<vasco.m.nunes at gmail.com>"
+plugin_version      = "0.5"
 
 class Plugin(movie.Movie):
     def __init__(self, id):
-        self.encode='iso-8859-1'
+        self.encode   ='iso-8859-1'
         self.movie_id = id
-        self.url = "http://cinema.ptgate.pt/filme.php?code=" + str(self.movie_id)
+        self.url      = "http://cinema.ptgate.pt/filmes/" + str(self.movie_id)
 
+    def initialize(self):
+        self.page = gutils.convert_entities(self.page)
+        self.page = self.page.replace(u'\x93', u'"')
+        self.page = self.page.replace(u'\x94', u'"')
+        self.page = self.page.replace(u'\x96', u'-')
+
     def get_image(self):
-        self.image_url = "http://cinema.ptgate.pt/Movies/" + str(self.movie_id)+".jpg"
+        self.image_url = 'http://cinema.ptgate.pt/Movies/' + str(self.movie_id) + '.jpg'
 
     def get_o_title(self):
-        self.o_title = string.capwords(gutils.trim(self.page,"<b class=title>","</b><br>") )
+        self.o_title = gutils.trim(gutils.after(self.page, u'<h2>'), u'???', u'<br />') # <--  &#8250;
+        self.o_title = self.o_title.encode(self.encode)
 
     def get_title(self):
-        self.title = string.capwords(gutils.trim(self.page,"class=subtitle>","</b><br>") )
+        self.title = gutils.trim(self.page, u'<h2>', u'</h2>')
+        self.title = self.title.encode(self.encode)
 
     def get_director(self):
-        self.director = gutils.trim(self.page,"<b>realiza??o</b><br>","<br><br><b>")
+        self.director = gutils.trim(self.page, u'<b>realiza????o</b><br />', u'<br />')
+        self.director = self.director.encode(self.encode)
 
     def get_plot(self):
-        self.plot = gutils.trim(self.page,"<b>sinopse</b><br>","<br><br>")
-        self.plot = string.replace(self.plot,"'","\"")
-        self.plot = string.replace(self.plot,"'","\"")
+        self.plot = gutils.trim(self.page, u'<b>sinopse</b><br />', u'<br />')
+        self.plot = self.plot.encode(self.encode)
+        self.plot = string.replace(self.plot, "'", "\"")
+        self.plot = string.replace(self.plot, "'", "\"")
 
     def get_year(self):
-        self.year = gutils.trim(self.page,"<br><b>ano</b><br>","<br><br><b>pa")
+        self.year = gutils.trim(self.page, u'<b>ano</b>: ', u'<br />')
 
     def get_runtime(self):
-        self.runtime = ""
+        self.runtime = ''
 
     def get_genre(self):
-        self.genre = gutils.trim(self.page,"nero</b><br>","<br><br><b>realiza")
-        self.genre = string.replace(self.genre," | ",", ")
+        self.genre = gutils.trim(self.page, u'<b>g??nero</b>: ', u'<br />')
+        self.genre = self.genre.encode(self.encode)
 
     def get_cast(self):
-        self.cast = ""
-        self.cast = gutils.trim(self.page,"pretes</b><br>","<br><br><b>data de estreia</b><br>")
-        self.cast = string.replace(self.cast,"<br> ","\n")
-        self.cast = string.replace(self.cast,"<br>", "\n")
+        self.cast = gutils.trim(self.page, u'pretes</b><br />', u'<br />')
         self.cast = gutils.strip_tags(self.cast)
+        self.cast = string.replace(self.cast, ', ', '\n')
 
     def get_classification(self):
-        self.classification = ""
+        self.classification = ''
 
     def get_studio(self):
-        self.studio = ""
+        self.studio = ''
 
     def get_o_site(self):
-        self.o_site = gutils.trim(self.page,"tio oficial</b><br><a class=external href='", "'>")
+        self.o_site = ''
+        tmp = string.find(self.page, u'(site oficial)')
+        if tmp >= 0:
+            index = string.rfind(self.page[:tmp], u'<a href="')
+            if index >= 0:
+                self.o_site = gutils.before(self.page[index + 9:], '"')
 
     def get_site(self):
-        self.site = gutils.trim(self.page,"<br><b>imdb</b><br><a class=external href='", "'>www.imdb.com")
+        self.site = ''
+        tmp = string.find(self.page, u'www.imdb.com/title/')
+        if tmp >= 0:
+            self.site = u'http://www.imdb.com/title/' + gutils.before(self.page[tmp:], '"')
 
     def get_trailer(self):
-        self.trailer = gutils.trim(self.page,"trailer</b><br><a class=external href='", "'>visionar")
+        self.trailer = ''
+        tmp = string.find(self.page, u'(trailers)')
+        if tmp >= 0:
+            index = string.rfind(self.page[:tmp], u'<a href="')
+            if index >= 0:
+                self.trailer = gutils.before(self.page[index + 9:], '"')
 
     def get_country(self):
-        self.country = gutils.trim(self.page,"s</b><br>","<br><br><b>g")
+        self.country = gutils.trim(self.page, u'<b>pa??s</b>: ', '<br />')
+        self.country = self.country.encode(self.encode)
         
     def get_notes(self):
-        self.notes = gutils.trim(self.page,"pr?mios e nomea??es</b><br><b>", "<td width=6 background='Images/group_r.gif'")
+        self.notes = gutils.trim(self.page,"pr??mios e nomea????es</b><br /><b>", "<td width=6 background='Images/group_r.gif'")
         self.notes = gutils.strip_tags(self.notes)
 
     def get_rating(self):
-        tmp=gutils.trim(self.page,"'Images/mstar",".gif")
-        if(tmp):
-            self.rating = float(tmp)
-            if (self.rating>10):
-                self.rating = int(self.rating/10)
-                self.rating = self.rating*2
+        tmp = re.findall('[0-9.]+', string.replace(gutils.clean('<' + gutils.trim(self.page, u'imgs/blank.gif"', u'</small>')), u'&nbsp;', ''))
+        if tmp and len(tmp) > 0:
+            self.rating = float(tmp[0])
+            if self.rating:
+                self.rating = round(self.rating * 2)
         else:
-            self.rating=""
+            self.rating = ''
 
 class SearchPlugin(movie.SearchMovie):
     def __init__(self):
-        self.original_url_search    = "http://cinema.ptgate.pt/pesquisa-filme.php?titulo="
-        self.translated_url_search    = "http://cinema.ptgate.pt/pesquisa-filme.php?titulo="
-        self.encode='iso-8859-1'
+        self.original_url_search   = 'http://cinema.ptgate.pt/pesquisa/?q='
+        self.translated_url_search = 'http://cinema.ptgate.pt/pesquisa/?q='
+        self.encode                = 'iso-8859-1'
 
     def search(self,parent_window):
-        if not self.open_search(parent_window):
-            return None
-        self.sub_search()
+        self.open_search(parent_window)
         return self.page
 
-    def sub_search(self):
-        self.page = gutils.trim(self.page,"<!-- DISPLAY RESULTS -->", "<!-- /DISPLAY RESULTS -->")
-
     def get_searches(self):
-        elements = string.split(self.page,"</td><td>")
+        elements = string.split(self.page, '<a href="/filmes/')
         self.number_results = elements[-1]
 
-        if (len(elements[0])):
+        if len(elements[0]):
             for element in elements:
-                element = string.replace(element,"</a>","")
-                self.ids.append(gutils.trim(element,"?code=","'>"))
-                self.titles.append(gutils.convert_entities(gutils.trim(element,"'>","</td><td width=6")))
+                id = gutils.digits_only(gutils.before(element, '"'))
+                title = gutils.clean(re.sub('</div>.*', '', string.replace(gutils.before(gutils.after(element, '>'), '</small>'), '<small>', ' / ')))
+                if id and title and title[0] != '<':
+                    self.ids.append(id)
+                    self.titles.append(gutils.convert_entities(title))
         else:
             self.number_results = 0



From mikej06 at mail.berlios.de  Sat Jan  3 21:49:20 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 3 Jan 2009 21:49:20 +0100
Subject: [Griffith-svn] r1110 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901032049.n03KnKCZ027808@sheep.berlios.de>

Author: mikej06
Date: 2009-01-03 21:49:00 +0100 (Sat, 03 Jan 2009)
New Revision: 1110

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
   branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieIMDB-de.py
   trunk/lib/plugins/movie/PluginMovieIMDB.py
Log:
[#313012] correctly round ratings
(for IMDB and IMDB-de)

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-02 21:51:49 UTC (rev 1109)
+++ branches/0.9.x/ChangeLog	2009-01-03 20:49:00 UTC (rev 1110)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-03  Michael Jahn
+	* [#313012] correctly round ratings
+
 2009-01-02  Michael Jahn
 	* PTGate movie plugin updated
 

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-01-02 21:51:49 UTC (rev 1109)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-01-03 20:49:00 UTC (rev 1110)
@@ -156,9 +156,13 @@
 		self.rating = gutils.trim(self.page, '<h5>Nutzer-Bewertung:</h5>', '/10')
 		if self.rating:
 			try:
-				self.rating = str(float(gutils.digits_only(gutils.clean(self.rating))))
+				tmp = re.findall('[0-9.,]+', gutils.clean(self.rating))
+				if tmp and len(tmp) > 0:
+					self.rating = round(float(tmp[0].replace(',', '.')))
 			except:
-				self.rating = ''
+				self.rating = 0
+		else:
+			self.rating = 0
 
 	def get_notes(self):
 		self.notes = ''

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py	2009-01-02 21:51:49 UTC (rev 1109)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py	2009-01-03 20:49:00 UTC (rev 1110)
@@ -126,7 +126,7 @@
 			self.rating = result.groups()[0]
 			if self.rating:
 				try:
-					self.rating = float(self.rating)
+					self.rating = round(float(self.rating), 0)
 				except Exception, e:
 					self.rating = 0
 		else:

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-02 21:51:49 UTC (rev 1109)
+++ trunk/ChangeLog	2009-01-03 20:49:00 UTC (rev 1110)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-03  Michael Jahn
+	* [#313012] correctly round ratings
+
 2009-01-02  Michael Jahn
 	* PTGate movie plugin updated
 

Modified: trunk/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-01-02 21:51:49 UTC (rev 1109)
+++ trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-01-03 20:49:00 UTC (rev 1110)
@@ -156,9 +156,13 @@
         self.rating = gutils.trim(self.page, '<h5>Nutzer-Bewertung:</h5>', '/10')
         if self.rating:
             try:
-                self.rating = str(float(gutils.digits_only(gutils.clean(self.rating))))
+                tmp = re.findall('[0-9.,]+', gutils.clean(self.rating))
+                if tmp and len(tmp) > 0:
+                    self.rating = round(float(tmp[0].replace(',', '.')))
             except:
-                self.rating = ''
+                self.rating = 0
+        else:
+            self.rating = 0
 
     def get_notes(self):
         self.notes = ''

Modified: trunk/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-01-02 21:51:49 UTC (rev 1109)
+++ trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-01-03 20:49:00 UTC (rev 1110)
@@ -126,7 +126,7 @@
             self.rating = result.groups()[0]
             if self.rating:
                 try:
-                    self.rating = float(self.rating)
+                    self.rating = round(float(self.rating), 0)
                 except Exception, e:
                     self.rating = 0
         else:



From piotrek at mail.berlios.de  Sun Jan  4 23:24:49 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sun, 4 Jan 2009 23:24:49 +0100
Subject: [Griffith-svn] r1111 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901042224.n04MOngU032036@sheep.berlios.de>

Author: piotrek
Date: 2009-01-04 23:24:48 +0100 (Sun, 04 Jan 2009)
New Revision: 1111

Added:
   branches/0.9.x/lib/plugins/movie/PluginMovieMyMoviesIt.py
   trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py
Modified:
   branches/0.9.x/ChangeLog
   trunk/ChangeLog
Log:
MyMoviesIt movie plugin added (thanks to Giovanni Sposito)


Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-03 20:49:00 UTC (rev 1110)
+++ branches/0.9.x/ChangeLog	2009-01-04 22:24:48 UTC (rev 1111)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-04  Piotr O?arowski
+	* MyMoviesIt movie plugin added (thanks to Giovanni Sposito)
+
 2009-01-03  Michael Jahn
 	* [#313012] correctly round ratings
 

Added: branches/0.9.x/lib/plugins/movie/PluginMovieMyMoviesIt.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieMyMoviesIt.py	2009-01-03 20:49:00 UTC (rev 1110)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieMyMoviesIt.py	2009-01-04 22:24:48 UTC (rev 1111)
@@ -0,0 +1,196 @@
+# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2007
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from gettext import gettext as _
+import gutils
+import movie
+import string
+import re
+
+plugin_name = "MyMoviesIt"
+plugin_description = "mymovies.it"
+plugin_url = "www.mymovies.it"
+plugin_language = _("Italian")
+plugin_author = "Giovanni Sposito"
+plugin_author_email = "<giovanni.sposito at gmail.com>"
+plugin_version = "0.1"
+
+class Plugin(movie.Movie):
+
+    def __init__(self, id):
+        self.encode = 'iso-8859-1'
+        self.movie_id = id
+        self.url = "http://www.mymovies.it/dizionario/recensione.asp?id=%s" % self.movie_id
+
+    def get_image(self):
+        tmp_image = string.find(self.page, '<img style="border:solid 1px #737373; padding:3px" src="')
+        if tmp_image == -1:
+            self.image_url = ''
+        else:
+            self.image_url = gutils.trim(self.page[tmp_image:], 'src="', '"')
+
+    def get_o_title(self):
+        tmp = gutils.trim(self.page, 'Titolo originale <em>', '</em>')
+        if not tmp:
+            self.o_title = gutils.trim(self.page, '<meta name="titolo_tag" content="', 'titolo_tag_fine')
+        else:
+            self.o_title = tmp
+
+    def get_title(self):
+        self.title = gutils.trim(self.page, '<meta name="titolo_tag" content="', 'titolo_tag_fine')
+
+    def get_director(self):
+        pos_iniziale = string.find(self.page, '<div style="margin:0px" class="linkblu">')
+        self.director = gutils.trim(self.page[pos_iniziale:],'Un film di <a','</a>')
+        self.director = gutils.after(self.director,'>')
+        if not self.director:
+            self.director = gutils.trim(self.page[pos_iniziale:], 'Un film di ', 'Con')
+        if len(self.director) > 25:
+            self.director = gutils.trim(self.page[pos_iniziale:],'Un film di ','<')
+
+    def get_plot(self):
+        self.plot = gutils.trim(self.page,'<p style="text-align:justify;">','</p>')
+
+    def get_year(self):
+        self.year = gutils.trim(self.page,'" href="http://www.mymovies.it/film/?anno=', '"')
+
+    def get_runtime(self):
+        self.runtime = gutils.trim(self.page, 'durata ', ' min.')
+
+    def get_genre(self):
+        self.genre = gutils.trim(self.page, 'document.write(\'"http://ad.it.doubleclick.net/adj/MyMdizionario.it/scheda;genere=', ';')
+
+    def get_cast(self):
+        tmp = string.find(self.page, 'Con <a')
+        self.cast = gutils.trim(self.page[tmp-6:],'Con ','</a>.')
+        self.cast = string.replace(self.cast, ',', '\n')
+
+    def get_classification(self):
+        self.classification = ''
+
+    def get_studio(self):
+        self.studio = ''
+
+    def get_o_site(self):
+        self.o_site = ''
+        #tmp = gutils.trim(self.page, 'http://www.imdb.com', '"')
+        #if tmp != '':
+        #    self.o_site = 'http://www.imdb.com' + tmp
+
+    def get_site(self):
+        self.site = self.url
+
+    def get_trailer(self):
+        tmp = gutils.trim(self.page, '<a title="Trailer', '">Trailer</a></span>')
+        if tmp:
+            self.trailer = re.sub('.*href="', '' ,tmp)
+        else:
+            self.trailer = ''
+
+    def get_country(self):
+        pos = string.find(self.page, ' min.')
+        self.country = gutils.trim(self.page[pos+2:], '- ', '  <')
+
+    def get_rating(self):
+        #posizione della parte intera della votazione TODO: translate it :-)
+        rat = gutils.trim(self.page, '<i>mymonetro</i> ', ',')
+        if rat != '':
+            self.rating = int(rat)
+            #posizione di un'eventuale parte decimale # TODO: see above
+            pos_rating = string.find(self.page, '<i>mymonetro</i> ')
+            pos_rating_dec = gutils.trim(self.page[pos_rating+18:], ',', ' stelle')
+            if pos_rating_dec != '':
+                if int(pos_rating_dec) > 51:
+                    self.rating = self.rating + 1
+        else:
+            self.rating = 0
+
+    def get_notes(self):
+        #self.notes = ''
+        #tmp = gutils.trim(self.page, 'Alt. titel:', '</span>')
+        #if tmp:
+        #    self.notes = self.notes + 'Alt. titel:' + string.strip(gutils.strip_tags(tmp))
+        self.notes = ''
+
+class SearchPlugin(movie.SearchMovie):
+
+    def __init__(self):
+        self.original_url_search = "http://www.mymovies.it/database/ricerca/?q="
+        self.translated_url_search = "http://www.mymovies.it/database/ricerca/?q="
+        self.encode = 'iso-8859-1'
+
+    def search(self,parent_window):
+        self.open_search(parent_window)
+        #self.sub_search()
+        return self.page
+
+    def sub_search(self):
+        self.page = gutils.trim(self.page, "ho trovato i seguenti risultati:", "Altri risultati tra i film con la parola")
+
+    def get_searches(self):
+        elements = string.split(self.page,"<h3 style=\"margin:0px;\">")
+        self.number_results = len(elements) - 1
+
+        if self.number_results > 0:
+            i = 1
+            while i < len(elements):
+                element = gutils.trim(elements[i],"<a","</a>")
+#                print "******* elemento "+str(i)+" **********\n\n\n\n\n"+element+"\n******fine*******\n\n\n\n\n\n"
+#                print "id = "+gutils.trim(element,"recensione.asp?id=","\"")
+#                print "title = "+gutils.convert_entities(gutils.strip_tags(gutils.trim(element,'" title="', '"')))
+
+                self.ids.append(gutils.trim(element,"recensione.asp?id=","\""))
+                self.titles.append(gutils.convert_entities(gutils.strip_tags(gutils.trim(element,'" title="', '"'))))
+                i += 1
+        else:
+            self.number_results = 0
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> expected result count }
+    #
+    test_configuration = {
+        'Rocky Balboa'            : 1
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute should only be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '44566' : {
+            'title'             : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'genre'                : 'Sportivo',
+            'year'                : 2006
+        }
+    }


Property changes on: branches/0.9.x/lib/plugins/movie/PluginMovieMyMoviesIt.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-03 20:49:00 UTC (rev 1110)
+++ trunk/ChangeLog	2009-01-04 22:24:48 UTC (rev 1111)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-04  Piotr O?arowski
+	* MyMoviesIt movie plugin added (thanks to Giovanni Sposito)
+
 2009-01-03  Michael Jahn
 	* [#313012] correctly round ratings
 

Added: trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py	2009-01-03 20:49:00 UTC (rev 1110)
+++ trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py	2009-01-04 22:24:48 UTC (rev 1111)
@@ -0,0 +1,197 @@
+# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2007
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+from gettext import gettext as _
+import gutils
+import movie
+import string
+import re
+
+plugin_name = "MyMoviesIt"
+plugin_description = "mymovies.it"
+plugin_url = "www.mymovies.it"
+plugin_language = _("Italian")
+plugin_author = "Giovanni Sposito"
+plugin_author_email = "<giovanni.sposito at gmail.com>"
+plugin_version = "0.1"
+
+class Plugin(movie.Movie):
+
+    def __init__(self, id):
+        self.encode = 'iso-8859-1'
+        self.movie_id = id
+        self.url = "http://www.mymovies.it/dizionario/recensione.asp?id=%s" % self.movie_id
+
+    def get_image(self):
+        tmp_image = string.find(self.page, '<img style="border:solid 1px #737373; padding:3px" src="')
+        if tmp_image == -1:
+            self.image_url = ''
+        else:
+            self.image_url = gutils.trim(self.page[tmp_image:], 'src="', '"')
+
+    def get_o_title(self):
+        tmp = gutils.trim(self.page, 'Titolo originale <em>', '</em>')
+        if not tmp:
+            self.o_title = gutils.trim(self.page, '<meta name="titolo_tag" content="', 'titolo_tag_fine')
+        else:
+            self.o_title = tmp
+
+    def get_title(self):
+        self.title = gutils.trim(self.page, '<meta name="titolo_tag" content="', 'titolo_tag_fine')
+
+    def get_director(self):
+        pos_iniziale = string.find(self.page, '<div style="margin:0px" class="linkblu">')
+        self.director = gutils.trim(self.page[pos_iniziale:],'Un film di <a','</a>')
+        self.director = gutils.after(self.director,'>')
+        if not self.director:
+            self.director = gutils.trim(self.page[pos_iniziale:], 'Un film di ', 'Con')
+        if len(self.director) > 25:
+            self.director = gutils.trim(self.page[pos_iniziale:],'Un film di ','<')
+
+    def get_plot(self):
+        self.plot = gutils.trim(self.page,'<p style="text-align:justify;">','</p>')
+
+    def get_year(self):
+        self.year = gutils.trim(self.page,'" href="http://www.mymovies.it/film/?anno=', '"')
+
+    def get_runtime(self):
+        self.runtime = gutils.trim(self.page, 'durata ', ' min.')
+
+    def get_genre(self):
+        self.genre = gutils.trim(self.page, 'document.write(\'"http://ad.it.doubleclick.net/adj/MyMdizionario.it/scheda;genere=', ';')
+
+    def get_cast(self):
+        tmp = string.find(self.page, 'Con <a')
+        self.cast = gutils.trim(self.page[tmp-6:],'Con ','</a>.')
+        self.cast = string.replace(self.cast, ',', '\n')
+
+    def get_classification(self):
+        self.classification = ''
+
+    def get_studio(self):
+        self.studio = ''
+
+    def get_o_site(self):
+        self.o_site = ''
+        #tmp = gutils.trim(self.page, 'http://www.imdb.com', '"')
+        #if tmp != '':
+        #    self.o_site = 'http://www.imdb.com' + tmp
+
+    def get_site(self):
+        self.site = self.url
+
+    def get_trailer(self):
+        tmp = gutils.trim(self.page, '<a title="Trailer', '">Trailer</a></span>')
+        if tmp:
+            self.trailer = re.sub('.*href="', '' ,tmp)
+        else:
+            self.trailer = ''
+
+    def get_country(self):
+        pos = string.find(self.page, ' min.')
+        self.country = gutils.trim(self.page[pos+2:], '- ', '  <')
+
+    def get_rating(self):
+        #posizione della parte intera della votazione TODO: translate it :-)
+        rat = gutils.trim(self.page, '<i>mymonetro</i> ', ',')
+        if rat != '':
+            self.rating = int(rat)
+            #posizione di un'eventuale parte decimale # TODO: see above
+            pos_rating = string.find(self.page, '<i>mymonetro</i> ')
+            pos_rating_dec = gutils.trim(self.page[pos_rating+18:], ',', ' stelle')
+            if pos_rating_dec != '':
+                if int(pos_rating_dec) > 51:
+                    self.rating = self.rating + 1
+        else:
+            self.rating = 0
+
+    def get_notes(self):
+        #self.notes = ''
+        #tmp = gutils.trim(self.page, 'Alt. titel:', '</span>')
+        #if tmp:
+        #    self.notes = self.notes + 'Alt. titel:' + string.strip(gutils.strip_tags(tmp))
+        self.notes = ''
+
+class SearchPlugin(movie.SearchMovie):
+
+    def __init__(self):
+        self.original_url_search = "http://www.mymovies.it/database/ricerca/?q="
+        self.translated_url_search = "http://www.mymovies.it/database/ricerca/?q="
+        self.encode = 'iso-8859-1'
+
+    def search(self,parent_window):
+        if not self.open_search(parent_window):
+            return None
+        #self.sub_search()
+        return self.page
+
+    def sub_search(self):
+        self.page = gutils.trim(self.page, "ho trovato i seguenti risultati:", "Altri risultati tra i film con la parola")
+
+    def get_searches(self):
+        elements = string.split(self.page,"<h3 style=\"margin:0px;\">")
+        self.number_results = len(elements) - 1
+
+        if self.number_results > 0:
+            i = 1
+            while i < len(elements):
+                element = gutils.trim(elements[i],"<a","</a>")
+#                print "******* elemento "+str(i)+" **********\n\n\n\n\n"+element+"\n******fine*******\n\n\n\n\n\n"
+#                print "id = "+gutils.trim(element,"recensione.asp?id=","\"")
+#                print "title = "+gutils.convert_entities(gutils.strip_tags(gutils.trim(element,'" title="', '"')))
+
+                self.ids.append(gutils.trim(element,"recensione.asp?id=","\""))
+                self.titles.append(gutils.convert_entities(gutils.strip_tags(gutils.trim(element,'" title="', '"'))))
+                i += 1
+        else:
+            self.number_results = 0
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> expected result count }
+    #
+    test_configuration = {
+        'Rocky Balboa'            : 1
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute should only be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '44566' : {
+            'title'             : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'genre'                : 'Sportivo',
+            'year'                : 2006
+        }
+    }


Property changes on: trunk/lib/plugins/movie/PluginMovieMyMoviesIt.py
___________________________________________________________________
Name: svn:keywords
   + Id



From mikej06 at mail.berlios.de  Tue Jan  6 22:15:57 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 6 Jan 2009 22:15:57 +0100
Subject: [Griffith-svn] r1112 - branches/0.9.x/lib
Message-ID: <200901062115.n06LFvAI005569@sheep.berlios.de>

Author: mikej06
Date: 2009-01-06 22:15:25 +0100 (Tue, 06 Jan 2009)
New Revision: 1112

Modified:
   branches/0.9.x/lib/movie.py
Log:
backport conditional unicode conversion for imported movie data (PTGate movie plugin uses unicode -> double conversion results in wrong data)

Modified: branches/0.9.x/lib/movie.py
===================================================================
--- branches/0.9.x/lib/movie.py	2009-01-04 22:24:48 UTC (rev 1111)
+++ branches/0.9.x/lib/movie.py	2009-01-06 21:15:25 UTC (rev 1112)
@@ -202,17 +202,20 @@
 			if 'cast' in fields:
 				self.get_cast()
 				self.cast = gutils.clean(self.cast)
-				self.cast = gutils.gdecode(self.cast, self.encode)
+				if not isinstance(self.cast, unicode):
+					self.cast = gutils.gdecode(self.cast, self.encode)
 				fields.pop(fields.index('cast'))
 			if 'plot' in fields:
 				self.get_plot()
 				self.plot = gutils.clean(self.plot)
-				self.plot = gutils.gdecode(self.plot, self.encode)
+				if not isinstance(self.plot, unicode):
+					self.plot = gutils.gdecode(self.plot, self.encode)
 				fields.pop(fields.index('plot'))
 			if 'notes' in fields:
 				self.get_notes()
 				self.notes = gutils.clean(self.notes)
-				self.notes = gutils.gdecode(self.notes, self.encode)
+				if not isinstance(self.notes, unicode):
+					self.notes = gutils.gdecode(self.notes, self.encode)
 				fields.pop(fields.index('notes'))
 			if 'image' in fields:
 				self.get_image()
@@ -222,7 +225,8 @@
 			for i in fields:
 				getattr(self, "get_%s" % i)()
 				self[i] = gutils.clean(self[i])
-				self[i] = gutils.gdecode(self[i], self.encode)
+				if not isinstance(self[i], unicode):
+					self[i] = gutils.gdecode(self[i], self.encode)
 		
 			if 'o_title' in self.fields_to_fetch and self.o_title is not None:
 				if self.o_title[:4] == 'The ':



From mikej06 at mail.berlios.de  Tue Jan  6 22:31:23 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 6 Jan 2009 22:31:23 +0100
Subject: [Griffith-svn] r1113 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901062131.n06LVNIi007211@sheep.berlios.de>

Author: mikej06
Date: 2009-01-06 22:30:41 +0100 (Tue, 06 Jan 2009)
New Revision: 1113

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieMoviefone.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieMoviefone.py
Log:
MovieFone movie plugin updated



Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-06 21:15:25 UTC (rev 1112)
+++ branches/0.9.x/ChangeLog	2009-01-06 21:30:41 UTC (rev 1113)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-06  Michael Jahn
+	* MovieFone movie plugin updated
+
 2009-01-04  Piotr O?arowski
 	* MyMoviesIt movie plugin added (thanks to Giovanni Sposito)
 

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieMoviefone.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieMoviefone.py	2009-01-06 21:15:25 UTC (rev 1112)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieMoviefone.py	2009-01-06 21:30:41 UTC (rev 1113)
@@ -2,98 +2,136 @@
 
 # $Id$
 
-# Copyright (c) 2005-2007 Vasco Nunes
+# Copyright (c) 2005-2009 Vasco Nunes
 # You may use and distribute this software under the terms of the
 # GNU General Public License, version 2 or later
 
 import gutils
-import movie,string
+import movie,string,re
 
-plugin_name = "Moviefone"
+plugin_name        = "Moviefone"
 plugin_description = "A Service of America Online"
-plugin_url = "movies.aol.com"
-plugin_language = _("English")
-plugin_author = "Vasco Nunes"
-plugin_version = "0.3"
+plugin_url         = "www.moviefone.de"
+plugin_language    = _("English")
+plugin_author      = "Vasco Nunes"
+plugin_version     = "0.4"
 
 class Plugin(movie.Movie):
+	BASEURL = "http://www.moviefone.com/movie/%s"
+
 	def __init__(self, id):
 		self.movie_id = id
-		self.url = "http://movies.aol.com/movie/main.adp?_pgtyp=pdct&mid=" + str(self.movie_id)
+		self.url = self.BASEURL % self.movie_id + '/main'
 
+	def initialize(self):
+		self.page_main     = self.page
+		self.page_synopsis = self.open_page(self.parent_window, url = self.BASEURL % self.movie_id + '/synopsis')
+		self.page_cast     = self.open_page(self.parent_window, url = self.BASEURL % self.movie_id + '/credits')
+
 	def get_image(self):
-		self.image_url = gutils.trim(self.page,"http://cdn.channel.aol.com/amgvideo/dvd/cov150/",".jpg")
-		self.image_url = "http://cdn.channel.aol.com/amgvideo/dvd/cov150/" + self.image_url + ".jpg"
+		self.image_url = gutils.trim(self.page_main, 'http://www.aolcdn.com/mf_movies/', '"')
+		self.image_url = 'http://www.aolcdn.com/mf_movies/' + self.image_url
 
 	def get_o_title(self):
-		self.o_title = string.capwords(gutils.trim(self.page,"<title>"," - Moviefone</title>") )
+		self.o_title = gutils.trim(self.page_main, '<h1>', '</h1>')
 
 	def get_title(self):
-		self.title = self.o_title
+		self.title = gutils.trim(self.page_main, '<h1>', '</h1>')
 
 	def get_director(self):
-		self.director = gutils.trim(self.page,"<strong>Directed By:</strong> ","<br />")
-		self.director = string.strip(gutils.strip_tags(self.director))
+		self.director = gutils.trim(self.page_main, '<dt>Director(s)</dt>', '</dl>')
+		self.director = gutils.strip_tags(self.director.replace('</dd>', ','))
+		self.director = re.sub(',[ ]*$', '', self.director)
 
 	def get_plot(self):
-		self.plot = gutils.trim(self.page,"<strong>Synopsis:</strong> ","<br />")
+		self.plot = gutils.trim(self.page_synopsis, '<h3>Synopsis</h3>', '</p>')
 		self.plot = string.strip(gutils.strip_tags(self.plot))
 
 	def get_year(self):
-		self.year = gutils.trim(self.page,"<strong>DVD Release Date:</strong> ","<br />")
-		self.year = self.year[-4:]
+		self.year = gutils.trim(self.page_synopsis, 'Theatrical Release Date:', '<div class="row')
+		self.year = string.strip(gutils.strip_tags(self.year))
+		self.year = re.sub('[0-9][0-9]/[0-9][0-9]/', '', self.year)
 
 	def get_runtime(self):
-		self.runtime = gutils.trim(self.page,"<strong>Run Time:</strong> "," min.<br />")
+		self.runtime = string.strip(gutils.strip_tags(gutils.trim(self.page_main, '<dt>Runtime</dt>', ' min.</dd>')))
 
 	def get_genre(self):
-		self.genre = gutils.trim(self.page,"<strong>Genre:</strong> ","<br />")
+		self.genre = gutils.trim(self.page_synopsis, 'Genre(s):', '<div class="row')
+		self.genre = gutils.strip_tags(self.genre)
 
 	def get_cast(self):
-		self.cast = gutils.trim(self.page,"<strong>Starring:</strong> ","<br />")
-		self.cast = string.strip(gutils.strip_tags(self.cast))
+		self.cast = ''
+		tmp = re.split('(?:[<]div[ \t]+class="name"[>])', self.page_cast)
+		for index in range(1, len(tmp), 1):
+			entry = tmp[index]
+			if string.find(entry, '<h3>Director</h3>') >= 0 or string.find(entry, '<h3>Producer</h3>') >= 0 or string.find(entry, '<h3>Writer</h3>') >= 0:
+				break
+			name = string.strip(gutils.strip_tags(gutils.before(entry, '</div>')))
+			role = string.strip(gutils.strip_tags(gutils.trim(entry, '<div class="role">', '</div>')))
+			if role:
+				self.cast = self.cast + name + _(' as ') + role + '\n'
+			else:
+				self.cast = self.cast + name + '\n'
 
 	def get_classification(self):
-		self.classification = gutils.trim(self.page,"<strong>Rating:</strong> ","<br />")
+		self.classification = gutils.trim(self.page_synopsis, 'Rating:', '<div class="row')
+		self.classification = gutils.strip_tags(self.classification)
 
 	def get_studio(self):
-		self.studio = gutils.trim(self.page,"<strong>Released By:</strong> ","<br />")
+		self.studio = gutils.trim(self.page_synopsis, 'Production Co.:', '<div class="row')
+		self.studio = gutils.strip_tags(self.studio)
 
 	def get_o_site(self):
 		self.o_site = ""
 
 	def get_site(self):
-		self.site = ""
+		self.site = self.url
 
 	def get_trailer(self):
-		self.trailer = gutils.trim(self.page,"""onclick="setTrailerOmni();window.open('""", \
-			"','_dlplayer'")
+		self.trailer = ''
 
 	def get_country(self):
-		self.country = ""
+		self.country = gutils.trim(self.page_synopsis, 'Country of Origin:', '<div class="row')
+		self.country = gutils.strip_tags(self.country)
 
 	def get_rating(self):
-		self.rating = "0"
+		self.rating = '0'
+		tmp = gutils.trim(self.page_main, '<dt>Critics Say</dt>', '</dd>')
+		parts = re.split('(starAvg3)', tmp)
+		if parts and len(parts):
+			self.rating = len(parts) - 1
 
 class SearchPlugin(movie.SearchMovie):
+	PATTERN = re.compile('<a[ \t]+href="/movie/([^/]+/[0-9]+)/main"[ \t]+class="title">([^<]+)(?:[^(]+)[(]([0-9]+)[)]')
+	SUBPAGE_PATTERN = re.compile('(?:movies[?]subCategory=&restrictToCategory=&page=)([0-9]+)')
+    
 	def __init__(self):
-		self.original_url_search	= "http://movies.aol.com/search/encyresults.adp?query=";
-		self.translated_url_search	= "http://movies.aol.com/search/encyresults.adp?query=";
+		self.original_url_search   = "http://www.moviefone.com/search/%s/movies";
+		self.translated_url_search = "http://www.moviefone.com/search/%s/movies";
 
 	def search(self,parent_window):
-		self.open_search(parent_window)
-		self.sub_search()
+		if not self.open_search(parent_window):
+			return None
+		subpages = self.SUBPAGE_PATTERN.split(self.page)
+		if len(subpages) > 4:
+			maxsubpage = subpages[len(subpages) - 4]
+			completepage = self.page
+			try:
+				for subpage in range(1, int(maxsubpage) + 1, 1):
+					self.url = "http://www.moviefone.com/search/%s/movies?subCategory=&restrictToCategory=&page=" + str(subpage)
+					if not self.open_search(parent_window):
+						return None
+					completepage = completepage + self.page
+			finally:
+				self.page = completepage
 		return self.page
 
-	def sub_search(self):
-		self.page = gutils.trim(self.page,"--start LT_MultiColumn_1.0 module-->", 'pagnationleft">Results   ')
-
 	def get_searches(self):
-		elements = string.split(self.page,'class="dvdtitle">')
-		elements[0] = ''
+		elements = self.PATTERN.split(self.page)
 
-		for element in elements:
-			element = gutils.trim( element, '<a href="', '<br/>' )
-			if element != '':
-				self.ids.append( gutils.after( gutils.trim( element, 'movie/','/main') , '/' ) )
-				self.titles.append( string.replace( gutils.after( element, '">' ), '</a></span>', '' ) )
+		for index in range(1, len(elements), 4):
+			id = elements[index]
+			title = elements[index + 1]
+			year = elements[index + 2]
+			self.ids.append(id)
+			self.titles.append(title + ' (' + year + ')')

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-06 21:15:25 UTC (rev 1112)
+++ trunk/ChangeLog	2009-01-06 21:30:41 UTC (rev 1113)
@@ -5,6 +5,9 @@
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-06  Michael Jahn
+	* MovieFone movie plugin updated
+
 2009-01-04  Piotr O?arowski
 	* MyMoviesIt movie plugin added (thanks to Giovanni Sposito)
 

Modified: trunk/lib/plugins/movie/PluginMovieMoviefone.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieMoviefone.py	2009-01-06 21:15:25 UTC (rev 1112)
+++ trunk/lib/plugins/movie/PluginMovieMoviefone.py	2009-01-06 21:30:41 UTC (rev 1113)
@@ -2,99 +2,136 @@
 
 # $Id$
 
-# Copyright (c) 2005-2007 Vasco Nunes
+# Copyright (c) 2005-2009 Vasco Nunes
 # You may use and distribute this software under the terms of the
 # GNU General Public License, version 2 or later
 
 import gutils
-import movie,string
+import movie,string,re
 
-plugin_name = "Moviefone"
+plugin_name        = "Moviefone"
 plugin_description = "A Service of America Online"
-plugin_url = "movies.aol.com"
-plugin_language = _("English")
-plugin_author = "Vasco Nunes"
-plugin_version = "0.3"
+plugin_url         = "www.moviefone.de"
+plugin_language    = _("English")
+plugin_author      = "Vasco Nunes"
+plugin_version     = "0.4"
 
 class Plugin(movie.Movie):
+    BASEURL = "http://www.moviefone.com/movie/%s"
+
     def __init__(self, id):
         self.movie_id = id
-        self.url = "http://movies.aol.com/movie/main.adp?_pgtyp=pdct&mid=" + str(self.movie_id)
+        self.url = self.BASEURL % self.movie_id + '/main'
 
+    def initialize(self):
+        self.page_main     = self.page
+        self.page_synopsis = self.open_page(self.parent_window, url = self.BASEURL % self.movie_id + '/synopsis')
+        self.page_cast     = self.open_page(self.parent_window, url = self.BASEURL % self.movie_id + '/credits')
+
     def get_image(self):
-        self.image_url = gutils.trim(self.page,"http://cdn.channel.aol.com/amgvideo/dvd/cov150/",".jpg")
-        self.image_url = "http://cdn.channel.aol.com/amgvideo/dvd/cov150/" + self.image_url + ".jpg"
+        self.image_url = gutils.trim(self.page_main, 'http://www.aolcdn.com/mf_movies/', '"')
+        self.image_url = 'http://www.aolcdn.com/mf_movies/' + self.image_url
 
     def get_o_title(self):
-        self.o_title = string.capwords(gutils.trim(self.page,"<title>"," - Moviefone</title>") )
+        self.o_title = gutils.trim(self.page_main, '<h1>', '</h1>')
 
     def get_title(self):
-        self.title = self.o_title
+        self.title = gutils.trim(self.page_main, '<h1>', '</h1>')
 
     def get_director(self):
-        self.director = gutils.trim(self.page,"<strong>Directed By:</strong> ","<br />")
-        self.director = string.strip(gutils.strip_tags(self.director))
+        self.director = gutils.trim(self.page_main, '<dt>Director(s)</dt>', '</dl>')
+        self.director = gutils.strip_tags(self.director.replace('</dd>', ','))
+        self.director = re.sub(',[ ]*$', '', self.director)
 
     def get_plot(self):
-        self.plot = gutils.trim(self.page,"<strong>Synopsis:</strong> ","<br />")
+        self.plot = gutils.trim(self.page_synopsis, '<h3>Synopsis</h3>', '</p>')
         self.plot = string.strip(gutils.strip_tags(self.plot))
 
     def get_year(self):
-        self.year = gutils.trim(self.page,"<strong>DVD Release Date:</strong> ","<br />")
-        self.year = self.year[-4:]
+        self.year = gutils.trim(self.page_synopsis, 'Theatrical Release Date:', '<div class="row')
+        self.year = string.strip(gutils.strip_tags(self.year))
+        self.year = re.sub('[0-9][0-9]/[0-9][0-9]/', '', self.year)
 
     def get_runtime(self):
-        self.runtime = gutils.trim(self.page,"<strong>Run Time:</strong> "," min.<br />")
+        self.runtime = string.strip(gutils.strip_tags(gutils.regextrim(self.page_main, '<dt>Runtime</dt>', ' min[. ]*</dd>')))
 
     def get_genre(self):
-        self.genre = gutils.trim(self.page,"<strong>Genre:</strong> ","<br />")
+        self.genre = gutils.trim(self.page_synopsis, 'Genre(s):', '<div class="row')
+        self.genre = gutils.strip_tags(self.genre)
 
     def get_cast(self):
-        self.cast = gutils.trim(self.page,"<strong>Starring:</strong> ","<br />")
-        self.cast = string.strip(gutils.strip_tags(self.cast))
+        self.cast = ''
+        tmp = re.split('(?:[<]div[ \t]+class="name"[>])', self.page_cast)
+        for index in range(1, len(tmp), 1):
+            entry = tmp[index]
+            if string.find(entry, '<h3>Director</h3>') >= 0 or string.find(entry, '<h3>Producer</h3>') >= 0 or string.find(entry, '<h3>Writer</h3>') >= 0:
+                break
+            name = string.strip(gutils.strip_tags(gutils.before(entry, '</div>')))
+            role = string.strip(gutils.strip_tags(gutils.trim(entry, '<div class="role">', '</div>')))
+            if role:
+                self.cast = self.cast + name + _(' as ') + role + '\n'
+            else:
+                self.cast = self.cast + name + '\n'
 
     def get_classification(self):
-        self.classification = gutils.trim(self.page,"<strong>Rating:</strong> ","<br />")
+        self.classification = gutils.trim(self.page_synopsis, 'Rating:', '<div class="row')
+        self.classification = gutils.strip_tags(self.classification)
 
     def get_studio(self):
-        self.studio = gutils.trim(self.page,"<strong>Released By:</strong> ","<br />")
+        self.studio = gutils.trim(self.page_synopsis, 'Production Co.:', '<div class="row')
+        self.studio = gutils.strip_tags(self.studio)
 
     def get_o_site(self):
         self.o_site = ""
 
     def get_site(self):
-        self.site = ""
+        self.site = self.url
 
     def get_trailer(self):
-        self.trailer = gutils.trim(self.page,"""onclick="setTrailerOmni();window.open('""", \
-            "','_dlplayer'")
+        self.trailer = ''
 
     def get_country(self):
-        self.country = ""
+        self.country = gutils.trim(self.page_synopsis, 'Country of Origin:', '<div class="row')
+        self.country = gutils.strip_tags(self.country)
 
     def get_rating(self):
-        self.rating = "0"
+        self.rating = '0'
+        tmp = gutils.trim(self.page_main, '<dt>Critics Say</dt>', '</dd>')
+        parts = re.split('(starAvg3)', tmp)
+        if parts and len(parts):
+            self.rating = len(parts) - 1
 
 class SearchPlugin(movie.SearchMovie):
+    PATTERN = re.compile('<a[ \t]+href="/movie/([^/]+/[0-9]+)/main"[ \t]+class="title">([^<]+)(?:[^(]+)[(]([0-9]+)[)]')
+    SUBPAGE_PATTERN = re.compile('(?:movies[?]subCategory=&restrictToCategory=&page=)([0-9]+)')
+    
     def __init__(self):
-        self.original_url_search    = "http://movies.aol.com/search/encyresults.adp?query=";
-        self.translated_url_search    = "http://movies.aol.com/search/encyresults.adp?query=";
+        self.original_url_search   = "http://www.moviefone.com/search/%s/movies";
+        self.translated_url_search = "http://www.moviefone.com/search/%s/movies";
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
             return None
-        self.sub_search()
+        subpages = self.SUBPAGE_PATTERN.split(self.page)
+        if len(subpages) > 4:
+            maxsubpage = subpages[len(subpages) - 4]
+            completepage = self.page
+            try:
+                for subpage in range(1, int(maxsubpage) + 1, 1):
+                    self.url = "http://www.moviefone.com/search/%s/movies?subCategory=&restrictToCategory=&page=" + str(subpage)
+                    if not self.open_search(parent_window):
+                        return None
+                    completepage = completepage + self.page
+            finally:
+                self.page = completepage
         return self.page
 
-    def sub_search(self):
-        self.page = gutils.trim(self.page,"--start LT_MultiColumn_1.0 module-->", 'pagnationleft">Results   ')
-
     def get_searches(self):
-        elements = string.split(self.page,'class="dvdtitle">')
-        elements[0] = ''
+        elements = self.PATTERN.split(self.page)
 
-        for element in elements:
-            element = gutils.trim( element, '<a href="', '<br/>' )
-            if element != '':
-                self.ids.append( gutils.after( gutils.trim( element, 'movie/','/main') , '/' ) )
-                self.titles.append( string.replace( gutils.after( element, '">' ), '</a></span>', '' ) )
+        for index in range(1, len(elements), 4):
+            id = elements[index]
+            title = elements[index + 1]
+            year = elements[index + 2]
+            self.ids.append(id)
+            self.titles.append(title + ' (' + year + ')')



From mikej06 at mail.berlios.de  Tue Jan  6 22:45:46 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 6 Jan 2009 22:45:46 +0100
Subject: [Griffith-svn] r1114 - branches/0.9.x trunk
Message-ID: <200901062145.n06LjklG009305@sheep.berlios.de>

Author: mikej06
Date: 2009-01-06 22:45:23 +0100 (Tue, 06 Jan 2009)
New Revision: 1114

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/winpackage.iss
   trunk/ChangeLog
   trunk/winpackage.iss
Log:
windows installer: movie import plugins deselectable from installation

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-06 21:30:41 UTC (rev 1113)
+++ branches/0.9.x/ChangeLog	2009-01-06 21:45:23 UTC (rev 1114)
@@ -7,6 +7,7 @@
 
 2009-01-06  Michael Jahn
 	* MovieFone movie plugin updated
+	* windows installer: movie import plugins deselectable from installation
 
 2009-01-04  Piotr O?arowski
 	* MyMoviesIt movie plugin added (thanks to Giovanni Sposito)

Modified: branches/0.9.x/winpackage.iss
===================================================================
--- branches/0.9.x/winpackage.iss	2009-01-06 21:30:41 UTC (rev 1113)
+++ branches/0.9.x/winpackage.iss	2009-01-06 21:45:23 UTC (rev 1114)
@@ -53,7 +53,64 @@
 
 [Files]
 Source: dist\griffith.exe; DestDir: {app}; Flags: ignoreversion
-Source: dist\*; DestDir: {app}; Flags: ignoreversion recursesubdirs createallsubdirs
+; don't use recursion because of components selection (movie plugins, ...)
+Source: dist\*;        DestDir: {app}; Flags: ignoreversion
+; use recursion, no components
+Source: dist\etc\*;    DestDir: {app}\etc;    Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\glade\*;  DestDir: {app}\glade;  Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\i18n\*;   DestDir: {app}\i18n;   Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\images\*; DestDir: {app}\images; Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\share\*;  DestDir: {app}\share;  Flags: ignoreversion recursesubdirs createallsubdirs
+; don't use recursion because of components selection (movie plugins, ...)
+Source: dist\lib\*;    DestDir: {app}\lib;    Flags: ignoreversion
+; use recursion, no components
+Source: dist\lib\gettext\*;      DestDir: {app}\lib\gettext;      Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\glade3\*;       DestDir: {app}\lib\glade3;       Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\glib-2.0\*;     DestDir: {app}\lib\glib-2.0;     Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\gtk-2.0\*;      DestDir: {app}\lib\gtk-2.0;      Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\gtkglext-1.0\*; DestDir: {app}\lib\gtkglext-1.0; Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\libglade\*;     DestDir: {app}\lib\libglade;     Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\pango\*;        DestDir: {app}\lib\pango;        Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\pkgconfig\*;    DestDir: {app}\lib\pkgconfig;    Flags: ignoreversion recursesubdirs createallsubdirs
+; don't use recursion because of components selection (movie plugins, ...)
+Source: dist\lib\plugins\*;        DestDir: {app}\lib\plugins;    Flags: ignoreversion
+; use recursion, no components
+Source: dist\lib\plugins\export\*; DestDir: {app}\lib\plugins\export; Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\plugins\imp\*;    DestDir: {app}\lib\plugins\imp;    Flags: ignoreversion recursesubdirs createallsubdirs
+; component based installation
+Source: dist\lib\plugins\movie\PluginMovie7arte.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\7arte
+Source: dist\lib\plugins\movie\PluginMovieAllocine.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\French\Allocine
+Source: dist\lib\plugins\movie\PluginMovieAmazon.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Amazon
+Source: dist\lib\plugins\movie\PluginMovieAniDB.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\AnimeDB
+Source: dist\lib\plugins\movie\PluginMovieCinematografo.py; DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Italian\Cinematografo
+Source: dist\lib\plugins\movie\PluginMovieCineMovies.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\French\CineMovies
+Source: dist\lib\plugins\movie\PluginMovieCineteka.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\Cineteka
+Source: dist\lib\plugins\movie\PluginMovieCSFD.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Czech\CSFD
+Source: dist\lib\plugins\movie\PluginMovieCulturalia.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Spanish\Culturalia
+Source: dist\lib\plugins\movie\PluginMovieDVDEmpire.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\DVD_Empire
+Source: dist\lib\plugins\movie\PluginMovieDVDPalace.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\DVD_Palace
+Source: dist\lib\plugins\movie\PluginMovieE-Pipoca.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Brazilian_Portuguese\E_Pipoca
+Source: dist\lib\plugins\movie\PluginMovieFDb.py;           DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\FDb
+Source: dist\lib\plugins\movie\PluginMovieFilmAffinity.py;  DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Spanish\FilmAffinity
+Source: dist\lib\plugins\movie\PluginMovieFilmDb.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\FilmDb
+Source: dist\lib\plugins\movie\PluginMovieFilmeVonAZ.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\Filme_von_A_bis_Z
+Source: dist\lib\plugins\movie\PluginMovieFilmtipset.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Swedish\Film_tip_set
+Source: dist\lib\plugins\movie\PluginMovieFilmweb.py;       DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Filmweb
+Source: dist\lib\plugins\movie\PluginMovieIMDB.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\IMDB
+Source: dist\lib\plugins\movie\PluginMovieIMDB-de.py;       DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\IMDBde
+Source: dist\lib\plugins\movie\PluginMovieIMDB-es.py;       DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Spanish\IMDB_es
+Source: dist\lib\plugins\movie\PluginMovieKinoDe.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\Kinode
+Source: dist\lib\plugins\movie\PluginMovieMediadis.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\Mediadis
+Source: dist\lib\plugins\movie\PluginMovieMoviefone.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\Moviefone
+Source: dist\lib\plugins\movie\PluginMovieMyMoviesIt.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Italian\MyMoviesIt
+Source: dist\lib\plugins\movie\PluginMovieOFDb.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\OFDb
+Source: dist\lib\plugins\movie\PluginMovieOnet.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Onet
+Source: dist\lib\plugins\movie\PluginMoviePTGate.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\PTGate
+Source: dist\lib\plugins\movie\PluginMovieStopklatka.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Stopklatka
+Source: dist\lib\plugins\movie\PluginMovieTanukiAnime.py;   DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Tanuki_Anime
+Source: dist\lib\plugins\movie\PluginMovieWP.py;            DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Wirtualna_Polska
+Source: dist\lib\plugins\movie\PluginMovieZelluloid.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\Zelluloid
+
 ; NOTE: Don't use "Flags: ignoreversion" on any shared system files
 
 [Icons]
@@ -83,3 +140,59 @@
 Type: files; Name: {app}\lib\plugins\movie\*.pyo
 Type: files; Name: {app}\lib\plugins\imp\*.pyo
 
+[Components]
+Name: Griffith;                                      Description: Griffith; Types: custom compact full; Flags: fixed
+Name: Movie_Import_Plugins;                          Description: Movie Import Plugins; Types: custom compact full; Flags: fixed
+Name: Movie_Import_Plugins\IMDB;                     Description: IMDB Import Plugin; Types: custom compact full; Flags: fixed
+Name: Movie_Import_Plugins\Amazon;                   Description: Amazon Import Plugin; Types: full
+
+Name: Movie_Import_Plugins\English;                  Description: English Import Plugins; Types: full
+Name: Movie_Import_Plugins\English\AnimeDB;          Description: AnimeDB / www.anidb.net; Types: full
+Name: Movie_Import_Plugins\English\DVD_Empire;       Description: DVD Empire / www.dvdempire.com; Types: full
+Name: Movie_Import_Plugins\English\Mediadis;         Description: Mediadis / www.mediadis.com; Types: full
+Name: Movie_Import_Plugins\English\Moviefone;        Description: Moviefone / www.moviefone.com; Types: full
+
+Name: Movie_Import_Plugins\Czech;                    Description: Czech Import Plugins; Types: full
+Name: Movie_Import_Plugins\Czech\CSFD;               Description: CSFD / www.csfd.cz; Types: full
+
+Name: Movie_Import_Plugins\French;                   Description: French Import Plugins; Types: full
+Name: Movie_Import_Plugins\French\Allocine;          Description: Allocine / www.allocine.fr; Types: full
+Name: Movie_Import_Plugins\French\CineMovies;        Description: CineMovies / www.cinemovies.fr; Types: full
+
+Name: Movie_Import_Plugins\German;                   Description: German Import Plugins; Types: full
+Name: Movie_Import_Plugins\German\DVD_Palace;        Description: DVD-Palace / www.dvd-palace.de; Types: full
+Name: Movie_Import_Plugins\German\FilmDb;            Description: FilmDb / www.filmdb.de; Types: full
+Name: Movie_Import_Plugins\German\Filme_von_A_bis_Z; Description: Filme von A-Z / www.filmevona-z.de; Types: full
+Name: Movie_Import_Plugins\German\IMDBde;            Description: IMDB.de / german.imdb.com; Types: full
+Name: Movie_Import_Plugins\German\OFDb;              Description: OFDb / www.ofdb.de; Types: full
+Name: Movie_Import_Plugins\German\Kinode;            Description: Kino.de / www.kino.de; Types: full
+Name: Movie_Import_Plugins\German\Zelluloid;         Description: Zelluloid / www.zelluloid.de; Types: full
+
+Name: Movie_Import_Plugins\Italian;                  Description: Italian Import Plugins; Types: full
+Name: Movie_Import_Plugins\Italian\Cinematografo;    Description: Cinematografo / www.cinematografo.it; Types: full
+Name: Movie_Import_Plugins\Italian\MyMoviesIt;       Description: MyMoviesIt / www.mymovies.it; Types: full
+
+Name: Movie_Import_Plugins\Polish;                   Description: Polish Import Plugins; Types: full
+Name: Movie_Import_Plugins\Polish\FDb;               Description: FDb / fdb.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Filmweb;           Description: Filmweb / www.filmweb.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Onet;              Description: Onet / film.onet.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Stopklatka;        Description: Stopklatka / www.stopklatka.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Tanuki_Anime;      Description: Tanuki Anime / anime.tanuki.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Wirtualna_Polska;  Description: Wirtualna Polska / www.film.wp.pl; Types: full
+
+Name: Movie_Import_Plugins\Portuguese;               Description: Portuguese Import Plugins; Types: full
+Name: Movie_Import_Plugins\Portuguese\7arte;         Description: 7arte / 7arte.net; Types: full
+Name: Movie_Import_Plugins\Portuguese\Cineteka;      Description: Cineteka / cineteka.com; Types: full
+Name: Movie_Import_Plugins\Portuguese\PTGate;        Description: PTGate / cinema.ptgate.pt; Types: full
+
+Name: Movie_Import_Plugins\Brazilian_Portuguese;          Description: Brazilian Portuguese Import Plugins; Types: full
+Name: Movie_Import_Plugins\Brazilian_Portuguese\E_Pipoca; Description: E-Pipoca / epipoca.uol.com.br; Types: full
+
+Name: Movie_Import_Plugins\Spanish;                  Description: Spanish Import Plugins; Types: full
+Name: Movie_Import_Plugins\Spanish\Culturalia;       Description: Culturalia / www.culturalianet.com; Types: full
+Name: Movie_Import_Plugins\Spanish\FilmAffinity;     Description: FilmAffinity / www.filmaffinity.com; Types: full
+Name: Movie_Import_Plugins\Spanish\IMDB_es;          Description: IMDB.es / spanish.imdb.com; Types: full
+
+Name: Movie_Import_Plugins\Swedish;                  Description: Swedish Import Plugins; Types: full
+Name: Movie_Import_Plugins\Swedish\Film_tip_set;     Description: Film tip set / www.filmtipset.se; Types: full
+

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-06 21:30:41 UTC (rev 1113)
+++ trunk/ChangeLog	2009-01-06 21:45:23 UTC (rev 1114)
@@ -7,6 +7,7 @@
 
 2009-01-06  Michael Jahn
 	* MovieFone movie plugin updated
+	* windows installer: movie import plugins deselectable from installation
 
 2009-01-04  Piotr O?arowski
 	* MyMoviesIt movie plugin added (thanks to Giovanni Sposito)

Modified: trunk/winpackage.iss
===================================================================
--- trunk/winpackage.iss	2009-01-06 21:30:41 UTC (rev 1113)
+++ trunk/winpackage.iss	2009-01-06 21:45:23 UTC (rev 1114)
@@ -53,7 +53,64 @@
 
 [Files]
 Source: dist\griffith.exe; DestDir: {app}; Flags: ignoreversion
-Source: dist\*; DestDir: {app}; Flags: ignoreversion recursesubdirs createallsubdirs
+; don't use recursion because of components selection (movie plugins, ...)
+Source: dist\*;        DestDir: {app}; Flags: ignoreversion
+; use recursion, no components
+Source: dist\etc\*;    DestDir: {app}\etc;    Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\glade\*;  DestDir: {app}\glade;  Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\i18n\*;   DestDir: {app}\i18n;   Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\images\*; DestDir: {app}\images; Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\share\*;  DestDir: {app}\share;  Flags: ignoreversion recursesubdirs createallsubdirs
+; don't use recursion because of components selection (movie plugins, ...)
+Source: dist\lib\*;    DestDir: {app}\lib;    Flags: ignoreversion
+; use recursion, no components
+Source: dist\lib\gettext\*;      DestDir: {app}\lib\gettext;      Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\glade3\*;       DestDir: {app}\lib\glade3;       Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\glib-2.0\*;     DestDir: {app}\lib\glib-2.0;     Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\gtk-2.0\*;      DestDir: {app}\lib\gtk-2.0;      Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\gtkglext-1.0\*; DestDir: {app}\lib\gtkglext-1.0; Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\libglade\*;     DestDir: {app}\lib\libglade;     Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\pango\*;        DestDir: {app}\lib\pango;        Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\pkgconfig\*;    DestDir: {app}\lib\pkgconfig;    Flags: ignoreversion recursesubdirs createallsubdirs
+; don't use recursion because of components selection (movie plugins, ...)
+Source: dist\lib\plugins\*;        DestDir: {app}\lib\plugins;    Flags: ignoreversion
+; use recursion, no components
+Source: dist\lib\plugins\export\*; DestDir: {app}\lib\plugins\export; Flags: ignoreversion recursesubdirs createallsubdirs
+Source: dist\lib\plugins\imp\*;    DestDir: {app}\lib\plugins\imp;    Flags: ignoreversion recursesubdirs createallsubdirs
+; component based installation
+Source: dist\lib\plugins\movie\PluginMovie7arte.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\7arte
+Source: dist\lib\plugins\movie\PluginMovieAllocine.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\French\Allocine
+Source: dist\lib\plugins\movie\PluginMovieAmazon.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Amazon
+Source: dist\lib\plugins\movie\PluginMovieAniDB.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\AnimeDB
+Source: dist\lib\plugins\movie\PluginMovieCinematografo.py; DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Italian\Cinematografo
+Source: dist\lib\plugins\movie\PluginMovieCineMovies.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\French\CineMovies
+Source: dist\lib\plugins\movie\PluginMovieCineteka.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\Cineteka
+Source: dist\lib\plugins\movie\PluginMovieCSFD.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Czech\CSFD
+Source: dist\lib\plugins\movie\PluginMovieCulturalia.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Spanish\Culturalia
+Source: dist\lib\plugins\movie\PluginMovieDVDEmpire.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\DVD_Empire
+Source: dist\lib\plugins\movie\PluginMovieDVDPalace.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\DVD_Palace
+Source: dist\lib\plugins\movie\PluginMovieE-Pipoca.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Brazilian_Portuguese\E_Pipoca
+Source: dist\lib\plugins\movie\PluginMovieFDb.py;           DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\FDb
+Source: dist\lib\plugins\movie\PluginMovieFilmAffinity.py;  DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Spanish\FilmAffinity
+Source: dist\lib\plugins\movie\PluginMovieFilmDb.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\FilmDb
+Source: dist\lib\plugins\movie\PluginMovieFilmeVonAZ.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\Filme_von_A_bis_Z
+Source: dist\lib\plugins\movie\PluginMovieFilmtipset.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Swedish\Film_tip_set
+Source: dist\lib\plugins\movie\PluginMovieFilmweb.py;       DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Filmweb
+Source: dist\lib\plugins\movie\PluginMovieIMDB.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\IMDB
+Source: dist\lib\plugins\movie\PluginMovieIMDB-de.py;       DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\IMDBde
+Source: dist\lib\plugins\movie\PluginMovieIMDB-es.py;       DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Spanish\IMDB_es
+Source: dist\lib\plugins\movie\PluginMovieKinoDe.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\Kinode
+Source: dist\lib\plugins\movie\PluginMovieMediadis.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\Mediadis
+Source: dist\lib\plugins\movie\PluginMovieMoviefone.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\Moviefone
+Source: dist\lib\plugins\movie\PluginMovieMyMoviesIt.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Italian\MyMoviesIt
+Source: dist\lib\plugins\movie\PluginMovieOFDb.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\OFDb
+Source: dist\lib\plugins\movie\PluginMovieOnet.py;          DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Onet
+Source: dist\lib\plugins\movie\PluginMoviePTGate.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\PTGate
+Source: dist\lib\plugins\movie\PluginMovieStopklatka.py;    DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Stopklatka
+Source: dist\lib\plugins\movie\PluginMovieTanukiAnime.py;   DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Tanuki_Anime
+Source: dist\lib\plugins\movie\PluginMovieWP.py;            DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Polish\Wirtualna_Polska
+Source: dist\lib\plugins\movie\PluginMovieZelluloid.py;     DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\German\Zelluloid
+
 ; NOTE: Don't use "Flags: ignoreversion" on any shared system files
 
 [Icons]
@@ -83,3 +140,59 @@
 Type: files; Name: {app}\lib\plugins\movie\*.pyo
 Type: files; Name: {app}\lib\plugins\imp\*.pyo
 
+[Components]
+Name: Griffith;                                      Description: Griffith; Types: custom compact full; Flags: fixed
+Name: Movie_Import_Plugins;                          Description: Movie Import Plugins; Types: custom compact full; Flags: fixed
+Name: Movie_Import_Plugins\IMDB;                     Description: IMDB Import Plugin; Types: custom compact full; Flags: fixed
+Name: Movie_Import_Plugins\Amazon;                   Description: Amazon Import Plugin; Types: full
+
+Name: Movie_Import_Plugins\English;                  Description: English Import Plugins; Types: full
+Name: Movie_Import_Plugins\English\AnimeDB;          Description: AnimeDB / www.anidb.net; Types: full
+Name: Movie_Import_Plugins\English\DVD_Empire;       Description: DVD Empire / www.dvdempire.com; Types: full
+Name: Movie_Import_Plugins\English\Mediadis;         Description: Mediadis / www.mediadis.com; Types: full
+Name: Movie_Import_Plugins\English\Moviefone;        Description: Moviefone / www.moviefone.com; Types: full
+
+Name: Movie_Import_Plugins\Czech;                    Description: Czech Import Plugins; Types: full
+Name: Movie_Import_Plugins\Czech\CSFD;               Description: CSFD / www.csfd.cz; Types: full
+
+Name: Movie_Import_Plugins\French;                   Description: French Import Plugins; Types: full
+Name: Movie_Import_Plugins\French\Allocine;          Description: Allocine / www.allocine.fr; Types: full
+Name: Movie_Import_Plugins\French\CineMovies;        Description: CineMovies / www.cinemovies.fr; Types: full
+
+Name: Movie_Import_Plugins\German;                   Description: German Import Plugins; Types: full
+Name: Movie_Import_Plugins\German\DVD_Palace;        Description: DVD-Palace / www.dvd-palace.de; Types: full
+Name: Movie_Import_Plugins\German\FilmDb;            Description: FilmDb / www.filmdb.de; Types: full
+Name: Movie_Import_Plugins\German\Filme_von_A_bis_Z; Description: Filme von A-Z / www.filmevona-z.de; Types: full
+Name: Movie_Import_Plugins\German\IMDBde;            Description: IMDB.de / german.imdb.com; Types: full
+Name: Movie_Import_Plugins\German\OFDb;              Description: OFDb / www.ofdb.de; Types: full
+Name: Movie_Import_Plugins\German\Kinode;            Description: Kino.de / www.kino.de; Types: full
+Name: Movie_Import_Plugins\German\Zelluloid;         Description: Zelluloid / www.zelluloid.de; Types: full
+
+Name: Movie_Import_Plugins\Italian;                  Description: Italian Import Plugins; Types: full
+Name: Movie_Import_Plugins\Italian\Cinematografo;    Description: Cinematografo / www.cinematografo.it; Types: full
+Name: Movie_Import_Plugins\Italian\MyMoviesIt;       Description: MyMoviesIt / www.mymovies.it; Types: full
+
+Name: Movie_Import_Plugins\Polish;                   Description: Polish Import Plugins; Types: full
+Name: Movie_Import_Plugins\Polish\FDb;               Description: FDb / fdb.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Filmweb;           Description: Filmweb / www.filmweb.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Onet;              Description: Onet / film.onet.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Stopklatka;        Description: Stopklatka / www.stopklatka.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Tanuki_Anime;      Description: Tanuki Anime / anime.tanuki.pl; Types: full
+Name: Movie_Import_Plugins\Polish\Wirtualna_Polska;  Description: Wirtualna Polska / www.film.wp.pl; Types: full
+
+Name: Movie_Import_Plugins\Portuguese;               Description: Portuguese Import Plugins; Types: full
+Name: Movie_Import_Plugins\Portuguese\7arte;         Description: 7arte / 7arte.net; Types: full
+Name: Movie_Import_Plugins\Portuguese\Cineteka;      Description: Cineteka / cineteka.com; Types: full
+Name: Movie_Import_Plugins\Portuguese\PTGate;        Description: PTGate / cinema.ptgate.pt; Types: full
+
+Name: Movie_Import_Plugins\Brazilian_Portuguese;          Description: Brazilian Portuguese Import Plugins; Types: full
+Name: Movie_Import_Plugins\Brazilian_Portuguese\E_Pipoca; Description: E-Pipoca / epipoca.uol.com.br; Types: full
+
+Name: Movie_Import_Plugins\Spanish;                  Description: Spanish Import Plugins; Types: full
+Name: Movie_Import_Plugins\Spanish\Culturalia;       Description: Culturalia / www.culturalianet.com; Types: full
+Name: Movie_Import_Plugins\Spanish\FilmAffinity;     Description: FilmAffinity / www.filmaffinity.com; Types: full
+Name: Movie_Import_Plugins\Spanish\IMDB_es;          Description: IMDB.es / spanish.imdb.com; Types: full
+
+Name: Movie_Import_Plugins\Swedish;                  Description: Swedish Import Plugins; Types: full
+Name: Movie_Import_Plugins\Swedish\Film_tip_set;     Description: Film tip set / www.filmtipset.se; Types: full
+



From kura666 at mail.berlios.de  Wed Jan  7 09:41:47 2009
From: kura666 at mail.berlios.de (kura666 at mail.berlios.de)
Date: Wed, 7 Jan 2009 09:41:47 +0100
Subject: [Griffith-svn] r1115 - trunk/lib/plugins/movie
Message-ID: <200901070841.n078flYr013373@sheep.berlios.de>

Author: kura666
Date: 2009-01-07 09:41:46 +0100 (Wed, 07 Jan 2009)
New Revision: 1115

Modified:
   trunk/lib/plugins/movie/PluginMovieFDb.py
Log:
FDb movie plugin updated


Modified: trunk/lib/plugins/movie/PluginMovieFDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFDb.py	2009-01-06 21:45:23 UTC (rev 1114)
+++ trunk/lib/plugins/movie/PluginMovieFDb.py	2009-01-07 08:41:46 UTC (rev 1115)
@@ -32,7 +32,7 @@
 plugin_language        = _('Polish')
 plugin_author        = 'Piotr O?arowski, Bartosz Kurczewski'
 plugin_author_email    = '<bartosz.kurczewski at gmail.com>'
-plugin_version        = '1.12'
+plugin_version        = '1.13'
 
 class Plugin(movie.Movie):
     TRAILER_PATTERN = re.compile('/film/.*/zwiastuny/odtwarzaj/[0-9]*')
@@ -53,7 +53,7 @@
             self.image_url = ''
 
     def get_o_title(self):
-        self.o_title = gutils.trim(self.page, '<h2 class="title">', '</h2>')
+        self.o_title = gutils.trim(self.page, '<h2 class="after-title">', '</h2>')
         self.o_title = gutils.strip_tags(self.o_title)
         if self.o_title == '':
             self.o_title = self.get_title(True)



From mikej06 at mail.berlios.de  Wed Jan 14 23:10:58 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 14 Jan 2009 23:10:58 +0100
Subject: [Griffith-svn] r1116 - trunk/lib
Message-ID: <200901142210.n0EMAwVi000087@sheep.berlios.de>

Author: mikej06
Date: 2009-01-14 23:10:48 +0100 (Wed, 14 Jan 2009)
New Revision: 1116

Modified:
   trunk/lib/amazon.py
Log:
logging added

Modified: trunk/lib/amazon.py
===================================================================
--- trunk/lib/amazon.py	2009-01-07 08:41:46 UTC (rev 1115)
+++ trunk/lib/amazon.py	2009-01-14 22:10:48 UTC (rev 1116)
@@ -80,6 +80,8 @@
     timeoutsocket.setDefaultSocketTimeout(10)
 except ImportError:
     pass
+import logging
+log = logging.getLogger("Griffith")
 
 LICENSE_KEY = ""
 ASSOCIATE = "webservices-20"
@@ -249,6 +251,7 @@
         url += "&Sort=titlerank"
     if not APIVERSION is None:
         url += "&Version=%s" % APIVERSION
+    log.info('URL: ' + url)
     return url
 
 



From mikej06 at mail.berlios.de  Thu Jan 15 14:08:08 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 15 Jan 2009 14:08:08 +0100
Subject: [Griffith-svn] r1117 - branches/0.9.x/lib trunk/lib
Message-ID: <200901151308.n0FD88uN012592@sheep.berlios.de>

Author: mikej06
Date: 2009-01-15 14:07:58 +0100 (Thu, 15 Jan 2009)
New Revision: 1117

Modified:
   branches/0.9.x/lib/edit.py
   trunk/lib/edit.py
Log:
* changed behaviour of searching an amazon poster: first search by title, if nothing found search by keyword.
in both cases load result pages 1 to 10 (max) if there are more than 1 result page
* small fixes if the cancel button is pressed during the poster download

Modified: branches/0.9.x/lib/edit.py
===================================================================
--- branches/0.9.x/lib/edit.py	2009-01-14 22:10:48 UTC (rev 1116)
+++ branches/0.9.x/lib/edit.py	2009-01-15 13:07:58 UTC (rev 1117)
@@ -146,7 +146,26 @@
 		locale = None
 
 	try:
-		result = amazon.searchByKeyword(keyword, type="Large", product_line="DVD", locale=locale)
+		result = amazon.searchByTitle(keyword, type="Large", product_line="DVD", locale=locale)
+		if hasattr(result, 'TotalPages'):
+			# get next result pages
+			pages = int(result.TotalPages)
+			page = 2
+			while page <= pages and page < 11:
+				tmp = amazon.searchByTitle(keyword, type='Large', product_line='DVD', locale=locale, page=page)
+				result.Item.extend(tmp.Item)
+				page = page + 1
+		if not hasattr(result, 'Item') or not len(result.Item):
+			# fallback if nothing is found by title
+			result = amazon.searchByKeyword(keyword, type="Large", product_line="DVD", locale=locale)
+			if hasattr(result, 'TotalPages'):
+				# get next result pages
+				pages = int(result.TotalPages)
+				page = 2
+				while page <= pages and page < 11:
+					tmp = amazon.searchByKeyword(keyword, type='Large', product_line='DVD', locale=locale, page=page)
+					result.Item.extend(tmp.Item)
+					page = page + 1
 		self.debug.show("Posters found on amazon: %s posters" % result.TotalResults)
 	except:
 		gutils.warning(self, _("No posters found for this movie."))
@@ -209,6 +228,7 @@
 	file_to_copy = tempfile.mktemp(suffix=self.widgets['movie']['number'].get_text().decode('utf-8'), \
 		dir=self.locations['temp'])
 	file_to_copy += ".jpg"
+		canceled = False
 	if len(result.Item[f].LargeImage.URL):
 		try:
 			progress = movie.Progress(self.widgets['window'],_("Fetching poster"),_("Wait a moment"))
@@ -217,58 +237,64 @@
 			while retriever.isAlive():
 				progress.pulse()
 				if progress.status:
-					retriever.suspend()
+					canceled = True
 				while gtk.events_pending():
 					gtk.main_iteration()
 			progress.close()
 			urlcleanup()
 		except:
+			canceled = True
 			gutils.warning(self, _("Sorry. A connection error has occurred."))
+			try:
+				os.remove(file_to_copy)
+			except:
+				self.debug.show("no permission for %s"%file_to_copy)
 
-	if  os.path.isfile(file_to_copy):
-		try:
-			im = Image.open(file_to_copy)
-		except IOError:
-			self.debug.show("failed to identify %s"%file_to_copy)
-
-		if im.size == (1,1):
-			from urllib import FancyURLopener, urlretrieve
-			url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result.Item[f].ASIN).read()
-			if url.find('no-img-sm._V47056216_.gif') > 0:
-				self.debug.show('No image available')
-				gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
-				return False
-			url = gutils.after(url, 'id="imageViewerDiv"><img src="')
-			url = gutils.before(url, '" id="prodImage"')
-			urlretrieve(url, file_to_copy)
+	if not canceled:
+		if  os.path.isfile(file_to_copy):
 			try:
 				im = Image.open(file_to_copy)
 			except IOError:
 				self.debug.show("failed to identify %s"%file_to_copy)
 
-		if im.mode != 'RGB': # convert GIFs
-			im = im.convert('RGB')
-			im.save(file_to_copy, 'JPEG')
+			if im.size == (1,1):
+				from urllib import FancyURLopener, urlretrieve
+				url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result.Item[f].ASIN).read()
+				if url.find('no-img-sm._V47056216_.gif') > 0:
+					self.debug.show('No image available')
+					gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
+					return False
+				url = gutils.after(url, 'id="imageViewerDiv"><img src="')
+				url = gutils.before(url, '" id="prodImage"')
+				urlretrieve(url, file_to_copy)
+				try:
+					im = Image.open(file_to_copy)
+				except IOError:
+					self.debug.show("failed to identify %s"%file_to_copy)
+
+			if im.mode != 'RGB': # convert GIFs
+				im = im.convert('RGB')
+				im.save(file_to_copy, 'JPEG')
 		
-		handler = self.widgets['big_poster'].set_from_file(file_to_copy)
+			handler = self.widgets['big_poster'].set_from_file(file_to_copy)
 
-		self.widgets['poster_window'].show()
-		self.widgets['poster_window'].move(0,0)
-		response = gutils.question(self, \
+			self.widgets['poster_window'].show()
+			self.widgets['poster_window'].move(0,0)
+			response = gutils.question(self, \
 				_("Do you want to use this poster instead?"), \
 				1, self.widgets['window'])
-		if response == -8:
-			self.debug.show("Using fetched poster, updating and removing old one from disk.")
-			update_image(self, self.widgets['movie']['number'].get_text().decode('utf-8'), file_to_copy)
+			if response == -8:
+				self.debug.show("Using fetched poster, updating and removing old one from disk.")
+				update_image(self, self.widgets['movie']['number'].get_text().decode('utf-8'), file_to_copy)
+			else:
+				self.debug.show("Reverting to previous poster and deleting new one from disk.")
+				try:
+					os.remove(file_to_copy)
+				except:
+					self.debug.show("no permission for %s"%file_to_copy)
+
+			self.widgets['poster_window'].hide()
 		else:
-			self.debug.show("Reverting to previous poster and deleting new one from disk.")
-			try:
-				os.remove(file_to_copy)
-			except:
-				self.debug.show("no permission for %s"%file_to_copy)
-
-		self.widgets['poster_window'].hide()
-	else:
-		gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
+			gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
 	reconnect_add_signals(self)
 

Modified: trunk/lib/edit.py
===================================================================
--- trunk/lib/edit.py	2009-01-14 22:10:48 UTC (rev 1116)
+++ trunk/lib/edit.py	2009-01-15 13:07:58 UTC (rev 1117)
@@ -160,7 +160,26 @@
         locale = None
 
     try:
-        result = amazon.searchByKeyword(keyword, type="Large", product_line="DVD", locale=locale)
+        result = amazon.searchByTitle(keyword, type="Large", product_line="DVD", locale=locale)
+        if hasattr(result, 'TotalPages'):
+            # get next result pages
+            pages = int(result.TotalPages)
+            page = 2
+            while page <= pages and page < 11:
+                tmp = amazon.searchByTitle(keyword, type='Large', product_line='DVD', locale=locale, page=page)
+                result.Item.extend(tmp.Item)
+                page = page + 1
+        if not hasattr(result, 'Item') or not len(result.Item):
+            # fallback if nothing is found by title
+            result = amazon.searchByKeyword(keyword, type="Large", product_line="DVD", locale=locale)
+            if hasattr(result, 'TotalPages'):
+                # get next result pages
+                pages = int(result.TotalPages)
+                page = 2
+                while page <= pages and page < 11:
+                    tmp = amazon.searchByKeyword(keyword, type='Large', product_line='DVD', locale=locale, page=page)
+                    result.Item.extend(tmp.Item)
+                    page = page + 1
         log.info("... %s posters found" % result.TotalResults)
     except:
         gutils.warning(self, _("No posters found for this movie."))
@@ -207,7 +226,7 @@
     if event.type == gtk.gdk._2BUTTON_PRESS:
         get_poster(mself, None, result)
 
-def get_poster_select(self, mself, result):
+def get_poster_select(self, mself, result, current_poster):
     get_poster(mself, None, result)
 
 def get_poster(self, f, result):
@@ -223,6 +242,7 @@
     file_to_copy = tempfile.mktemp(suffix=self.widgets['movie']['number'].get_text(), \
         dir=self.locations['temp'])
     file_to_copy += ".jpg"
+    canceled = False
     if len(result.Item[f].LargeImage.URL):
         try:
             progress = movie.Progress(self.widgets['window'],_("Fetching poster"),_("Wait a moment"))
@@ -231,55 +251,61 @@
             while retriever.isAlive():
                 progress.pulse()
                 if progress.status:
-                    retriever.suspend()
+                    canceled = True
                 while gtk.events_pending():
                     gtk.main_iteration()
             progress.close()
             urlcleanup()
         except:
+            canceled = True
             gutils.warning(self, _("Sorry. A connection error has occurred."))
+            try:
+                os.remove(file_to_copy)
+            except:
+                log.error("no permission for %s"%file_to_copy)
 
-    if os.path.isfile(file_to_copy):
-        try:
-            im = Image.open(file_to_copy)
-        except IOError:
-            log.warn("failed to identify %s"%file_to_copy)
-
-        if im.size == (1,1):
-            url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result.Item[f].ASIN).read()
-            if url.find('no-img-sm._V47056216_.gif') > 0:
-                log.warn('No image available')
-                gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
-                return False
-            url = gutils.after(url, 'id="imageViewerDiv"><img src="')
-            url = gutils.before(url, '" id="prodImage"')
-            urlretrieve(url, file_to_copy)
+    if not canceled:
+        if os.path.isfile(file_to_copy):
             try:
                 im = Image.open(file_to_copy)
             except IOError:
                 log.warn("failed to identify %s"%file_to_copy)
 
-        if im.mode != 'RGB': # convert GIFs
-            im = im.convert('RGB')
-            im.save(file_to_copy, 'JPEG')
+            if im.size == (1,1):
+                url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result.Item[f].ASIN).read()
+                if url.find('no-img-sm._V47056216_.gif') > 0:
+                    log.warn('No image available')
+                    gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
+                    return False
+                url = gutils.after(url, 'id="imageViewerDiv"><img src="')
+                url = gutils.before(url, '" id="prodImage"')
+                urlretrieve(url, file_to_copy)
+                try:
+                    im = Image.open(file_to_copy)
+                except IOError:
+                    log.warn("failed to identify %s"%file_to_copy)
+
+            if im.mode != 'RGB': # convert GIFs
+                im = im.convert('RGB')
+                im.save(file_to_copy, 'JPEG')
         
-        handler = self.widgets['big_poster'].set_from_file(file_to_copy)
+            handler = self.widgets['big_poster'].set_from_file(file_to_copy)
 
-        self.widgets['poster_window'].show()
-        self.widgets['poster_window'].move(0,0)
-        response = gutils.question(_("Do you want to use this poster instead?"), True, self.widgets['window'])
-        if response == -8:
-            log.info("Using fetched poster, updating and removing old one from disk.")
-            update_image(self, self.widgets['movie']['number'].get_text(), file_to_copy)
+            self.widgets['poster_window'].show()
+            self.widgets['poster_window'].move(0,0)
+            response = gutils.question(_("Do you want to use this poster instead?"), True, self.widgets['window'])
+            if response == -8:
+                log.info("Using fetched poster, updating and removing old one from disk.")
+                update_image(self, self.widgets['movie']['number'].get_text(), file_to_copy)
+            else:
+                log.info("Reverting to previous poster and deleting new one from disk.")
+                try:
+                    os.remove(file_to_copy)
+                except:
+                    log.error("no permission for %s"%file_to_copy)
+
+            self.widgets['poster_window'].hide()
         else:
-            log.info("Reverting to previous poster and deleting new one from disk.")
-            try:
-                os.remove(file_to_copy)
-            except:
-                log.error("no permission for %s"%file_to_copy)
-
-        self.widgets['poster_window'].hide()
-    else:
-        gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
+            gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))
     reconnect_add_signals(self)
 



From mikej06 at mail.berlios.de  Thu Jan 15 14:18:05 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 15 Jan 2009 14:18:05 +0100
Subject: [Griffith-svn] r1118 - branches/0.9.x/lib
Message-ID: <200901151318.n0FDI5Cu013342@sheep.berlios.de>

Author: mikej06
Date: 2009-01-15 14:18:00 +0100 (Thu, 15 Jan 2009)
New Revision: 1118

Modified:
   branches/0.9.x/lib/edit.py
Log:
indentation error

Modified: branches/0.9.x/lib/edit.py
===================================================================
--- branches/0.9.x/lib/edit.py	2009-01-15 13:07:58 UTC (rev 1117)
+++ branches/0.9.x/lib/edit.py	2009-01-15 13:18:00 UTC (rev 1118)
@@ -228,7 +228,7 @@
 	file_to_copy = tempfile.mktemp(suffix=self.widgets['movie']['number'].get_text().decode('utf-8'), \
 		dir=self.locations['temp'])
 	file_to_copy += ".jpg"
-		canceled = False
+	canceled = False
 	if len(result.Item[f].LargeImage.URL):
 		try:
 			progress = movie.Progress(self.widgets['window'],_("Fetching poster"),_("Wait a moment"))



From mikej06 at mail.berlios.de  Thu Jan 15 14:31:10 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 15 Jan 2009 14:31:10 +0100
Subject: [Griffith-svn] r1119 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901151331.n0FDVAZp015251@sheep.berlios.de>

Author: mikej06
Date: 2009-01-15 14:30:56 +0100 (Thu, 15 Jan 2009)
New Revision: 1119

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieAmazon.py
Log:
added ASIN to amazon result list; added missing amazon result pages

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-15 13:18:00 UTC (rev 1118)
+++ branches/0.9.x/ChangeLog	2009-01-15 13:30:56 UTC (rev 1119)
@@ -2,9 +2,13 @@
 
 Griffith ChangeLog
 ------------------
-(c) 2005-2008  Vasco Nunes, Piotr O?arowski
+(c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-15  Michael Jahn
+	* Amazon movie plugin updated
+	* better results for amazon poster search
+
 2009-01-06  Michael Jahn
 	* MovieFone movie plugin updated
 	* windows installer: movie import plugins deselectable from installation

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py	2009-01-15 13:18:00 UTC (rev 1118)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py	2009-01-15 13:30:56 UTC (rev 1119)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2006-2008
+# Copyright (c) 2006-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -32,13 +32,13 @@
 from operator import isSequenceType
 from urlparse import urlsplit
 
-plugin_name = "Amazon"
-plugin_description = "Amazon"
-plugin_url = "www.amazon.com/.uk/.de/.ca/.fr/.jp"
-plugin_language = _("International")
-plugin_author = "Michael Jahn"
+plugin_name         = "Amazon"
+plugin_description  = "Amazon"
+plugin_url          = "www.amazon.com/.uk/.de/.ca/.fr/.jp"
+plugin_language     = _("International")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.0"
+plugin_version      = "1.1"
 
 class Plugin(movie.Movie):
 
@@ -289,7 +289,7 @@
 			theatricalReleaseDate = ' (' + item.ItemAttributes.TheatricalReleaseDate + ')'
 		else:
 			theatricalReleaseDate = ''
-		self.titles.append("%s%s%s" % (productGroup, title, theatricalReleaseDate))
+		self.titles.append("%s%s%s (ASIN: %s)" % (productGroup, title, theatricalReleaseDate, item.ASIN))
 
 class AmazonRetriever(threading.Thread):
 
@@ -321,9 +321,9 @@
 				tmp = amazon.searchByTitle(self.title, type='ItemAttributes', product_line='Video', locale=self.locale, page=1)
 				self.result.append(tmp)
 				if hasattr(tmp, 'TotalPages'):
-					pages = int(tmp.TotalPages) - 1
+					pages = int(tmp.TotalPages)
 					page = 2
-					while page < pages and page < 11:
+					while page <= pages and page < 11:
 						tmp = amazon.searchByTitle(self.title, type='ItemAttributes', product_line='Video', locale=self.locale, page=page)
 						self.result.append(tmp)
 						page = page + 1

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-15 13:18:00 UTC (rev 1118)
+++ trunk/ChangeLog	2009-01-15 13:30:56 UTC (rev 1119)
@@ -2,9 +2,13 @@
 
 Griffith ChangeLog
 ------------------
-(c) 2005-2008  Vasco Nunes, Piotr O?arowski
+(c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-15  Michael Jahn
+	* Amazon movie plugin updated
+	* better results for amazon poster search
+
 2009-01-06  Michael Jahn
 	* MovieFone movie plugin updated
 	* windows installer: movie import plugins deselectable from installation

Modified: trunk/lib/plugins/movie/PluginMovieAmazon.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAmazon.py	2009-01-15 13:18:00 UTC (rev 1118)
+++ trunk/lib/plugins/movie/PluginMovieAmazon.py	2009-01-15 13:30:56 UTC (rev 1119)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2006-2008
+# Copyright (c) 2006-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -33,13 +33,13 @@
 import logging
 log = logging.getLogger("Griffith")
 
-plugin_name = "Amazon"
-plugin_description = "Amazon"
-plugin_url = "www.amazon.com/.uk/.de/.ca/.fr/.jp"
-plugin_language = _("International")
-plugin_author = "Michael Jahn"
+plugin_name         = "Amazon"
+plugin_description  = "Amazon"
+plugin_url          = "www.amazon.com/.uk/.de/.ca/.fr/.jp"
+plugin_language     = _("International")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.0"
+plugin_version      = "1.1"
 
 class Plugin(movie.Movie):
 
@@ -290,7 +290,7 @@
             theatricalReleaseDate = ' (' + item.ItemAttributes.TheatricalReleaseDate + ')'
         else:
             theatricalReleaseDate = ''
-        self.titles.append("%s%s%s" % (productGroup, title, theatricalReleaseDate))
+        self.titles.append("%s%s%s (ASIN: %s)" % (productGroup, title, theatricalReleaseDate, item.ASIN))
 
 class AmazonRetriever(threading.Thread):
 
@@ -321,9 +321,9 @@
                 tmp = amazon.searchByTitle(self.title, type='ItemAttributes', product_line='Video', locale=self.locale, page=1)
                 self.result.append(tmp)
                 if hasattr(tmp, 'TotalPages'):
-                    pages = int(tmp.TotalPages) - 1
+                    pages = int(tmp.TotalPages)
                     page = 2
-                    while page < pages and page < 11:
+                    while page <= pages and page < 11:
                         tmp = amazon.searchByTitle(self.title, type='ItemAttributes', product_line='Video', locale=self.locale, page=page)
                         self.result.append(tmp)
                         page = page + 1



From mikej06 at mail.berlios.de  Thu Jan 15 21:40:21 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 15 Jan 2009 21:40:21 +0100
Subject: [Griffith-svn] r1120 - in trunk: . lib lib/plugins/movie
Message-ID: <200901152040.n0FKeLv3014263@sheep.berlios.de>

Author: mikej06
Date: 2009-01-15 21:39:18 +0100 (Thu, 15 Jan 2009)
New Revision: 1120

Modified:
   trunk/ChangeLog
   trunk/lib/add.py
   trunk/lib/movie.py
   trunk/lib/plugins/movie/PluginMovieIMDB.py
Log:
movie plugin base class prepared for fetching screenplay and cameraman,
added fetching of screenplay to IMDB plugin 

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-15 13:30:56 UTC (rev 1119)
+++ trunk/ChangeLog	2009-01-15 20:39:18 UTC (rev 1120)
@@ -8,6 +8,8 @@
 2009-01-15  Michael Jahn
 	* Amazon movie plugin updated
 	* better results for amazon poster search
+	* movie plugin base class prepared for fetching screenplay and cameraman,
+	  added fetching of screenplay to IMDB plugin 
 
 2009-01-06  Michael Jahn
 	* MovieFone movie plugin updated

Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2009-01-15 13:30:56 UTC (rev 1119)
+++ trunk/lib/add.py	2009-01-15 20:39:18 UTC (rev 1120)
@@ -182,7 +182,7 @@
     
     fields_to_fetch = ['o_title', 'title', 'director', 'plot', 'cast', 'country', 'genre',
                 'classification', 'studio', 'o_site', 'site', 'trailer', 'year',
-                'notes', 'runtime', 'image', 'rating']
+                'notes', 'runtime', 'image', 'rating', 'screenplay', 'cameraman']
     # remove fields that user doesn't want to fetch: (see preferences window)
     fields_to_fetch = [ i for i in fields_to_fetch if self.config.get("s_%s" % i, True, section='add') ]
 

Modified: trunk/lib/movie.py
===================================================================
--- trunk/lib/movie.py	2009-01-15 13:30:56 UTC (rev 1119)
+++ trunk/lib/movie.py	2009-01-15 20:39:18 UTC (rev 1120)
@@ -53,6 +53,8 @@
     title = None
     trailer = None
     year = None
+    screenplay = None
+    cameraman = None
     
     movie_id = None
     debug = False
@@ -106,6 +108,10 @@
         pass
     def get_year(self):
         pass
+    def get_screenplay(self):
+        pass
+    def get_cameraman(self):
+        pass
     #}}}
 
     def __getitem__(self, key):

Modified: trunk/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-01-15 13:30:56 UTC (rev 1119)
+++ trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-01-15 20:39:18 UTC (rev 1120)
@@ -24,13 +24,13 @@
 import gutils, movie
 import string, re
 
-plugin_name = 'IMDb'
-plugin_description = 'Internet Movie Database'
-plugin_url = 'www.imdb.com'
-plugin_language = _('English')
-plugin_author = 'Vasco Nunes, Piotr O?arowski'
+plugin_name         = 'IMDb'
+plugin_description  = 'Internet Movie Database'
+plugin_url          = 'www.imdb.com'
+plugin_language     = _('English')
+plugin_author       = 'Vasco Nunes, Piotr O?arowski'
 plugin_author_email = 'griffith-private at lists.berlios.de'
-plugin_version = '1.7'
+plugin_version      = '1.8'
 
 class Plugin(movie.Movie):
     def __init__(self, id):
@@ -163,7 +163,18 @@
             self.notes += "%s: %s\n" %(_('Color'), color)
         if len(tagline)>0:
             self.notes += "%s: %s\n" %('Tagline', tagline)
-    
+
+    def get_screenplay(self):
+        self.screenplay = ''
+        pattern = re.compile('<h5>Writer[s]*?(?:[ \t]+<a href="/wga">[(]WGA[)]</a>)*?:</h5>[\n\s\r]*(.*?)(?:<br/>)?(?:<a[^>]+>more</a>)?[\n]*</div')
+        result = pattern.search(self.page)
+        if result:
+            self.screenplay = result.groups()[0]
+            self.screenplay = self.screenplay.replace('<br/>', ', ')
+
+    def get_camerman(self):
+        self.camerman = ''
+
     def __before_more(self, data):
         tmp = string.find(data, '>more<')
         if tmp > 0:



From piotrek at mail.berlios.de  Thu Jan 15 23:17:44 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Thu, 15 Jan 2009 23:17:44 +0100
Subject: [Griffith-svn] r1121 - trunk/lib
Message-ID: <200901152217.n0FMHi20025039@sheep.berlios.de>

Author: piotrek
Date: 2009-01-15 23:17:43 +0100 (Thu, 15 Jan 2009)
New Revision: 1121

Modified:
   trunk/lib/db.py
   trunk/lib/sql.py
Log:
tell MySQL to use UTF-8; use_unicode disabled as MySQLdb module has some problems with leaking memory


Modified: trunk/lib/db.py
===================================================================
--- trunk/lib/db.py	2009-01-15 20:39:18 UTC (rev 1120)
+++ trunk/lib/db.py	2009-01-15 22:17:43 UTC (rev 1121)
@@ -265,11 +265,11 @@
 
 posters_table = Table('posters', metadata,
     Column('md5sum', Unicode(32), primary_key=True),
-    Column('data', BLOB, nullable=False))
+    Column('data', Binary, nullable=False))
 
 filters_table = Table('filters', metadata,
     Column('name', Unicode(64), primary_key=True),
-    Column('data', BLOB, nullable=False))
+    Column('data', Binary, nullable=False))
 
 tables = {
     'movies':         movies_table,

Modified: trunk/lib/sql.py
===================================================================
--- trunk/lib/sql.py	2009-01-15 20:39:18 UTC (rev 1120)
+++ trunk/lib/sql.py	2009-01-15 22:17:43 UTC (rev 1121)
@@ -70,7 +70,7 @@
         elif config.get('type', section='database') == 'mysql':
             if config.get('port', 0, section='database')==0:
                 config.set('port', 3306, section='database')
-            url = "mysql://%s:%s@%s:%d/%s" % (
+            url = "mysql://%s:%s@%s:%d/%s?charset=utf8&use_unicode=0" % (
                 config.get('user', section='database'),
                 config.get('passwd', section='database'),
                 config.get('host', section='database'),



From pantano.luigi at gmail.com  Fri Jan 16 13:24:51 2009
From: pantano.luigi at gmail.com (Luigi Pantano)
Date: Fri, 16 Jan 2009 12:24:51 +0000
Subject: [Griffith-svn] Bug #317837: "007 James Bond"
Message-ID: <8db1e3700901160424t2e9847e7k7ae3ff3382afeeff@mail.gmail.com>

Every film that begins with "0" doesn't recognized in the category
'0-9' when export PDF.

-- 
Luigi Pantano
---------------------------------------------------------------------------
Contatti:
jabber: bornfreethinker at jabber.linux.it
ekiga: sip:bornfreethinker at ekiga.net
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: diff.txt
URL: <https://lists.berlios.de/pipermail/griffith-svn/attachments/20090116/f40297ca/attachment.txt>

From mikej06 at mail.berlios.de  Fri Jan 16 21:59:28 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Fri, 16 Jan 2009 21:59:28 +0100
Subject: [Griffith-svn] r1122 - branches/0.9.x
	branches/0.9.x/lib/plugins/export trunk trunk/lib/plugins/export
Message-ID: <200901162059.n0GKxSDV031419@sheep.berlios.de>

Author: mikej06
Date: 2009-01-16 21:58:58 +0100 (Fri, 16 Jan 2009)
New Revision: 1122

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/export/PluginExportPDF.py
   trunk/ChangeLog
   trunk/lib/plugins/export/PluginExportPDF.py
Log:
[#317837] 007 james bond (PDF export grouping error)
error fixed dereferencing none in PDF export plugin

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-15 22:17:43 UTC (rev 1121)
+++ branches/0.9.x/ChangeLog	2009-01-16 20:58:58 UTC (rev 1122)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-16  Michael Jahn
+	* [#317837] 007 james bond (PDF export grouping error)
+
 2009-01-15  Michael Jahn
 	* Amazon movie plugin updated
 	* better results for amazon poster search

Modified: branches/0.9.x/lib/plugins/export/PluginExportPDF.py
===================================================================
--- branches/0.9.x/lib/plugins/export/PluginExportPDF.py	2009-01-15 22:17:43 UTC (rev 1121)
+++ branches/0.9.x/lib/plugins/export/PluginExportPDF.py	2009-01-16 20:58:58 UTC (rev 1122)
@@ -122,7 +122,7 @@
                         else:
                             movies.order_by_clause.append(self.db.Movie.c[i])
                 movies = movies.execute().fetchall()
-                first_letter = '0'
+                first_letter = ''
                 for movie in movies:
                     number = movie.number
                     original_title = str(movie.o_title).encode(defaultEnc)

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-15 22:17:43 UTC (rev 1121)
+++ trunk/ChangeLog	2009-01-16 20:58:58 UTC (rev 1122)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-16  Michael Jahn
+	* [#317837] 007 james bond (PDF export grouping error)
+
 2009-01-15  Michael Jahn
 	* Amazon movie plugin updated
 	* better results for amazon poster search

Modified: trunk/lib/plugins/export/PluginExportPDF.py
===================================================================
--- trunk/lib/plugins/export/PluginExportPDF.py	2009-01-15 22:17:43 UTC (rev 1121)
+++ trunk/lib/plugins/export/PluginExportPDF.py	2009-01-16 20:58:58 UTC (rev 1122)
@@ -120,11 +120,17 @@
                 Story.append(p)
                 Story.append(Paragraph(" ",style))
                 # output movies
-                first_letter = '0'
+                first_letter = ''
                 for movie in movies:
                     number = movie.number
-                    original_title = movie.o_title.encode(defaultEnc)
-                    title = movie.title.encode(defaultEnc)
+                    if movie.o_title:
+                        original_title = movie.o_title.encode(defaultEnc)
+                    else:
+                        original_title = ''
+                    if movie.title:
+                        title = movie.title.encode(defaultEnc)
+                    else:
+                        title = ''
                     grouping_title = movie.title
                     if grouping_title is None:
                         grouping_title = u'None'



From mikej06 at mail.berlios.de  Fri Jan 16 22:24:42 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Fri, 16 Jan 2009 22:24:42 +0100
Subject: [Griffith-svn] r1123 - trunk/lib
Message-ID: <200901162124.n0GLOgim001340@sheep.berlios.de>

Author: mikej06
Date: 2009-01-16 22:24:31 +0100 (Fri, 16 Jan 2009)
New Revision: 1123

Modified:
   trunk/lib/add.py
Log:
missing part for [#303732] Errors in fetching german descriptions from amazon

Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2009-01-16 20:58:58 UTC (rev 1122)
+++ trunk/lib/add.py	2009-01-16 21:24:31 UTC (rev 1123)
@@ -365,9 +365,9 @@
         'medium_id'      : w['media'].get_active(),
         'volume_id'      : w['volume'].get_active(),
         'vcodec_id'      : w['vcodec'].get_active(),
-        'cast'           : cast_buffer.get_text(cast_buffer.get_start_iter(),cast_buffer.get_end_iter()),
-        'notes'          : notes_buffer.get_text(notes_buffer.get_start_iter(),notes_buffer.get_end_iter()),
-        'plot'           : plot_buffer.get_text(plot_buffer.get_start_iter(),plot_buffer.get_end_iter()),
+        'cast'           : cast_buffer.get_text(cast_buffer.get_start_iter(),cast_buffer.get_end_iter()).decode('utf-8'),
+        'notes'          : notes_buffer.get_text(notes_buffer.get_start_iter(),notes_buffer.get_end_iter()).decode('utf-8'),
+        'plot'           : plot_buffer.get_text(plot_buffer.get_start_iter(),plot_buffer.get_end_iter()).decode('utf-8'),
     }
     if self._am_movie_id is not None:
         t_movies['movie_id'] = self._am_movie_id



From piotrek at mail.berlios.de  Fri Jan 16 23:33:26 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Fri, 16 Jan 2009 23:33:26 +0100
Subject: [Griffith-svn] r1124 - trunk/lib
Message-ID: <200901162233.n0GMXQXw009335@sheep.berlios.de>

Author: piotrek
Date: 2009-01-16 23:33:25 +0100 (Fri, 16 Jan 2009)
New Revision: 1124

Modified:
   trunk/lib/gconsole.py
Log:
show dependencies at startup if debug mode is on


Modified: trunk/lib/gconsole.py
===================================================================
--- trunk/lib/gconsole.py	2009-01-16 21:24:31 UTC (rev 1123)
+++ trunk/lib/gconsole.py	2009-01-16 22:33:25 UTC (rev 1124)
@@ -64,6 +64,8 @@
                 sys.exit()
             elif o in ('-D', '--debug'):
                 log.setLevel(logging.DEBUG)
+                log.debug('Dependencies:')
+                show_dependencies()
             elif o == '--sqlecho':
                 sa_log = logging.getLogger("sqlalchemy")
                 sa_log.setLevel(logging.INFO)



From piotrek at mail.berlios.de  Fri Jan 16 23:52:43 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Fri, 16 Jan 2009 23:52:43 +0100
Subject: [Griffith-svn] r1125 - trunk/lib
Message-ID: <200901162252.n0GMqhcX011296@sheep.berlios.de>

Author: piotrek
Date: 2009-01-16 23:52:43 +0100 (Fri, 16 Jan 2009)
New Revision: 1125

Modified:
   trunk/lib/gconsole.py
   trunk/lib/initialize.py
Log:
show platform in debug mode as well (can be useful)


Modified: trunk/lib/gconsole.py
===================================================================
--- trunk/lib/gconsole.py	2009-01-16 22:33:25 UTC (rev 1124)
+++ trunk/lib/gconsole.py	2009-01-16 22:52:43 UTC (rev 1125)
@@ -63,9 +63,11 @@
                 print version.pversion
                 sys.exit()
             elif o in ('-D', '--debug'):
+                from platform import platform
                 log.setLevel(logging.DEBUG)
                 log.debug('Dependencies:')
                 show_dependencies()
+                log.debug("Platform: %s (%s)", platform(), os.name)
             elif o == '--sqlecho':
                 sa_log = logging.getLogger("sqlalchemy")
                 sa_log.setLevel(logging.INFO)

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-01-16 22:33:25 UTC (rev 1124)
+++ trunk/lib/initialize.py	2009-01-16 22:52:43 UTC (rev 1125)
@@ -125,7 +125,6 @@
 
 def gui(self):
     self._ = None
-    log.info("running on %s - %s", os.name, platform.system())
 
     if platform.system() == 'Darwin':
         self.mac = True
@@ -137,7 +136,6 @@
     if self.windows:
         gtk.rc_parse('%s\\gtkrc' % self.locations['exec'])
 
-
     gf = os.path.join(self.locations['glade'], 'griffith.glade')
     from widgets import define_widgets
     define_widgets(self, gtk.glade.XML(gf))



From piotrek at mail.berlios.de  Sat Jan 17 00:03:45 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sat, 17 Jan 2009 00:03:45 +0100
Subject: [Griffith-svn] r1126 - in trunk: . lib
Message-ID: <200901162303.n0GN3jk5012156@sheep.berlios.de>

Author: piotrek
Date: 2009-01-17 00:03:41 +0100 (Sat, 17 Jan 2009)
New Revision: 1126

Modified:
   trunk/ChangeLog
   trunk/lib/gconsole.py
   trunk/lib/version.py
Log:
Print move details during startup in debug mode


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-16 22:52:43 UTC (rev 1125)
+++ trunk/ChangeLog	2009-01-16 23:03:41 UTC (rev 1126)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-16  Piotr O?arowski
+	* Print move details during startup in debug mode
+
 2009-01-16  Michael Jahn
 	* [#317837] 007 james bond (PDF export grouping error)
 

Modified: trunk/lib/gconsole.py
===================================================================
--- trunk/lib/gconsole.py	2009-01-16 22:52:43 UTC (rev 1125)
+++ trunk/lib/gconsole.py	2009-01-16 23:03:41 UTC (rev 1126)
@@ -64,10 +64,12 @@
                 sys.exit()
             elif o in ('-D', '--debug'):
                 from platform import platform
+                import version
                 log.setLevel(logging.DEBUG)
+                log.debug("Starting %s %s", version.pname, version.pversion)
+                log.debug("Platform: %s (%s)", platform(), os.name)
                 log.debug('Dependencies:')
                 show_dependencies()
-                log.debug("Platform: %s (%s)", platform(), os.name)
             elif o == '--sqlecho':
                 sa_log = logging.getLogger("sqlalchemy")
                 sa_log.setLevel(logging.INFO)

Modified: trunk/lib/version.py
===================================================================
--- trunk/lib/version.py	2009-01-16 22:52:43 UTC (rev 1125)
+++ trunk/lib/version.py	2009-01-16 23:03:41 UTC (rev 1126)
@@ -24,6 +24,6 @@
 pname        = "Griffith"
 pversion     = "0.10-beta2~svn"
 pauthor      = "Vasco Nunes, Piotr O?arowski <griffith-private at lists.berlios.de>"
-pyear        = "2005-2008"
+pyear        = "2005-2009"
 pwebsite     = "http://www.griffith.cc/"
 pdescription = _("Griffith is a film collection manager.")



From piotrek at mail.berlios.de  Sat Jan 17 20:19:51 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sat, 17 Jan 2009 20:19:51 +0100
Subject: [Griffith-svn] r1127 - in trunk: . lib
Message-ID: <200901171919.n0HJJplE016276@sheep.berlios.de>

Author: piotrek
Date: 2009-01-17 20:19:50 +0100 (Sat, 17 Jan 2009)
New Revision: 1127

Modified:
   trunk/ChangeLog
   trunk/lib/db.py
   trunk/lib/dbupgrade.py
   trunk/lib/edit.py
Log:
Use MediumBLOB on MySQL to store posters. Database has to be recreated if 0.10-beta1 was used to create it.


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-16 23:03:41 UTC (rev 1126)
+++ trunk/ChangeLog	2009-01-17 19:19:50 UTC (rev 1127)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-17  Piotr O?arowski
+	* Use MediumBLOB on MySQL to store posters. Database has to be recreated if 0.10-beta1 was used to create it.
+
 2009-01-16  Piotr O?arowski
 	* Print move details during startup in debug mode
 

Modified: trunk/lib/db.py
===================================================================
--- trunk/lib/db.py	2009-01-16 23:03:41 UTC (rev 1126)
+++ trunk/lib/db.py	2009-01-17 19:19:50 UTC (rev 1127)
@@ -265,7 +265,7 @@
 
 posters_table = Table('posters', metadata,
     Column('md5sum', Unicode(32), primary_key=True),
-    Column('data', Binary, nullable=False))
+    Column('data', Binary(1048576), nullable=False))
 
 filters_table = Table('filters', metadata,
     Column('name', Unicode(64), primary_key=True),

Modified: trunk/lib/dbupgrade.py
===================================================================
--- trunk/lib/dbupgrade.py	2009-01-16 23:03:41 UTC (rev 1126)
+++ trunk/lib/dbupgrade.py	2009-01-17 19:19:50 UTC (rev 1127)
@@ -33,6 +33,7 @@
     """Create new db or update existing one to current format"""
     b = self.session.bind
     if version == 0 or version is None:
+        log.info('Creating new database...')
         # version is 0 or none only for new databases
         db.metadata.create_all(b)
         db.configuration_table.insert(bind=b).execute(param=u'version', value=unicode(self.version))

Modified: trunk/lib/edit.py
===================================================================
--- trunk/lib/edit.py	2009-01-16 23:03:41 UTC (rev 1126)
+++ trunk/lib/edit.py	2009-01-17 19:19:50 UTC (rev 1127)
@@ -140,7 +140,10 @@
         gutils.error(self,_("You have no movies in your database"), self.widgets['window'])
         return False
     current_poster_md5 = movie.poster_md5
-    current_poster = gutils.get_image_fname(current_poster_md5, self.db)
+    if current_poster_md5:
+        current_poster = gutils.get_image_fname(current_poster_md5, self.db)
+    else:
+        current_poster = None
     amazon.setLicense("04GDDMMXX8X9CJ1B22G2")
 
     locale = self.config.get('amazon_locale', 0, section='add')



From piotrek at mail.berlios.de  Sat Jan 17 21:09:47 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sat, 17 Jan 2009 21:09:47 +0100
Subject: [Griffith-svn] r1128 - trunk
Message-ID: <200901172009.n0HK9lPg019844@sheep.berlios.de>

Author: piotrek
Date: 2009-01-17 21:09:47 +0100 (Sat, 17 Jan 2009)
New Revision: 1128

Modified:
   trunk/griffith
Log:
New database: fix removing old posters


Modified: trunk/griffith
===================================================================
--- trunk/griffith	2009-01-17 19:19:50 UTC (rev 1127)
+++ trunk/griffith	2009-01-17 20:09:47 UTC (rev 1128)
@@ -160,7 +160,7 @@
 
     ###########
     # callbacks
-    ###########        
+    ###########
 
     def on_export_activate(self, menu_iter, plugin_name):
         module = __import__('PluginExport%s' % plugin_name)
@@ -202,9 +202,8 @@
                 self.mainwindow_state = {}
             self.mainwindow_state['state'] = int(windowstate.new_window_state & gtk.gdk.WINDOW_STATE_MAXIMIZED)
 
+    # about dialog    -------------------------------------------------------
 
-    # about dialog    -------------------------------------------------------            
-
     def about_dialog(self, *args):
         from about import AboutDialog
         about_dialog = AboutDialog(self.locations)
@@ -240,7 +239,7 @@
         add.source_changed(self)
 
     def on_enter(self, *args):
-        # push Get From Web button if return key is pressed in title box 
+        # push Get From Web button if return key is pressed in title box
         if self._am_movie_id is None:
             self.widgets['add']['b_get_from_web'].clicked()
 
@@ -354,9 +353,9 @@
         if tmp_iter is None:
             return
         number = tmp_model.get_value(tmp_iter, 0)
-        movie = self.db.session.query(db.Movie).filter_by(number=number).first()
-        if movie and movie.poster_md5:
-            filename = gutils.get_image_fname(movie.poster_md5, self.db)
+        poster_md5 = self.db.session.query(db.Movie.poster_md5).filter_by(number=number).first()[0]
+        if poster_md5:
+            filename = gutils.get_image_fname(poster_md5, self.db)
             self.widgets['big_poster'].set_from_file(filename)
             self.widgets['poster_window'].show()
 
@@ -376,7 +375,7 @@
     def toggle_seen(self, *args):
         m_number, m_iter = self.get_maintree_selection()
         movie = self.db.session.query(db.Movie).filter_by(number=m_number).first()
-        if movie is not None:
+        if movie:
             if movie.seen:
                 movie.seen = False
             else:
@@ -502,16 +501,15 @@
 
     def show_volume(self, widget):
         import advfilter
-        vol_id = self.db.session.query(db.Movie).filter_by(movie_id=self._movie_id).first().volume_id
+        vol_id = self.db.session.query(db.Movie.volume_id).filter_by(movie_id=self._movie_id).first()[0]
         #quick_filter.clear_filter(self)
         cond = advfilter.get_def_conditions()
         cond["volumes"] = set((vol_id,))
         movies = advfilter.create_select_query(self, None, cond, None).execute().fetchall()
         self.populate_treeview(movies)
 
-
     def show_collection(self, widget):
-        col_id = self.db.session.query(db.Movie).filter_by(movie_id=self._movie_id).first().collection_id
+        col_id = self.db.session.query(db.Movie.collection_id).filter_by(movie_id=self._movie_id).first()[0]
         pos = gutils.findKey(col_id, self.collection_combo_ids)
         quick_filter.clear_filter(self)
         self.widgets['filter']['collection'].set_active(pos)
@@ -1010,7 +1008,7 @@
         else:
             return None, None
 
-    # backup/restore ------------------------------------------------------    
+    # backup/restore ------------------------------------------------------
 
     def backup(self, *args):
         from backup import backup
@@ -1062,7 +1060,7 @@
     def print_cover_image_hide(self, *args):
         self.widgets['print_cover']['window_image'].hide()
 
-    # loans management ----------------------------------------------------    
+    # loans management ----------------------------------------------------
 
     def show_people_window(self, *args):
         from people import show_people_window
@@ -1130,7 +1128,7 @@
         context_id = self.widgets['statusbar'].get_context_id(text)
         message_id = self.widgets['statusbar'].push(context_id, text)
 
-    # advfilter -----------------------------------------------------------    
+    # advfilter -----------------------------------------------------------
 
     def show_advfilter_window(self, *args):
         #if not self.widgets['advfilter']['window'].visible: # FIXME
@@ -1337,6 +1335,7 @@
         response = gutils.question(_('Are you sure you want to create a new database?\nYou will lose ALL your current data!'), \
             True, self.widgets['window'])
         if response == gtk.RESPONSE_YES:
+            log.debug('NEW DATABASE')
             response_sec = gutils.question(_('Last chance!\nDo you confirm that you want\nto lose your current data?'), \
                 True, self.widgets['window'])
             if response_sec == gtk.RESPONSE_YES:
@@ -1345,21 +1344,22 @@
                 # delete images
                 posters_dir = self.locations['posters']
                 # NOTE: only used images are removed (posters are shared between various db)
-                log.info('NEW DB: Removing old images...')
+                log.debug('removing old images...')
                 
-                movies = select([db.movies_table.c.image], bind=self.db.session.bind).execute().fetchall()
-                for movie in movies:
-                    if movie.image is not None:
-                        name = movie.image.encode('utf-8')
-                        p_file = os.path.join(posters_dir, name+'.jpg')
-                        m_file = os.path.join(posters_dir, 'm_'+name+'.jpg')
-                        t_file = os.path.join(posters_dir, 't_'+name+'jpg')
-                        try:
-                            os.remove(p_file)
-                            os.remove(m_file)
-                            os.remove(t_file)
-                        except:
-                            pass
+                posters = self.db.session.query(db.Movie.poster_md5).all()
+                for poster in posters:
+                    name = poster[0]
+                    p_file = os.path.join(posters_dir, name + '.jpg')
+                    m_file = os.path.join(posters_dir, name + '_m.jpg')
+                    s_file = os.path.join(posters_dir, name + '_sjpg')
+                    try:
+                        os.remove(p_file)
+                        os.remove(m_file)
+                        os.remove(s_file)
+                    except Exception, e:
+                        log.debug("Cannot remove %s: %s", name, e)
+
+                log.debug('dropping old tables...')
                 db.metadata.drop_all(self.db.session.bind.engine)
                 #from sqlalchemy.orm import clear_mappers
                 #clear_mappers()
@@ -1368,6 +1368,7 @@
                     if self.config.get('file', 'griffith.db', section='database') == 'griffith.gri':
                         self.config.set('file', 'griffith.db', section='database')
                 # create/connect db
+                log.debug('creating new ones...')
                 self.db = GriffithSQL(self.config, self.griffith_dir, self.locations)
                 self.clear_details()
                 self.total = 0



From piotrek at mail.berlios.de  Sat Jan 17 22:58:06 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sat, 17 Jan 2009 22:58:06 +0100
Subject: [Griffith-svn] r1129 - in trunk: . lib
Message-ID: <200901172158.n0HLw6Kq028659@sheep.berlios.de>

Author: piotrek
Date: 2009-01-17 22:58:04 +0100 (Sat, 17 Jan 2009)
New Revision: 1129

Modified:
   trunk/ChangeLog
   trunk/griffith
   trunk/lib/add.py
   trunk/lib/cover.py
   trunk/lib/db.py
   trunk/lib/delete.py
   trunk/lib/gutils.py
   trunk/lib/initialize.py
   trunk/lib/main_treeview.py
   trunk/lib/people.py
Log:
Few SQL optimizations


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/ChangeLog	2009-01-17 21:58:04 UTC (rev 1129)
@@ -7,6 +7,7 @@
 
 2009-01-17  Piotr O?arowski
 	* Use MediumBLOB on MySQL to store posters. Database has to be recreated if 0.10-beta1 was used to create it.
+	* Few SQL optimizations
 
 2009-01-16  Piotr O?arowski
 	* Print move details during startup in debug mode

Modified: trunk/griffith
===================================================================
--- trunk/griffith	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/griffith	2009-01-17 21:58:04 UTC (rev 1129)
@@ -1341,6 +1341,7 @@
             if response_sec == gtk.RESPONSE_YES:
                 from sqlalchemy import select
                 from sql import GriffithSQL
+                from delete import delete_poster_from_cache
                 # delete images
                 posters_dir = self.locations['posters']
                 # NOTE: only used images are removed (posters are shared between various db)
@@ -1348,16 +1349,7 @@
                 
                 posters = self.db.session.query(db.Movie.poster_md5).all()
                 for poster in posters:
-                    name = poster[0]
-                    p_file = os.path.join(posters_dir, name + '.jpg')
-                    m_file = os.path.join(posters_dir, name + '_m.jpg')
-                    s_file = os.path.join(posters_dir, name + '_sjpg')
-                    try:
-                        os.remove(p_file)
-                        os.remove(m_file)
-                        os.remove(s_file)
-                    except Exception, e:
-                        log.debug("Cannot remove %s: %s", name, e)
+                    delete_poster_from_cache(self, poster[0])
 
                 log.debug('dropping old tables...')
                 db.metadata.drop_all(self.db.session.bind.engine)

Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/add.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -93,7 +93,7 @@
                 else:
                     poster = db.Poster(md5sum=new_poster_md5, data=data)
                     del details["image"]
-                    details["poster_md5"] = new_poster_md5
+                    details['poster_md5'] = new_poster_md5
                     self.db.session.add(poster)
 
                     # delete old image
@@ -635,15 +635,13 @@
         return False
 
     if details['o_title']:
-        tmp_movie = self.db.session.query(db.Movie).filter_by(o_title=details['o_title']).first()
-        if tmp_movie is not None:
+        if self.db.session.query(db.Movie).filter_by(o_title=details['o_title']).count() > 0:
             response = gutils.question(_('Movie with that title already exists, are you sure you want to add?'), \
                                        False, self.widgets['add']['window'])
             if response == gtk.RESPONSE_NO:
                 return False
     if details['title']:
-        tmp_movie = self.db.session.query(db.Movie).filter_by(title=details['title']).first()
-        if tmp_movie is not None:
+        if self.db.session.query(db.Movie).filter_by(title=details['title']).count() > 0:
             response = gutils.question(_('Movie with that title already exists, are you sure you want to add?'), \
                                        False, self.widgets['add']['window'])
             if response == gtk.RESPONSE_NO:

Modified: trunk/lib/cover.py
===================================================================
--- trunk/lib/cover.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/cover.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -85,14 +85,14 @@
     c.setFont(fontName, 8)
     # copyright line
     c.drawString(20, 20 ,_("Cover generated by Griffith v").encode('utf-8') + \
-        version.pversion+" (C) 2004-2007 Vasco Nunes/Piotr Ozarowski - "+ \
+        version.pversion+" (C) 2004-2009 Vasco Nunes/Piotr Ozarowski - "+ \
         _("Released Under the GNU/GPL License").encode('utf-8'))
 
     # get movie information from db
     movie = self.db.session.query(db.Movie).filter_by(number=number).first()
     if movie is not None:
         c.drawImage(filename, pos_x, pos_y, cover_x, cover_y)
-        if print_number == True:
+        if print_number:
             c.setFillColor(colors.white)
             c.rect((pageWidth/2)-13, 520, 26, 70, fill=1, stroke=0)
             c.setFillColor(colors.black)
@@ -148,7 +148,7 @@
 
     # copyright line
     c.drawString(20,20,_("Cover generated by Griffith v").encode('utf-8') + \
-        version.pversion+" (C) 2004-2007 Vasco Nunes/Piotr Ozarowski - "+ \
+        version.pversion+" (C) 2004-2009 Vasco Nunes/Piotr Ozarowski - "+ \
         _("Released Under the GNU/GPL License").encode('utf-8'))
 
     # draw cover area
@@ -157,7 +157,7 @@
     # get movie information from db
     movie = self.db.session.query(db.Movie).filter_by(number=number).first()
     if movie is not None:
-        if print_number == True:
+        if print_number:
             c.setFont(fontName, 10)
             c.drawCentredString(pageWidth/2, 530, number)
 
@@ -174,15 +174,15 @@
         textObject = c.beginText()
         textObject.setTextOrigin(pageWidth-cover_x, 300)
         textObject.setFont(fontName, 8)
-        textObject.textLine(_("Original Title").encode('utf-8')+': '+ movie.o_title.encode('utf-8'))
-        textObject.textLine(_("Title").encode('utf-8')+': '+ movie.title.encode('utf-8'))
-        textObject.textLine("")
-        textObject.textLine(_("Director").encode('utf-8')+': '+ movie.director.encode('utf-8'))
-        textObject.textLine("")
-        textObject.textLine(_("Running Time").encode('utf-8')+': '+str(movie.runtime).encode('utf-8')+ _(" min").encode('utf-8'))
-        textObject.textLine(_("Country").encode('utf-8')+': ' + movie.country.encode('utf-8'))
-        textObject.textLine(_("Genre").encode('utf-8')+': '+ movie.genre.encode('utf-8'))
-        textObject.textLine("")
+        textObject.textLine("%s: %s" % (_('Original Title'), movie.o_title))
+        textObject.textLine("%s: %s" % (_('Title'), movie.title))
+        textObject.textLine('')
+        textObject.textLine("%s: %s" % (_('Director'), movie.director))
+        textObject.textLine('')
+        textObject.textLine("%s: %s %s" % (_('Running Time'), movie.runtime, _(' min')))
+        textObject.textLine("%s: %s" % (_('Country'), movie.country))
+        textObject.textLine("%s: %s" % (_('Genre'), movie.genre))
+        textObject.textLine('')
         c.drawText(textObject)
         # draw bigger poster image
         if poster and movie.poster_md5 and filename:
@@ -190,7 +190,7 @@
     c.showPage()
     c.save()
     self.widgets['print_cover']['window_simple'].hide()
-    cover_file = os.path.join(self.griffith_dir, "cover.pdf")
+    cover_file = os.path.join(self.griffith_dir, 'cover.pdf')
     if self.windows:
         os.popen3("\"" + cover_file + "\"")
     elif self.mac:

Modified: trunk/lib/db.py
===================================================================
--- trunk/lib/db.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/db.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -25,7 +25,7 @@
 # XXX: keep stdlib and SQLAlchemy imports only in this file
 
 from sqlalchemy     import *
-from sqlalchemy.orm import mapper, relation, sessionmaker, validates
+from sqlalchemy.orm import mapper, relation, deferred, sessionmaker, validates
 import re
 import string
 import logging
@@ -333,7 +333,9 @@
                            secondaryjoin=movie_tag_table.c.tag_id==tags_table.c.tag_id),
     'languages' : relation(MovieLang, cascade='all, delete-orphan')})
 mapper(Poster, posters_table, properties={
-    'movies': relation(Movie)})
+    'movies': relation(Movie),
+    'data'  :  deferred(posters_table.c.data)
+    })
 mapper(Filter, filters_table)
 #}}}
 

Modified: trunk/lib/delete.py
===================================================================
--- trunk/lib/delete.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/delete.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -35,7 +35,7 @@
         gutils.error(self,_("You have no movies in your database"), self.widgets['window'])
         return False
     
-    if int(movie.loaned)==1:
+    if movie.loaned:
         gutils.warning(self, msg=_("You can't delete movie while it is loaned."))
         return False
 
@@ -92,15 +92,15 @@
         try:
             os.remove(image_small)
         except:
-            log.info("Can't remove %s file" % image_small)
+            log.warning("Can't remove %s file", image_small)
     if os.path.isfile(image_medium):
         try:
             os.remove(image_medium)
         except:
-            log.info("Can't remove %s file" % image_medium)
+            log.warning("Can't remove %s file", image_medium)
     if os.path.isfile(image_full):
         try:
             os.remove(image_full)
         except:
-            log.info("Can't remove %s file" % image_full)
+            log.warning("Can't remove %s file", image_full)
 

Modified: trunk/lib/gutils.py
===================================================================
--- trunk/lib/gutils.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/gutils.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -56,7 +56,7 @@
 def is_number(x):
     return isinstance(x, int)
 
-def find_next_available(griffithSql):
+def find_next_available(gsql):
     """
     finds next available movie number.
     This is the first empty position.
@@ -64,35 +64,35 @@
     """
     first = 0
 
-    movies = griffithSql.session.query(db.Movie).order_by(db.Movie.number.asc()).all()
+    movies = gsql.session.query(db.Movie.number).order_by(db.Movie.number.asc()).all()
     for movie in movies:
         second = int(movie.number)
         if second is None:
             second = 0
-        if (second>first+1):
+        if second > first + 1:
             break
         first = second
 
     if first is None:
         return 1
     else:
-        number = first+1
+        number = first + 1
         return number
 
-def trim(text,key1,key2):
-    p1 = string.find(text,key1)
+def trim(text, key1, key2):
+    p1 = string.find(text, key1)
     if p1 == -1:
-        return ""
+        return ''
     else:
         p1 = p1+len(key1)
-    p2 = string.find(text[p1:],key2)
+    p2 = string.find(text[p1:], key2)
     if p2 == -1:
         return ""
     else:
         p2 = p1+p2
     return text[p1:p2]
 
-def regextrim(text,key1,key2):
+def regextrim(text, key1, key2):
     obj = re.search(key1, text)
     if obj is None:
         return ''
@@ -105,11 +105,11 @@
         p2 = p1 + obj.start()
     return text[p1:p2]
 
-def after(text,key):
+def after(text, key):
     p1 = string.find(text,key)
     return text[p1+len(key):]
 
-def before(text,key):
+def before(text, key):
     p1 = string.find(text,key)
     return text[:p1]
 
@@ -118,7 +118,7 @@
     text=string.replace(text,"--", "-")
     return text
 
-def progress(blocks,size_block,size):
+def progress(blocks, size_block, size):
     transfered = blocks * size_block
     if size > 0 and transfered > size:
         transfered = size
@@ -128,7 +128,7 @@
 
 # functions to handle comboboxentry stuff
 
-def set_model_from_list (cb, items):
+def set_model_from_list(cb, items):
     """Setup a ComboBox or ComboBoxEntry based on a list of strings."""
     model = gtk.ListStore(str)
     for i in items:
@@ -196,7 +196,7 @@
     while not finished:
         finished = 1
         # check if there is an open tag left
-        start = text.find("<")
+        start = text.find('<')
         if start >= 0:
             # if there is, check if the tag gets closed
             stop = text[start:].find(">")
@@ -324,8 +324,9 @@
     webbrowser._tryorder.append('open')
     webbrowser.open(url)
 
-def read_plugins(prefix,directory):
+def read_plugins(prefix, directory):
     """returns available plugins"""
+
     import glob
     return glob.glob("%s/%s*.py" % (directory,prefix) )
 
@@ -370,7 +371,8 @@
         compressedStream = StringIO.StringIO(data)
         gzipper = gzip.GzipFile(fileobj=compressedStream)
         data = gzipper.read()
-    except:
+    except Exception, e:
+        log.debug("Cannot decompress data: ", e)
         pass
     return data
 
@@ -626,6 +628,7 @@
         pixbuf = image.get_pixbuf()
         pixbuf = pixbuf.scale_simple(30, 40, 'bilinear')
         pixbuf.save(fn_small, "jpeg", {"quality":"70"})
+
     return True
         
 

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/initialize.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -271,7 +271,7 @@
                 self.widgets['treeview'].move_column_after(self.rating_column, currentcol)
                 currentcol = self.rating_column
     # add data to treeview
-    self.total = int(self.db.session.query(db.Movie).count())
+    self.total = self.db.session.query(db.Movie).count()
     self.widgets['treeview'].show()
 
 def loans_treeview(self):
@@ -302,7 +302,7 @@
     treeview.set_headers_visible(True)
 
     model = self.lang['lang'] = gtk.ListStore(int, str)
-    for i in self.db.session.query(db.Lang).all():
+    for i in self.db.session.query(db.Lang.lang_id, db.Lang.name).all():
         model.append([i.lang_id, i.name])
     combo = gtk.CellRendererCombo()
     combo.set_property('model', model)
@@ -339,7 +339,7 @@
     treeview.append_column(column)
 
     model = self.lang['acodec'] = gtk.ListStore(int, str)
-    for i in self.db.session.query(db.ACodec).all():
+    for i in self.db.session.query(db.ACodec.acodec_id, db.ACodec.name).all():
         model.append([i.acodec_id, i.name])
     combo = gtk.CellRendererCombo()
     combo.set_property('model', model)
@@ -354,7 +354,7 @@
     treeview.append_column(column)
     
     model = self.lang['achannel'] = gtk.ListStore(int, str)
-    for i in self.db.session.query(db.AChannel).all():
+    for i in self.db.session.query(db.AChannel.achannel_id, db.AChannel.name).all():
         model.append([i.achannel_id, i.name])
     combo = gtk.CellRendererCombo()
     combo.set_property('model', model)
@@ -369,7 +369,7 @@
     treeview.append_column(column)
     
     model = self.lang['subformat'] = gtk.ListStore(int, str)
-    for i in self.db.session.query(db.SubFormat).all():
+    for i in self.db.session.query(db.SubFormat.subformat_id, db.SubFormat.name).all():
         model.append([i.subformat_id, i.name])
     combo = gtk.CellRendererCombo()
     combo.set_property('model', model)
@@ -505,10 +505,10 @@
         self.widgets['preferences']['treeview'].append_column(column)
     # add data to treeview
     self.p_treemodel.clear()
-    for person in self.db.session.query(db.Person).order_by(db.Person.name.asc()):
+    for i in self.db.session.query(db.Person.name, db.Person.email).order_by(db.Person.name.asc()):
         myiter = self.p_treemodel.insert_before(None, None)
-        self.p_treemodel.set_value(myiter, 0, str(person.name))
-        self.p_treemodel.set_value(myiter, 1, str(person.email))
+        self.p_treemodel.set_value(myiter, 0, i.name)
+        self.p_treemodel.set_value(myiter, 1, i.email)
     self.widgets['preferences']['treeview'].show()
 
 def combos(self):
@@ -689,18 +689,14 @@
 def update_volume_combo_ids(self):
     self.volume_combo_ids = {}
     self.volume_combo_ids[0] = 0
-    i = 1
-    for volume in self.db.session.query(db.Volume).all():
-        self.volume_combo_ids[i] = volume.volume_id
-        i += 1
+    for i, item in enumerate(self.db.session.query(db.Volume.volume_id).all()):
+        self.volume_combo_ids[i] = item.volume_id
 
 def update_collection_combo_ids(self):
     self.collection_combo_ids = {}
     self.collection_combo_ids[0] = 0
-    i = 1
-    for collection in self.db.session.query(db.Collection).all():
-        self.collection_combo_ids[i] = collection.collection_id
-        i += 1
+    for i, item in enumerate(self.db.session.query(db.Collection.collection_id).all()):
+        self.collection_combo_ids[i+1] = item.collection_id
 
 def fill_volumes_combo(self, default=0):
     _tmp = self.initialized
@@ -708,8 +704,8 @@
     self.widgets['add']['volume'].get_model().clear()
     for i in self.volume_combo_ids:
         vol_id = self.volume_combo_ids[i]
-        if vol_id>0:
-            name = self.db.session.query(db.Volume).filter_by(volume_id=vol_id).first().name
+        if vol_id > 0:
+            name = self.db.session.query(db.Volume.name).filter_by(volume_id=vol_id).first().name
         else:
             name = ''
         self.widgets['add']['volume'].insert_text(int(i), str(name))
@@ -727,8 +723,8 @@
     self.widgets['filter']['collection'].get_model().clear()
     for i in self.collection_combo_ids:
         col_id = self.collection_combo_ids[i]
-        if col_id>0:
-            name = self.db.session.query(db.Collection).filter_by(collection_id=col_id).first().name
+        if col_id > 0:
+            name = self.db.session.query(db.Collection.name).filter_by(collection_id=col_id).first().name
         else:
             name = ''
         self.widgets['add']['collection'].insert_text(int(i), str(name))
@@ -748,11 +744,9 @@
     self.initialized = False # don't refresh main treeview
     self.widgets['filter']['advfilter'].get_model().clear()
     self.widgets['filter']['advfilter'].insert_text(0, '') # empty one
-    i = 1
-    for item in self.db.session.query(db.Filter.name).all():
+    for i, item in enumerate(self.db.session.query(db.Filter.name).all()):
         # add some white spaces to prevent scrollbar hides parts of the names    
-        self.widgets['filter']['advfilter'].insert_text(int(i), item.name + '   ')
-        i += 1
+        self.widgets['filter']['advfilter'].insert_text(i+1, item.name + '   ')
     self.widgets['filter']['advfilter'].show_all()
     self.widgets['filter']['advfilter'].set_active(0)
     self.initialized = _tmp
@@ -762,11 +756,9 @@
     self.initialized = False # don't refresh main treeview
     self.widgets['preferences']['tag_name'].get_model().clear()
     self.tags_ids = {}
-    i = 0
-    for tag in self.db.session.query(db.Tag).all():
+    for i, tag in enumerate(self.db.session.query(db.Tag.name, db.Tag.tag_id).all()):
         self.tags_ids[i] = tag.tag_id
-        self.widgets['preferences']['tag_name'].insert_text(int(i), str(tag.name))
-        i += 1
+        self.widgets['preferences']['tag_name'].insert_text(i, tag.name)
     self.widgets['preferences']['tag_name'].show_all()
     self.widgets['preferences']['tag_name'].set_active(0)
     self.initialized = _tmp
@@ -775,66 +767,57 @@
     self.widgets['preferences']['lang_name'].get_model().clear()
     self.languages_ids = {}
     self.languages_ids[0] = 0    # empty one
+    self.lang['lang'].clear()
     self.widgets['preferences']['lang_name'].insert_text(0, '')
-    i = 1
-    for lang in self.db.session.query(db.Lang).all():
+    for i, lang in enumerate(self.db.session.query(db.Lang.lang_id, db.Lang.name).all()):
         self.languages_ids[i] = lang.lang_id
-        self.widgets['preferences']['lang_name'].insert_text(int(i), str(lang.name))
-        i += 1
+        self.widgets['preferences']['lang_name'].insert_text(i+1, lang.name)
+        # add movie languages treeview
+        self.lang['lang'].append([lang.lang_id, lang.name])
     self.widgets['preferences']['lang_name'].show_all()
     self.widgets['preferences']['lang_name'].set_active(0)
-    # add movie languages treeview
-    self.lang['lang'].clear()
-    for i in self.db.session.query(db.Lang).all():
-        self.lang['lang'].append([i.lang_id, i.name])
+
 def acodec_combos(self):
     self.widgets['preferences']['acodec_name'].get_model().clear()
     self.acodecs_ids = {}
     self.acodecs_ids[0] = 0    # empty one
+    self.lang['acodec'].clear()
     self.widgets['preferences']['acodec_name'].insert_text(0, '')
-    i = 1
-    for acodec in self.db.session.query(db.ACodec).all():
+    for i, acodec in enumerate(self.db.session.query(db.ACodec.acodec_id, db.ACodec.name).all()):
         self.acodecs_ids[i] = acodec.acodec_id
-        self.widgets['preferences']['acodec_name'].insert_text(int(i), str(acodec.name))
-        i += 1
+        self.widgets['preferences']['acodec_name'].insert_text(i+1, acodec.name)
+        # add movie languages treeview
+        self.lang['acodec'].append([acodec.acodec_id, acodec.name])
     self.widgets['preferences']['acodec_name'].show_all()
     self.widgets['preferences']['acodec_name'].set_active(0)
-    # add movie languages treeview
-    self.lang['acodec'].clear()
-    for i in self.db.session.query(db.ACodec).all():
-        self.lang['acodec'].append([i.acodec_id, i.name])
+
 def achannel_combos(self):
     self.widgets['preferences']['achannel_name'].get_model().clear()
     self.achannels_ids = {}
     self.achannels_ids[0] = 0    # empty one
+    self.lang['achannel'].clear()
     self.widgets['preferences']['achannel_name'].insert_text(0, '')
-    i = 1
-    for achannel in self.db.session.query(db.AChannel).all():
+    for i, achannel in enumerate(self.db.session.query(db.AChannel.achannel_id, db.AChannel.name).all()):
         self.achannels_ids[i] = achannel.achannel_id
-        self.widgets['preferences']['achannel_name'].insert_text(int(i), str(achannel.name))
-        i += 1
+        self.widgets['preferences']['achannel_name'].insert_text(i+1, achannel.name)
+        # add movie languages treeview
+        self.lang['achannel'].append([achannel.achannel_id, achannel.name])
     self.widgets['preferences']['achannel_name'].show_all()
     self.widgets['preferences']['achannel_name'].set_active(0)
-    # add movie languages treeview
-    self.lang['achannel'].clear()
-    for i in self.db.session.query(db.AChannel).all():
-        self.lang['achannel'].append([i.achannel_id, i.name])
+
 def subformat_combos(self):
     self.widgets['preferences']['subformat_name'].get_model().clear()
     self.subformats_ids = {}
     self.subformats_ids[0] = 0    # empty one
+    self.lang['subformat'].clear()
     self.widgets['preferences']['subformat_name'].insert_text(0, '')
-    i = 1
-    for subformat in self.db.session.query(db.SubFormat).all():
+    for i, subformat in enumerate(self.db.session.query(db.SubFormat.subformat_id, db.SubFormat.name).all()):
         self.subformats_ids[i] = subformat.subformat_id
-        self.widgets['preferences']['subformat_name'].insert_text(int(i), str(subformat.name))
-        i += 1
+        self.widgets['preferences']['subformat_name'].insert_text(i+1, subformat.name)
+        # add movie languages treeview
+        self.lang['subformat'].append([subformat.subformat_id, subformat.name])
     self.widgets['preferences']['subformat_name'].show_all()
     self.widgets['preferences']['subformat_name'].set_active(0)
-    # add movie languages treeview
-    self.lang['subformat'].clear()
-    for i in self.db.session.query(db.SubFormat).all():
-        self.lang['subformat'].append([i.subformat_id, i.name])
 
 def media_combos(self):
     # clear data
@@ -848,13 +831,11 @@
     self.widgets['preferences']['medium_name'].insert_text(0, '')
     self.widgets['add']['media'].insert_text(0, _('N/A'))
     self.widgets['preferences']['media'].insert_text(0, _('N/A'))
-    i = 1
-    for medium in self.db.session.query(db.Medium).all():
-        self.media_ids[i] = medium.medium_id
-        self.widgets['preferences']['medium_name'].insert_text(int(i), str(medium.name))
-        self.widgets['add']['media'].insert_text(int(i), str(medium.name))
-        self.widgets['preferences']['media'].insert_text(int(i), str(medium.name))
-        i += 1
+    for i, medium in enumerate(self.db.session.query(db.Medium.medium_id, db.Medium.name).all()):
+        self.media_ids[i+1] = medium.medium_id
+        self.widgets['preferences']['medium_name'].insert_text(i+1, medium.name)
+        self.widgets['add']['media'].insert_text(i+1, medium.name)
+        self.widgets['preferences']['media'].insert_text(i+1, medium.name)
 
     self.widgets['preferences']['medium_name'].show_all()
     self.widgets['add']['media'].show_all()
@@ -881,13 +862,11 @@
     self.widgets['preferences']['vcodec_name'].insert_text(0, '')
     self.widgets['add']['vcodec'].insert_text(0, _('N/A'))
     self.widgets['preferences']['vcodec'].insert_text(0, _('N/A'))
-    i = 1
-    for vcodec in self.db.session.query(db.VCodec).all():
-        self.vcodecs_ids[i] = vcodec.vcodec_id
-        self.widgets['preferences']['vcodec_name'].insert_text(int(i), str(vcodec.name))
-        self.widgets['add']['vcodec'].insert_text(int(i), str(vcodec.name))
-        self.widgets['preferences']['vcodec'].insert_text(int(i), str(vcodec.name))
-        i += 1
+    for i, vcodec in enumerate(self.db.session.query(db.VCodec.vcodec_id, db.VCodec.name).all()):
+        self.vcodecs_ids[i+1] = vcodec.vcodec_id
+        self.widgets['preferences']['vcodec_name'].insert_text(i+1, vcodec.name)
+        self.widgets['add']['vcodec'].insert_text(i+1, vcodec.name)
+        self.widgets['preferences']['vcodec'].insert_text(i+1, vcodec.name)
 
     self.widgets['preferences']['vcodec_name'].show_all()
     self.widgets['add']['vcodec'].show_all()
@@ -905,8 +884,8 @@
         i.destroy()
     for i in self.tags_ids:
         tag_id = self.tags_ids[i]
-        tag_name = self.db.session.query(db.Tag).filter_by(tag_id=tag_id).first().name
-        tab[i] = gtk.CheckButton(str(tag_name))
+        tag_name = self.db.session.query(db.Tag.name).filter_by(tag_id=tag_id).first().name
+        tab[i] = gtk.CheckButton(tag_name)
         tab[i].set_active(False)
         widget.pack_start(tab[i])
     widget.show_all()

Modified: trunk/lib/main_treeview.py
===================================================================
--- trunk/lib/main_treeview.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/main_treeview.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -44,7 +44,7 @@
         # FIXME
         #movie.refresh() # loan data can be obsolete in cache
         if movie is None:
-            log.info("Treeview: movie doesn't exists (number=%s)"%number)
+            log.info("Treeview: movie doesn't exists (number=%s)", number)
         set_details(self, movie)
     else:
         set_details(self, {})
@@ -250,12 +250,12 @@
             log.warning("movie has no loan data, changing 'loaned' flag to False (movie_id: %s)", item['movie_id'])
             item.loaned = False
         else:
-            data_person = self.db.session.query(db.Person).filter_by(person_id=data_loan.person.person_id).first()
-            self.person_name = str(data_person.name)
-            self.person_email = str(data_person.email)
+            data_person = self.db.session.query(db.Person.name, db.Person.email).filter_by(person_id=data_loan.person.person_id).first()
+            self.person_name = data_person.name
+            self.person_email = data_person.email
             self.loan_date = str(data_loan.date)
             w['loan_info'].set_use_markup(False)
-            w['loan_info'].set_label(_("This movie has been loaned to ") + self.person_name + _(" on ") + self.loan_date[:10])
+            w['loan_info'].set_label(_("This movie has been loaned to %s on %s") % (self.person_name, self.loan_date[:10]))
     if 'loaned' in item and not item['loaned']: # "loaned" status can be changed above, so don't use "else:" in this line
         self.widgets['popups']['loan'].set_sensitive(True)
         self.widgets['popups']['email'].set_sensitive(False)
@@ -279,7 +279,7 @@
                 self.loans_treemodel.set_value(myiter, 1, str(loan.return_date)[:10])
             else:
                 self.loans_treemodel.set_value(myiter, 1, "---")
-            person = self.db.session.query(db.Person).filter_by(person_id=loan.person.person_id).first()
+            person = self.db.session.query(db.Person.name).filter_by(person_id=loan.person.person_id).first()
             self.loans_treemodel.set_value(myiter, 2, person.name)
 
     # volumes/collections

Modified: trunk/lib/people.py
===================================================================
--- trunk/lib/people.py	2009-01-17 20:09:47 UTC (rev 1128)
+++ trunk/lib/people.py	2009-01-17 21:58:04 UTC (rev 1129)
@@ -110,7 +110,7 @@
         self.update_statusbar(_("Record updated"))
         edit_person_cancel(self)
         self.p_treemodel.clear()
-        for p in self.db.session.query(db.Person).order_by(db.Person.name.asc()).all():
+        for p in self.db.session.query(db.Person.name, db.Person.email).order_by(db.Person.name.asc()).all():
             myiter = self.p_treemodel.insert_before(None, None)
             self.p_treemodel.set_value(myiter, 0, p.name)
             self.p_treemodel.set_value(myiter, 1, p.email)
@@ -128,12 +128,10 @@
     person = self.db.session.query(db.Person).filter_by(name=person).first()
     if not person:
         return False
-    data = self.db.session.query(db.Loan).filter_by(person_id=person.person_id, return_date=None).all()
-    if len(data)>0:
+    if self.db.session.query(db.Loan).filter_by(person_id=person.person_id, return_date=None).count() > 0:
         gutils.info(_("This person has loaned films from you. Return them first."), self.widgets['people']['window'])
         return False
-    data = self.db.session.query(db.Loan).filter_by(person_id=person.person_id).all()
-    if len(data)>0:
+    if self.db.session.query(db.Loan).filter_by(person_id=person.person_id).count() > 0:
         has_history = True
         has_history_msg = _("This person has data in the loan history. This data will be erased if you continue.")
     response = gutils.question(_("%s\nAre you sure you want to delete this person?" % has_history_msg), \



From piotrek at mail.berlios.de  Sun Jan 18 13:17:18 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sun, 18 Jan 2009 13:17:18 +0100
Subject: [Griffith-svn] r1130 - trunk/lib
Message-ID: <200901181217.n0ICHIML002561@sheep.berlios.de>

Author: piotrek
Date: 2009-01-18 13:17:17 +0100 (Sun, 18 Jan 2009)
New Revision: 1130

Modified:
   trunk/lib/db.py
   trunk/lib/people.py
Log:
new Person properties:
* loaned_movies_count (number of currently loaned movies by this person)
* returned_movies_count (number of movies in loan history assigned to this person)


Modified: trunk/lib/db.py
===================================================================
--- trunk/lib/db.py	2009-01-17 21:58:04 UTC (rev 1129)
+++ trunk/lib/db.py	2009-01-18 12:17:17 UTC (rev 1130)
@@ -25,7 +25,7 @@
 # XXX: keep stdlib and SQLAlchemy imports only in this file
 
 from sqlalchemy     import *
-from sqlalchemy.orm import mapper, relation, deferred, sessionmaker, validates
+from sqlalchemy.orm import mapper, relation, deferred, sessionmaker, validates, column_property
 import re
 import string
 import logging
@@ -305,7 +305,24 @@
 mapper(VCodec, vcodecs_table, properties={
     'movies': relation(Movie, backref='vcodec')})
 mapper(Person, people_table, properties = {
-    'loans'    : relation(Loan, backref='person', cascade='all, delete-orphan')})
+    'loans'    : relation(Loan, backref='person', cascade='all, delete-orphan'),
+    'loaned_movies_count': column_property(
+            select(
+                [func.count(loans_table.c.loan_id)],
+                and_(
+                    people_table.c.person_id == loans_table.c.person_id,
+                    loans_table.c.return_date == None
+                )
+            ).label('loaned_movies_count')),
+    'returned_movies_count': column_property( # AKA loan history
+            select(
+                [func.count(loans_table.c.loan_id)],
+                and_(
+                    people_table.c.person_id == loans_table.c.person_id,
+                    loans_table.c.return_date != None
+                )
+            ).label('returned_movies_count'))
+    })
 mapper(MovieLang, movie_lang_table, primary_key=[movie_lang_table.c.ml_id], properties = {
     'movie'    : relation(Movie),
     'language' : relation(Lang),
@@ -350,33 +367,33 @@
     log.info("SQLAlchemy version: %s", sqlalchemy.__version__)
 
     ### ENGINE ###
-    engine_mem = create_engine('sqlite:///:memory:', echo=False)
+    mem_engine = create_engine('sqlite:///:memory:', echo=False)
 
     # create tables
-    metadata.create_all(engine_mem)
+    metadata.create_all(mem_engine)
 
     ### MEMORY SESSION ###
     # create a configured "Session" class
-    Session = sessionmaker(bind=engine_mem)
+    Session = sessionmaker(bind=mem_engine)
     # create a Session
-    sess_mem = Session()
+    mem_sess = Session()
 
 
     griffith_dir = os.path.expanduser("~/.griffith/")
     url = "sqlite:///%s" % os.path.join(griffith_dir, 'griffith.db')
-    engine_my = create_engine(url, echo=False)
-    Session2 = sessionmaker(bind=engine_my)
-    sess_my = Session2()
+    my_engine = create_engine(url, echo=False)
+    Session2 = sessionmaker(bind=my_engine)
+    my_sess = Session2()
 
     print "\nAvailable variables:"
-    print "sess_my:  %s" % sess_my
-    print "sess_mem: %s" % sess_mem
+    print "my_sess:  %s" % my_sess
+    print "mem_sess: %s" % mem_sess
 
-    movie1_my = sess_my.query(Movie).first()
-    if movie1_my:
-        movie1_mem = sess_mem.merge(movie1_my)
-        movie1_mem.title = u'updated movie title'
-        sess_mem.add(movie1_mem)
-        sess_mem.commit()
-        print "movie1_my:  %s - title: %s" % (movie1_my, movie1_my.title)
-        print "movie1_mem: %s - title: %s" % (movie1_mem, movie1_mem.title)
+    my_movie1 = my_sess.query(Movie).first()
+    if my_movie1:
+        mem_movie1 = mem_sess.merge(my_movie1)
+        mem_movie1.title = u'updated movie title'
+        mem_sess.add(mem_movie1)
+        mem_sess.commit()
+        print "my_movie1:  %s - title: %s" % (my_movie1, my_movie1.title)
+        print "mem_movie1: %s - title: %s" % (mem_movie1, mem_movie1.title)

Modified: trunk/lib/people.py
===================================================================
--- trunk/lib/people.py	2009-01-17 21:58:04 UTC (rev 1129)
+++ trunk/lib/people.py	2009-01-18 12:17:17 UTC (rev 1130)
@@ -128,10 +128,10 @@
     person = self.db.session.query(db.Person).filter_by(name=person).first()
     if not person:
         return False
-    if self.db.session.query(db.Loan).filter_by(person_id=person.person_id, return_date=None).count() > 0:
+    if person.loaned_movies_count > 0:
         gutils.info(_("This person has loaned films from you. Return them first."), self.widgets['people']['window'])
         return False
-    if self.db.session.query(db.Loan).filter_by(person_id=person.person_id).count() > 0:
+    if person.returned_movies_count > 0:
         has_history = True
         has_history_msg = _("This person has data in the loan history. This data will be erased if you continue.")
     response = gutils.question(_("%s\nAre you sure you want to delete this person?" % has_history_msg), \



From piotrek at mail.berlios.de  Sun Jan 18 15:23:50 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sun, 18 Jan 2009 15:23:50 +0100
Subject: [Griffith-svn] r1131 - in trunk: . debian lib
Message-ID: <200901181423.n0IENorE012264@sheep.berlios.de>

Author: piotrek
Date: 2009-01-18 15:23:49 +0100 (Sun, 18 Jan 2009)
New Revision: 1131

Modified:
   trunk/ChangeLog
   trunk/debian/changelog
   trunk/debian/control
   trunk/lib/backup.py
   trunk/lib/dbupgrade.py
   trunk/lib/sql.py
Log:
* Upgrading from 0.6.2 partially fixed (posters are missing)
* Debian files updated


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-18 12:17:17 UTC (rev 1130)
+++ trunk/ChangeLog	2009-01-18 14:23:49 UTC (rev 1131)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-18  Piotr O?arowski
+	* Upgrading from 0.6.2 partially fixed (posters are missing)
+
 2009-01-17  Piotr O?arowski
 	* Use MediumBLOB on MySQL to store posters. Database has to be recreated if 0.10-beta1 was used to create it.
 	* Few SQL optimizations

Modified: trunk/debian/changelog
===================================================================
--- trunk/debian/changelog	2009-01-18 12:17:17 UTC (rev 1130)
+++ trunk/debian/changelog	2009-01-18 14:23:49 UTC (rev 1131)
@@ -1,3 +1,14 @@
+griffith (0.10~beta2-1) UNRELEASED; urgency=low
+
+  * New upstream snapshot
+  * Changes in dependencies:
+    + SQLAlchemy minimum required version bumped to 0.5
+    + pysqlite2 removed from alternative dependencies as python2.5 is now
+      required
+    + python-sqlite moved to Suggests
+
+ -- Piotr O?arowski <piotr at debian.org>  Sun, 18 Jan 2009 14:00:14 +0100
+
 griffith (0.10~beta1-1) experimental; urgency=low
 
   * New upstream release

Modified: trunk/debian/control
===================================================================
--- trunk/debian/control	2009-01-18 12:17:17 UTC (rev 1130)
+++ trunk/debian/control	2009-01-18 14:23:49 UTC (rev 1131)
@@ -12,14 +12,19 @@
 
 Package: griffith
 Architecture: all
-Depends: ${python:Depends}, python-gtk2 (>= 2.8.6-1), python-glade2 (>= 2.8.6-1),
- python-sqlalchemy (>= 0.5~rc3),
- python (>= 2.5) | python-pysqlite2 (>= 2.3.0-1),
- python-reportlab (>= 1.20debian-6), python-imaging (>= 1.1.5-6)
-Recommends: python-gnome2-extras (>= 2.14.0-1), python-chardet,
- python-psycopg2 (>= 1.1.21-6), python-mysqldb (>= 1.2.1-p2-2), python-sqlite
-Suggests: griffith-extra-artwork (>= 0.9)
 XB-Python-Version: ${python:Versions}
+Depends: ${python:Depends},
+ python-sqlalchemy (>= 0.5),
+ python-gtk2 (>= 2.8.6-1),
+ python-glade2 (>= 2.8.6-1),
+ python-reportlab (>= 1.20debian-6),
+ python-imaging (>= 1.1.5-6)
+Recommends: python-gnome2-extras (>= 2.14.0-1),
+ python-chardet,
+ python-psycopg2 (>= 1.1.21-6),
+ python-mysqldb (>= 1.2.1-p2-2)
+Suggests: griffith-extra-artwork (>= 0.9),
+ python-sqlite
 Description: film collection manager
  Adding items to the movie collection is as quick and easy as typing the film
  title and selecting a supported source. Griffith will then try to fetch all

Modified: trunk/lib/backup.py
===================================================================
--- trunk/lib/backup.py	2009-01-18 12:17:17 UTC (rev 1130)
+++ trunk/lib/backup.py	2009-01-18 14:23:49 UTC (rev 1131)
@@ -128,9 +128,9 @@
                 if file_to_restore[1] == '':
                     continue
                 if file_to_restore[1].endswith('.jpg'):
-                    myfile = os.path.join(mypath,file_to_restore[1])
+                    myfile = os.path.join(mypath, file_to_restore[1])
                 else:
-                    myfile = os.path.join(self.locations['home'],file_to_restore[1])
+                    myfile = os.path.join(self.locations['home'], file_to_restore[1])
                 if file_to_restore[1].endswith('.conf'):
                     old_config_file = myfile
                 outfile = open(myfile, 'wb')
@@ -149,22 +149,23 @@
             if old_config_raw_data.find('griffith.gri') >= -1:
                 self.config.set('file', 'griffith.gri', section='database')
 
-        filename = os.path.join(self.locations['home'], self.config.get('name', 'griffith', section='database') + '.db')
-
         self.db.session.bind.engine.dispose() # close DB
 
         # check if file needs conversion
         if self.config.get('file', 'griffith.db', section='database').lower().endswith('.gri'):
             log.info('Old database format detected. Converting...')
-            from dbupgrade  import convert_from_old_db
-            if convert_from_old_db(self, filename, os.path.join(self.locations['home'], 'griffith.db')):
+            from dbupgrade import convert_from_old_db
+            old_db_filename = os.path.join(self.locations['home'], self.config.get('file', section='database'))
+            self.db = convert_from_old_db(self, old_db_filename, os.path.join(self.locations['home'], 'griffith.db'))
+            if self.db:
                 self.config.save()
             else:
                 log.error('Cant convert old database, exiting.')
                 import sys
                 sys.exit(4)
+        else:
+            self.db = sql.GriffithSQL(self.config, self.locations['home'], self.locations)
 
-        self.db = sql.GriffithSQL(self.config, self.locations['home'], self.locations)
         from initialize import dictionaries, people_treeview
         dictionaries(self)
         people_treeview(self)

Modified: trunk/lib/dbupgrade.py
===================================================================
--- trunk/lib/dbupgrade.py	2009-01-18 12:17:17 UTC (rev 1130)
+++ trunk/lib/dbupgrade.py	2009-01-18 14:23:49 UTC (rev 1131)
@@ -113,7 +113,7 @@
     #
     if version == 1: # fix changes between v1 and v2
         version += 1
-        log.info("Upgrading database to version %d..." % version)
+        log.info("Upgrading database to version %d...", version)
         b.execute("UPDATE loans SET return_date='2007-01-01' WHERE return_date='None';")
         db_version = self.session.query(db.Configuration).filter_by(param=u'version').one()
         db_version.value = unicode(version)
@@ -123,7 +123,7 @@
         #e_type = self.session.bind.engine.dialect.name
         e_type = self.session.bind.name
         version += 1
-        log.info("Upgrading database to version %d..." % version)
+        log.info("Upgrading database to version %d...", version)
 
         # create new table
         db.posters_table.create(checkfirst=True, bind=b)
@@ -132,7 +132,7 @@
         db.ratios_table.insert(bind=b).execute(name=u'16:9')
         db.ratios_table.insert(bind=b).execute(name=u'4:3')
 
-        log.info("... adding new columns")
+        log.info('... adding new columns')
         # common SQL statements
         queries = {'poster_md5': 'ALTER TABLE movies ADD poster_md5 VARCHAR(32) NULL REFERENCES posters(md5sum);',
                    'ratio_id'  : 'ALTER TABLE movies ADD ratio_id INTEGER NULL REFERENCES ratios(ratio_id);',
@@ -147,10 +147,10 @@
             try:
                 self.session.bind.execute(query)
             except Exception, e:
-                log.error("Cannot add '%s' column: %s" % (key, e.message))
+                log.error("Cannot add '%s' column: %s", key, e)
                 return False
         
-        log.info("... saving posters in database")
+        log.info('... saving posters in database')
         posters_dir = get_old_posters_location(locations['home'], config, clean_config=True)
         for movie in self.session.query(db.Movie).all():
             poster_file_name = os.path.join(posters_dir, "%s.jpg" % movie.image)
@@ -171,15 +171,15 @@
                     self.session.commit()
                 except Exception, e:
                     self.session.rollback()
-                    log.warn(str(e))
+                    log.error(e)
                 else:
                     try:
                         os.remove(poster_file_name)
                     except:
-                        log.warn("cannot remove %s" % poster_file_name)
+                        log.warn("cannot remove %s", poster_file_name)
 
             else:
-                log.warn("file not found: number=%s, image=%s)" % (movie.number, movie.image))
+                log.warn("file not found: number=%s, image=%s)", movie.number, movie.image)
                 movie.image = None
                 self.session.add(movie)
                 self.session.commit()
@@ -191,7 +191,7 @@
 
     if False and version == 3:    # fix changes between v3 and v4
         version += 1
-        log.info("Upgrading database to version %d..." % version)
+        log.info("Upgrading database to version %d...", version)
 
         i = Index('ix_movies_title', db.movies_table.c.title)
         i.create(bind=b)
@@ -211,7 +211,8 @@
 # ---------------------------------------------------
 
 def convert_from_old_db(self, source_file, destination_file):    #{{{
-    print 'Converting old database - it can take several minutes...'
+    log.info('Converting old database - it can take several minutes...')
+    log.debug("Source file: %s", source_file)
     gutils.info(_("Griffith will now convert your database to the new format. This can take several minutes if you have a large database."))
     from sqlalchemy.orm import clear_mappers
     from sql import GriffithSQL
@@ -221,10 +222,11 @@
     if not os.path.isfile(source_file):
         return False
     if open(source_file).readline()[:47] == '** This file contains an SQLite 2.1 database **':
+        log.debug('SQLite 2.1 detected')
         try:
             import sqlite
         except ImportError:
-            print 'Old DB conversion: please install pysqlite legacy (v1.0)'
+            log.info('Old DB conversion: please install pysqlite legacy (v1.0)')
             gutils.warning(self,_("Old DB conversion: please install pysqlite legacy (v1.0)"))
             return False
     else:
@@ -247,7 +249,7 @@
         old_db = sqlite.connect(source_file)
     except sqlite.DatabaseError, e:
         if str(e) == 'file is encrypted or is not a database':
-            print 'Your database is most probably in wrong SQLite format, please convert it to SQLite3:'
+            print 'Your database is most probably in SQLite2 format, please convert it to SQLite3:'
             print '$ sqlite ~/.griffith/griffith.gri .dump | sqlite3 ~/.griffith/griffith.gri3'
             print '$ mv ~/.griffith/griffith.gri{,2}'
             print '$ mv ~/.griffith/griffith.gri{3,}'
@@ -260,6 +262,7 @@
     old_cursor = old_db.cursor()
 
     # fix old database
+    old_cursor.execute('PRAGMA encoding = "UTF-8";')
     old_cursor.execute("UPDATE movies SET media = '1' WHERE media = 'DVD';")
     old_cursor.execute("UPDATE movies SET media = '2' WHERE media = 'DVD-R';")
     old_cursor.execute("UPDATE movies SET media = '3' WHERE media = 'DVD-RW';")
@@ -309,11 +312,12 @@
     collection_mapper = {'':None, u'':None, 0:None, '0':None, -1:None, '-1':None}
     old_cursor.execute("SELECT id, name FROM collections;") # loaned status will be set later - buggy databases :-(
     for i in old_cursor.fetchall():
-        o = new_db.Collection(name=i[1])
+        o = db.Collection(name=i[1])
         try:
-            o.save(); o.flush()
+            new_db.session.add(o)
+            new_db.session.commit()
         except Exception, e:
-            log.info(str(e))
+            log.error(e)
             continue
         collection_mapper[i[0]] = o.collection_id
     
@@ -321,11 +325,12 @@
     volume_mapper = {'':None, u'':None, 0:None, '0':None, -1:None, '-1':None}
     old_cursor.execute("SELECT id, name FROM volumes;") # loaned status will be set later - buggy databases :-(
     for i in old_cursor.fetchall():
-        o = new_db.Volume(name=i[1])
+        o = db.Volume(name=i[1])
         try:
-            o.save(); o.flush()
+            new_db.session.add(o)
+            new_db.session.commit()
         except Exception, e:
-            log.info(str(e))
+            log.error(e)
             continue
         volume_mapper[i[0]] = o.volume_id
 
@@ -333,11 +338,12 @@
     person_mapper = {}
     old_cursor.execute("SELECT id, name, email, phone FROM people;")
     for i in old_cursor.fetchall():
-        o = new_db.Person(name=i[1], email=i[2], phone=i[3])
+        o = db.Person(name=i[1], email=i[2], phone=i[3])
         try:
-            o.save(); o.flush()
+            new_db.session.add(o)
+            new_db.session.commit()
         except Exception, e:
-            log.info(str(e))
+            log.error(e)
             continue
         person_mapper[i[0]] = o.person_id
     
@@ -345,15 +351,16 @@
     language_mapper = {'':None, u'':None, 0:None, '0':None, -1:None, '-1':None}
     old_cursor.execute("SELECT id, name FROM languages;")
     for i in old_cursor.fetchall():
-        o = new_db.Lang.query.filter_by(name=i[1]).first()
+        o = new_db.session.query(db.Lang).filter_by(name=i[1]).first()
         if o is not None:
             language_mapper[i[0]] = o.lang_id
         else:
-            o = new_db.Lang(name=i[1])
+            o = db.Lang(name=i[1])
             try:
-                o.save(); o.flush()
+                new_db.session.add(o)
+                new_db.session.commit()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
             language_mapper[i[0]] = o.lang_id
 
@@ -361,15 +368,16 @@
     medium_mapper = {'':None, u'':None, 0:None, '0':None, -1:None, '-1':None}
     old_cursor.execute("SELECT id, name FROM media;")
     for i in old_cursor.fetchall():
-        o = new_db.Medium.query.filter_by(name=i[1]).first()
+        o = new_db.session.query(db.Medium).filter_by(name=i[1]).first()
         if o is not None:
             medium_mapper[i[0]] = o.medium_id
         else:
-            o = new_db.Medium(name=i[1])
+            o = db.Medium(name=i[1])
             try:
-                o.save(); o.flush()
+                new_db.session.add(o)
+                new_db.session.commit()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
             medium_mapper[i[0]] = o.medium_id
     
@@ -377,15 +385,16 @@
     tag_mapper = {}
     old_cursor.execute("SELECT id, name FROM tags;")
     for i in old_cursor.fetchall():
-        o = new_db.Tag.query.filter_by(name=i[1]).first()
+        o = new_db.session.query(db.Tag).filter_by(name=i[1]).first()
         if o is not None:
             tag_mapper[i[0]] = o.tag_id
         else:
-            o = new_db.Tag(name=i[1])
+            o = db.Tag(name=i[1])
             try:
-                o.save(); o.flush()
+                new_db.session.add(o)
+                new_db.session.commit()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
             tag_mapper[i[0]] = o.tag_id
     
@@ -398,7 +407,7 @@
             media, num_media, obs, seen, region, condition, color, layers
         FROM movies ORDER BY number;""")
     for i in old_cursor.fetchall():
-        o = new_db.Movie()
+        o = db.Movie()
         o.number = digits_only(i[6])
         if volume_mapper.has_key(i[1]):
             o.volume_id = volume_mapper[i[1]]
@@ -432,40 +441,41 @@
         o.layers = digits_only(i[28], 4)
         
         try:
-            o.save(); o.flush()
+            new_db.session.add(o)
+            new_db.session.commit()
         except Exception, e:
-            log.info(str(e))
+            log.error(e)
             continue
         movie_mapper[i[0]] = o.movie_id
 
     # movie tag
     old_cursor.execute("SELECT movie_id, tag_id FROM movie_tag WHERE movie_id IN (SELECT id FROM movies);")
     for i in old_cursor.fetchall():
-        o = new_db.MovieTag.query.filter_by(movie_id=movie_mapper[i[0]], tag_id=tag_mapper[i[1]]).first()
+        o = new_db.session.query(db.MovieTag).filter_by(movie_id=movie_mapper[i[0]], tag_id=tag_mapper[i[1]]).first()
         if o is None:
-            m = new_db.Movie.query.filter_by(movie_id=movie_mapper[i[0]]).one()
-            t = new_db.Tag.query.filter_by(tag_id=tag_mapper[i[1]]).one()
-            t.save()
+            m = new_db.session.query(db.Movie).filter_by(movie_id=movie_mapper[i[0]]).one()
+            t = new_db.session.query(db.Tag).filter_by(tag_id=tag_mapper[i[1]]).one()
             m.tags.append(t)
             try:
-                m.save(); m.flush()
+                new_db.session.add(m)
+                new_db.session.commit()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
     
     # movie lang
     old_cursor.execute("SELECT movie_id, lang_id, type FROM movie_lang WHERE movie_id IN (SELECT id FROM movies);")
     for i in old_cursor.fetchall():
-        o = new_db.MovieLang.query.filter_by(movie_id=movie_mapper[i[0]], lang_id=language_mapper[i[1]], type=i[2]).first()
+        o = new_db.session.query(db.MovieLang).filter_by(movie_id=movie_mapper[i[0]], lang_id=language_mapper[i[1]], type=i[2]).first()
         if o is None:
-            m = new_db.Movie.query.filter_by(movie_id=movie_mapper[i[0]]).one()
-            l = new_db.MovieLang(lang_id=language_mapper[i[1]], type=i[2])
-            l.save()
+            m = new_db.session.query(db.Movie).filter_by(movie_id=movie_mapper[i[0]]).one()
+            l = db.MovieLang(lang_id=language_mapper[i[1]], type=i[2])
             m.languages.append(l)
             try:
-                m.save(); m.flush()
+                new_db.session.add(m)
+                new_db.session.commit()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
 
     # loans
@@ -476,15 +486,15 @@
 
         if int(i[2]) > 0:
             try:
-                vol = new_db.Volume.query.filter_by(volume_id=volume_mapper[i[2]]).one()
+                vol = new_db.session.query(db.Volume).filter_by(volume_id=volume_mapper[i[2]]).one()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
         if int(i[3]) > 0:
             try:
-                col = new_db.Collection.query.filter_by(collection_id=collection_mapper[i[3]]).one()
+                col = new_db.session.query(db.Collection).filter_by(collection_id=collection_mapper[i[3]]).one()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
         if int(i[1]) == 0:
             if vol is not None and len(vol.movies)>0:
@@ -492,16 +502,16 @@
             elif col is not None and len(col.movies)>0:
                 m = col.movies[0]
             else:
-                log.info("Cannot find associated movie for this loan (%s)" % i)
+                log.warn("Cannot find associated movie for this loan (%s)" % i)
                 continue
         else:
             try:
-                m = new_db.Movie.query.filter_by(movie_id=movie_mapper[i[1]]).one()
+                m = new_db.session.query(db.Movie).filter_by(movie_id=movie_mapper[i[1]]).one()
             except Exception, e:
-                log.info(str(e))
+                log.error(e)
                 continue
         
-        l = new_db.Loan()
+        l = db.Loan()
         l.person_id = person_mapper[i[0]]
         l.date = str(i[4])[:10]
         if not_returned:
@@ -524,12 +534,13 @@
         l.save();
         m.loans.append(l)
         try:
-            m.flush()
+            new_db.session.add(m)
+            new_db.session.commit()
         except Exception, e:
-            log.info(str(e))
+            log.error(e)
             continue
-    clear_mappers()
-    return True
+    #clear_mappers()
+    return new_db
 #}}}
 
 def get_old_posters_location(home_dir, config, clean_config=False):

Modified: trunk/lib/sql.py
===================================================================
--- trunk/lib/sql.py	2009-01-18 12:17:17 UTC (rev 1130)
+++ trunk/lib/sql.py	2009-01-18 14:23:49 UTC (rev 1131)
@@ -146,9 +146,9 @@
         if v < self.version:
             from dbupgrade import upgrade_database
             if not upgrade_database(self, v, locations, config):
-                raise Exception("cannot upgrade database")
+                raise Exception('cannot upgrade database')
         elif v > self.version:
-            log.error("database version mismatch (detacted:%s; current:%s)", v, self.version)
+            log.error("database version mismatch (detected:%s; current:%s)", v, self.version)
             gutils.warning(_('This database requires newer version of Griffith.'))
             raise Exception("database version mismatch")
 



From piotrek at mail.berlios.de  Sun Jan 18 16:05:30 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sun, 18 Jan 2009 16:05:30 +0100
Subject: [Griffith-svn] r1132 - trunk/lib
Message-ID: <200901181505.n0IF5ULB016245@sheep.berlios.de>

Author: piotrek
Date: 2009-01-18 16:05:29 +0100 (Sun, 18 Jan 2009)
New Revision: 1132

Modified:
   trunk/lib/add.py
   trunk/lib/advfilter.py
   trunk/lib/dbupgrade.py
   trunk/lib/delete.py
   trunk/lib/edit.py
   trunk/lib/loan.py
Log:
few more SQL optimizations


Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2009-01-18 14:23:49 UTC (rev 1131)
+++ trunk/lib/add.py	2009-01-18 15:05:29 UTC (rev 1132)
@@ -84,8 +84,7 @@
         else:
             new_poster_md5 = gutils.md5sum(file(new_image_path, 'rb'))
             details["poster_md5"] = new_poster_md5
-            poster = self.db.session.query(db.Poster).filter_by(md5sum=new_poster_md5).first()
-            if not poster:
+            if self.db.session.query(db.Poster).filter_by(md5sum=new_poster_md5).count() == 0:
                 try:
                     data = file(tmp_image_path, 'rb').read()
                 except Exception, e:
@@ -652,8 +651,7 @@
         if os.path.isfile(tmp_image_path):
             new_poster_md5 = gutils.md5sum(file(tmp_image_path, 'rb'))
 
-            poster = self.db.session.query(db.Poster).filter_by(md5sum=new_poster_md5).first()
-            if not poster:
+            if self.db.session.query(db.Poster).filter_by(md5sum=new_poster_md5).count() == 0:
                 try:
                     data = file(tmp_image_path, 'rb').read()
                 except Exception, e:

Modified: trunk/lib/advfilter.py
===================================================================
--- trunk/lib/advfilter.py	2009-01-18 14:23:49 UTC (rev 1131)
+++ trunk/lib/advfilter.py	2009-01-18 15:05:29 UTC (rev 1132)
@@ -129,7 +129,7 @@
 
 def initialize(widgets, gsql, field_names):
     # tags
-    items = gsql.session.query(db.Tag).all()
+    items = gsql.session.query(db.Tag.tag_id, db.Tag.name).all()
     if len(items):
         options = (_('ignore'), _('with'), _('without'), _('require'))
         _fill_container(widgets["tags_vbox"], items, options, 'tag_id')
@@ -138,7 +138,7 @@
         widgets["tags_frame"].hide()
 
     # volumes
-    items = gsql.session.query(db.Volume).all()
+    items = gsql.session.query(db.Volume.volume_id, db.Volume.name).all()
     options = (_('ignore'), _('in'), _('not in'))
     if len(items):
         _fill_container(widgets["volumes_vbox"], items, options, 'volume_id')
@@ -147,7 +147,7 @@
         widgets["volumes_frame"].hide()
 
     # collections
-    items = gsql.session.query(db.Collection).all()
+    items = gsql.session.query(db.Collection.collection_id, db.Collection.name).all()
     if len(items):
         # use volume's options
         _fill_container(widgets["collections_vbox"], items, options, 'collection_id')
@@ -156,7 +156,7 @@
         widgets["collections_frame"].hide()
 
     # loans
-    items = gsql.session.query(db.Person).all()
+    items = gsql.session.query(db.Person.person_id, db.Person.name).all()
     if len(items):
         options = (_('ignore'), _('loaned to '), _('loan history'))
         _fill_container(widgets["loans_vbox"], items, options, 'person_id')

Modified: trunk/lib/dbupgrade.py
===================================================================
--- trunk/lib/dbupgrade.py	2009-01-18 14:23:49 UTC (rev 1131)
+++ trunk/lib/dbupgrade.py	2009-01-18 15:05:29 UTC (rev 1132)
@@ -226,7 +226,7 @@
         try:
             import sqlite
         except ImportError:
-            log.info('Old DB conversion: please install pysqlite legacy (v1.0)')
+            log.error('Old DB conversion: please install pysqlite legacy (v1.0)')
             gutils.warning(self,_("Old DB conversion: please install pysqlite legacy (v1.0)"))
             return False
     else:

Modified: trunk/lib/delete.py
===================================================================
--- trunk/lib/delete.py	2009-01-18 14:23:49 UTC (rev 1131)
+++ trunk/lib/delete.py	2009-01-18 15:05:29 UTC (rev 1132)
@@ -47,7 +47,7 @@
         try:
             self.db.session.commit()
         except:
-            log.info("Unexpected problem: %s" % e)
+            log.info("Unexpected problem: %s", e)
             return False
 
         # update main treelist
@@ -70,7 +70,7 @@
             try:
                 self.db.session.commit()
             except Exception, e:
-                log.warn("cannot delete poster from db: %s" % e)
+                log.warn("cannot delete poster from db: %s", e)
                 self.db.session.rollback()
                 return False
 

Modified: trunk/lib/edit.py
===================================================================
--- trunk/lib/edit.py	2009-01-18 14:23:49 UTC (rev 1131)
+++ trunk/lib/edit.py	2009-01-18 15:05:29 UTC (rev 1132)
@@ -65,7 +65,7 @@
     movie = session.query(db.Movie).filter_by(number=number).one()
     old_poster_md5 = movie.poster_md5
 
-    if not session.query(db.Poster).filter_by(md5sum=poster_md5).first():
+    if session.query(db.Poster).filter_by(md5sum=poster_md5).count() == 0:
         poster = db.Poster(md5sum=poster_md5, data=file(filename, 'rb').read())
         session.add(poster)
 

Modified: trunk/lib/loan.py
===================================================================
--- trunk/lib/loan.py	2009-01-18 14:23:49 UTC (rev 1131)
+++ trunk/lib/loan.py	2009-01-18 15:05:29 UTC (rev 1132)
@@ -30,7 +30,7 @@
 log = logging.getLogger("Griffith")
 
 def loan_movie(self):
-    people = self.db.session.query(db.Person).order_by(db.Person.name.asc()).all()
+    people = self.db.session.query(db.Person.name).order_by(db.Person.name.asc()).all()
     model = gtk.ListStore(str)
     if len(people)>0:
         for person in people:
@@ -51,12 +51,12 @@
         return False
     self.widgets['w_loan_to'].hide()
 
-    person = self.db.session.query(db.Person).filter_by(name=person_name).first()
+    person = self.db.session.query(db.Person.person_id).filter_by(name=person_name).first()
     if not person:
         log.info("loan_commit: person doesn't exist")
         return False
     if self._movie_id:
-        movie = self.db.session.query(db.Movie).filter_by(movie_id=self._movie_id).first()
+        movie = self.db.session.query(db.Movie.movie_id, db.Movie.collection_id).filter_by(movie_id=self._movie_id).first()
         if not movie:
             log.info("loan_commit: wrong movie_id")
             return False



From piotrek at mail.berlios.de  Sun Jan 18 23:24:05 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Sun, 18 Jan 2009 23:24:05 +0100
Subject: [Griffith-svn] r1133 - in trunk: . lib
Message-ID: <200901182224.n0IMO5gD010069@sheep.berlios.de>

Author: piotrek
Date: 2009-01-18 23:24:04 +0100 (Sun, 18 Jan 2009)
New Revision: 1133

Modified:
   trunk/ChangeLog
   trunk/lib/db.py
Log:
make loaned_movies_count and returned_movies_count properties deferred (will be loaded when needed, not before)


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-18 15:05:29 UTC (rev 1132)
+++ trunk/ChangeLog	2009-01-18 22:24:04 UTC (rev 1133)
@@ -7,6 +7,7 @@
 
 2009-01-18  Piotr O?arowski
 	* Upgrading from 0.6.2 partially fixed (posters are missing)
+	* Add loaned_movies_count and returned_movies_count properties to Person
 
 2009-01-17  Piotr O?arowski
 	* Use MediumBLOB on MySQL to store posters. Database has to be recreated if 0.10-beta1 was used to create it.

Modified: trunk/lib/db.py
===================================================================
--- trunk/lib/db.py	2009-01-18 15:05:29 UTC (rev 1132)
+++ trunk/lib/db.py	2009-01-18 22:24:04 UTC (rev 1133)
@@ -305,23 +305,17 @@
 mapper(VCodec, vcodecs_table, properties={
     'movies': relation(Movie, backref='vcodec')})
 mapper(Person, people_table, properties = {
-    'loans'    : relation(Loan, backref='person', cascade='all, delete-orphan'),
-    'loaned_movies_count': column_property(
-            select(
-                [func.count(loans_table.c.loan_id)],
-                and_(
-                    people_table.c.person_id == loans_table.c.person_id,
-                    loans_table.c.return_date == None
-                )
-            ).label('loaned_movies_count')),
-    'returned_movies_count': column_property( # AKA loan history
-            select(
-                [func.count(loans_table.c.loan_id)],
-                and_(
-                    people_table.c.person_id == loans_table.c.person_id,
-                    loans_table.c.return_date != None
-                )
-            ).label('returned_movies_count'))
+    'loans': relation(Loan, backref='person', cascade='all, delete-orphan'),
+    'loaned_movies_count': column_property(select(
+        [func.count(loans_table.c.loan_id)],
+        and_(people_table.c.person_id == loans_table.c.person_id,
+             loans_table.c.return_date == None
+        )).label('loaned_movies_count'), deferred=True),
+    'returned_movies_count': column_property(select( # AKA loan history
+        [func.count(loans_table.c.loan_id)],
+        and_(people_table.c.person_id == loans_table.c.person_id,
+             loans_table.c.return_date != None
+        )).label('returned_movies_count'), deferred=True)
     })
 mapper(MovieLang, movie_lang_table, primary_key=[movie_lang_table.c.ml_id], properties = {
     'movie'    : relation(Movie),



From mikej06 at mail.berlios.de  Thu Jan 22 20:43:25 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 22 Jan 2009 20:43:25 +0100
Subject: [Griffith-svn] r1134 - branches/0.9.x branches/0.9.x/po trunk
	trunk/po
Message-ID: <200901221943.n0MJhPGh003975@sheep.berlios.de>

Author: mikej06
Date: 2009-01-22 20:43:05 +0100 (Thu, 22 Jan 2009)
New Revision: 1134

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/po/el.po
   trunk/ChangeLog
   trunk/po/el.po
Log:
fixed Greek translation of the word "Danish" (thanks to Johnny)

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-18 22:24:04 UTC (rev 1133)
+++ branches/0.9.x/ChangeLog	2009-01-22 19:43:05 UTC (rev 1134)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-22  Michael Jahn
+	* fixed Greek translation of the word "Danish" (thanks to Johnny)
+
 2009-01-16  Michael Jahn
 	* [#317837] 007 james bond (PDF export grouping error)
 

Modified: branches/0.9.x/po/el.po
===================================================================
--- branches/0.9.x/po/el.po	2009-01-18 22:24:04 UTC (rev 1133)
+++ branches/0.9.x/po/el.po	2009-01-22 19:43:05 UTC (rev 1134)
@@ -252,7 +252,7 @@
 
 #: ../lib/dbupgrade.py:89
 msgid "Danish"
-msgstr "????????"
+msgstr "????????"
 
 #: ../lib/dbupgrade.py:90
 msgid "Dutch"

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-18 22:24:04 UTC (rev 1133)
+++ trunk/ChangeLog	2009-01-22 19:43:05 UTC (rev 1134)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-22  Michael Jahn
+	* fixed Greek translation of the word "Danish" (thanks to Johnny)
+
 2009-01-18  Piotr O?arowski
 	* Upgrading from 0.6.2 partially fixed (posters are missing)
 	* Add loaned_movies_count and returned_movies_count properties to Person

Modified: trunk/po/el.po
===================================================================
--- trunk/po/el.po	2009-01-18 22:24:04 UTC (rev 1133)
+++ trunk/po/el.po	2009-01-22 19:43:05 UTC (rev 1134)
@@ -358,7 +358,7 @@
 
 #: ../lib/dbupgrade.py:84
 msgid "Danish"
-msgstr "????????"
+msgstr "????????"
 
 #: ../lib/dbupgrade.py:85
 msgid "Dutch"



From piotrek at mail.berlios.de  Thu Jan 22 21:02:19 2009
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Thu, 22 Jan 2009 21:02:19 +0100
Subject: [Griffith-svn] r1135 - branches/0.9.x/i18n/el/LC_MESSAGES
	trunk/i18n/el/LC_MESSAGES
Message-ID: <200901222002.n0MK2JEt005650@sheep.berlios.de>

Author: piotrek
Date: 2009-01-22 21:02:18 +0100 (Thu, 22 Jan 2009)
New Revision: 1135

Modified:
   branches/0.9.x/i18n/el/LC_MESSAGES/griffith.mo
   trunk/i18n/el/LC_MESSAGES/griffith.mo
Log:
update .mo file for el lang


Modified: branches/0.9.x/i18n/el/LC_MESSAGES/griffith.mo
===================================================================
(Binary files differ)

Modified: trunk/i18n/el/LC_MESSAGES/griffith.mo
===================================================================
(Binary files differ)



From mikej06 at mail.berlios.de  Sat Jan 24 17:58:56 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 24 Jan 2009 17:58:56 +0100
Subject: [Griffith-svn] r1136 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901241658.n0OGwuL0026189@sheep.berlios.de>

Author: mikej06
Date: 2009-01-24 17:58:07 +0100 (Sat, 24 Jan 2009)
New Revision: 1136

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieDVDPalace.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieDVDPalace.py
Log:
DVD-Palace movie plugin updated

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-22 20:02:18 UTC (rev 1135)
+++ branches/0.9.x/ChangeLog	2009-01-24 16:58:07 UTC (rev 1136)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-24  Michael Jahn
+	* DVD-Palace movie plugin updated
+
 2009-01-22  Michael Jahn
 	* fixed Greek translation of the word "Danish" (thanks to Johnny)
 

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieDVDPalace.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieDVDPalace.py	2009-01-22 20:02:18 UTC (rev 1135)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieDVDPalace.py	2009-01-24 16:58:07 UTC (rev 1136)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2006-2007
+# Copyright (c) 2006-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -26,13 +26,13 @@
 import string
 import re
 
-plugin_name = "DVD-Palace"
-plugin_description = "DVD-Onlinemagazin mit DVD-Datenbank"
-plugin_url = "www.dvd-palace.de"
-plugin_language = _("German")
-plugin_author = "Michael Jahn"
+plugin_name         = "DVD-Palace"
+plugin_description  = "DVD-Onlinemagazin mit DVD-Datenbank"
+plugin_url          = "www.dvd-palace.de"
+plugin_language     = _("German")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.0"
+plugin_version      = "1.1"
 
 class Plugin(movie.Movie):
 
@@ -49,10 +49,10 @@
 	def get_o_title(self):
 		self.o_title = gutils.trim(self.page, 'Originaltitel', '</b>')
 		if self.o_title == '':
-			self.o_title = gutils.trim(self.page, '<TITLE>', ' - DVD Details')
+			self.o_title = gutils.trim(self.page, '<TITLE>', ' - Details')
 
 	def get_title(self):
-		self.title = gutils.trim(self.page, '<TITLE>', ' - DVD Details')
+		self.title = gutils.trim(self.page, '<TITLE>', ' - Details')
 
 	def get_director(self):
 		self.director = gutils.trim(self.page, 'Regisseur(e)', '</TR>')
@@ -184,7 +184,7 @@
 					gutils.trim(element, '>', '</a>') +
 					gutils.strip_tags(
 						' (' +
-						re.sub('[ \t\n][ \t\n]+', ' ',
+						re.sub('[ \t\n]+', ' ',
 						string.replace(
 						string.replace(
 							self.regextrim(element, '<div [^>]*>', '</div>'),

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-22 20:02:18 UTC (rev 1135)
+++ trunk/ChangeLog	2009-01-24 16:58:07 UTC (rev 1136)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-01-24  Michael Jahn
+	* DVD-Palace movie plugin updated
+
 2009-01-22  Michael Jahn
 	* fixed Greek translation of the word "Danish" (thanks to Johnny)
 

Modified: trunk/lib/plugins/movie/PluginMovieDVDPalace.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieDVDPalace.py	2009-01-22 20:02:18 UTC (rev 1135)
+++ trunk/lib/plugins/movie/PluginMovieDVDPalace.py	2009-01-24 16:58:07 UTC (rev 1136)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2006-2007
+# Copyright (c) 2006-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -26,13 +26,13 @@
 import string
 import re
 
-plugin_name = "DVD-Palace"
-plugin_description = "DVD-Onlinemagazin mit DVD-Datenbank"
-plugin_url = "www.dvd-palace.de"
-plugin_language = _("German")
-plugin_author = "Michael Jahn"
+plugin_name         = "DVD-Palace"
+plugin_description  = "DVD-Onlinemagazin mit DVD-Datenbank"
+plugin_url          = "www.dvd-palace.de"
+plugin_language     = _("German")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.0"
+plugin_version      = "1.1"
 
 class Plugin(movie.Movie):
 
@@ -49,10 +49,10 @@
     def get_o_title(self):
         self.o_title = gutils.trim(self.page, 'Originaltitel', '</b>')
         if self.o_title == '':
-            self.o_title = gutils.trim(self.page, '<TITLE>', ' - DVD Details')
+            self.o_title = gutils.trim(self.page, '<TITLE>', ' - Details')
 
     def get_title(self):
-        self.title = gutils.trim(self.page, '<TITLE>', ' - DVD Details')
+        self.title = gutils.trim(self.page, '<TITLE>', ' - Details')
 
     def get_director(self):
         self.director = gutils.trim(self.page, 'Regisseur(e)', '</TR>')
@@ -172,7 +172,7 @@
                     gutils.trim(element, '>', '</a>') +
                     gutils.strip_tags(
                         ' (' +
-                        re.sub('[ \t\n][ \t\n]+', ' ',
+                        re.sub('[ \t\n]+', ' ',
                         string.replace(
                         string.replace(
                             gutils.regextrim(element, '<div [^>]*>', '</div>'),



From mikej06 at mail.berlios.de  Wed Jan 28 22:31:21 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 28 Jan 2009 22:31:21 +0100
Subject: [Griffith-svn] r1137 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901282131.n0SLVL8W016409@sheep.berlios.de>

Author: mikej06
Date: 2009-01-28 22:31:03 +0100 (Wed, 28 Jan 2009)
New Revision: 1137

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieFilmAffinity.py
Log:
FilmAffinity movie plugin updated

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-24 16:58:07 UTC (rev 1136)
+++ branches/0.9.x/ChangeLog	2009-01-28 21:31:03 UTC (rev 1137)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-01-28  Michael Jahn
+	* FilmAffinity movie plugin updated
+
 2009-01-24  Michael Jahn
 	* DVD-Palace movie plugin updated
 

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-01-24 16:58:07 UTC (rev 1136)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-01-28 21:31:03 UTC (rev 1137)
@@ -23,7 +23,7 @@
 
 import gutils
 import movie
-import string
+import string, re
 
 plugin_name		= 'FilmAffinity'
 plugin_description	= 'Base de Datos de Peliculas'
@@ -31,27 +31,29 @@
 plugin_language		= _('Spanish')
 plugin_author		= 'Pedro D. S?nchez'
 plugin_author_email	= '<pedrodav at gmail.com>'
-plugin_version		= '0.2'
+plugin_version		= '0.3'
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode='iso-8859-15'
+		self.encode   = 'iso-8859-15'
 		self.movie_id = id
-		self.url = "http://www.filmaffinity.com/es/film%s.html" % str(self.movie_id)
+		self.url      = "http://www.filmaffinity.com/es/film%s.html" % str(self.movie_id)
 
 	def get_image(self):
-		tmp = string.find(self.page, '<img src="http://www.filmaffinity.com/imgs/movies/')
+		tmp = string.find(self.page, 'www.filmaffinity.com/imgs/movies/')
 		if tmp == -1:
 			self.image_url = ''
 		else:
-			self.image_url = gutils.trim(self.page[tmp-1:], 'src="', '"')
+			self.image_url = 'http://' + gutils.before(self.page[tmp:], '"')
 
 	def get_o_title(self):
 		self.o_title = gutils.trim(self.page, '<b>TITULO ORIGINAL</b></td>', '</b></td>')
 		self.o_title = gutils.after(self.o_title, '<b>')
+		self.o_title = re.sub('[ ]+', ' ', self.o_title)
 
 	def get_title(self):
-		self.title = gutils.trim(self.page, '<img src="http://www.filmaffinity.com/images/movie.gif" border="0"> ', '</span>')
+		self.title = gutils.trim(self.page, 'www.filmaffinity.com/images/movie.gif" border="0"> ', '</span>')
+		self.title = re.sub('[ ]+', ' ', self.title)
 
 	def get_director(self):
 		self.director = gutils.trim(self.page,'<b>DIRECTOR</b></td>', '</td>')
@@ -71,7 +73,7 @@
 
 	def get_year(self):
 		self.year = gutils.trim(self.page, '<b>A?O</b></td>', '</td>')
-		self.year = gutils.after(self.year, '<td >')
+		self.year = gutils.clean(self.year)
 
 	def get_runtime(self):
 		self.runtime = gutils.trim(self.page, '<b>DURACI?N</b></td>', ' min.</td>')
@@ -89,9 +91,9 @@
 	def get_cast(self):
 		self.cast = ''
 		self.cast = gutils.trim(self.page, '<b>REPARTO</b></td>', '</td>')
-		self.cast = string.replace(self.cast, '</a>,', '\n')
+		self.cast = re.sub('</a>,[ ]*', '\n', self.cast)
 		self.cast = string.strip(gutils.strip_tags(self.cast))
-		self.cast = string.replace(self.cast, '  ', '')
+		self.cast = re.sub('[ ]+', ' ', self.cast)
 
 	def get_classification(self):
 		self.classification = ''
@@ -112,12 +114,16 @@
 
 	def get_country(self):
 		self.country = gutils.trim(self.page, '<b>PA?S</b></td>', '</td>')
-		self.country = gutils.trim(self.country, 'alt="', '"')
+		tmp = gutils.trim(self.country, 'alt="', '"')
+		if tmp == '':
+			self.country = gutils.trim(self.country, 'title="', '"')
+		else:
+			self.country = tmp
 
 	def get_rating(self):
 		self.rating = gutils.trim(self.page, '<tr><td align="center" style="color:#990000; font-size:22px; font-weight: bold;">', '</td></tr>')
 		if self.rating:
-			self.rating = str(float(gutils.clean(string.replace(self.rating, ',', '.'))))
+			self.rating = str(round(float(gutils.clean(string.replace(self.rating, ',', '.')))))
 
 class SearchPlugin(movie.SearchMovie):
 
@@ -151,6 +157,6 @@
 
 			if (elements[0]<>''):
 				for element in elements[:-1]:
-					self.ids.append(gutils.trim(element, '<b><a href="/es/film','.html'))
+					self.ids.append(gutils.trim(element, '<b><a href="/es/film', '.html'))
 					title = gutils.after(element, '<b><a href="/es/film')
 					self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.after(title, '>'))))

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-24 16:58:07 UTC (rev 1136)
+++ trunk/ChangeLog	2009-01-28 21:31:03 UTC (rev 1137)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-01-28  Michael Jahn
+	* FilmAffinity movie plugin updated
+
 2009-01-24  Michael Jahn
 	* DVD-Palace movie plugin updated
 

Modified: trunk/lib/plugins/movie/PluginMovieFilmAffinity.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-01-24 16:58:07 UTC (rev 1136)
+++ trunk/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-01-28 21:31:03 UTC (rev 1137)
@@ -23,41 +23,43 @@
 
 import gutils
 import movie
-import string
+import string, re
 
-plugin_name        = 'FilmAffinity'
-plugin_description    = 'Base de Datos de Peliculas'
-plugin_url        = 'www.filmaffinity.com'
-plugin_language        = _('Spanish')
-plugin_author        = 'Pedro D. S?nchez'
-plugin_author_email    = '<pedrodav at gmail.com>'
-plugin_version        = '0.2'
+plugin_name         = 'FilmAffinity'
+plugin_description  = 'Base de Datos de Peliculas'
+plugin_url          = 'www.filmaffinity.com'
+plugin_language     = _('Spanish')
+plugin_author       = 'Pedro D. S?nchez'
+plugin_author_email = '<pedrodav at gmail.com>'
+plugin_version      = '0.3'
 
 class Plugin(movie.Movie):
     def __init__(self, id):
-        self.encode='iso-8859-15'
+        self.encode   = 'iso-8859-15'
         self.movie_id = id
-        self.url = "http://www.filmaffinity.com/es/film%s.html" % str(self.movie_id)
+        self.url      = "http://www.filmaffinity.com/es/film%s.html" % str(self.movie_id)
 
     def get_image(self):
-        tmp = string.find(self.page, '<img src="http://www.filmaffinity.com/imgs/movies/')
+        tmp = string.find(self.page, 'www.filmaffinity.com/imgs/movies/')
         if tmp == -1:
             self.image_url = ''
         else:
-            self.image_url = gutils.trim(self.page[tmp-1:], 'src="', '"')
+            self.image_url = 'http://' + gutils.before(self.page[tmp:], '"')
 
     def get_o_title(self):
         self.o_title = gutils.trim(self.page, '<b>TITULO ORIGINAL</b></td>', '</b></td>')
         self.o_title = gutils.after(self.o_title, '<b>')
+        self.o_title = re.sub('[ ]+', ' ', self.o_title)
 
     def get_title(self):
-        self.title = gutils.trim(self.page, '<img src="http://www.filmaffinity.com/images/movie.gif" border="0"> ', '</span>')
+        self.title = gutils.trim(self.page, 'www.filmaffinity.com/images/movie.gif" border="0"> ', '</span>')
+        self.title = re.sub('[ ]+', ' ', self.title)
 
     def get_director(self):
         self.director = gutils.trim(self.page,'<b>DIRECTOR</b></td>', '</td>')
 
     def get_plot(self):
-        self.plot = gutils.trim(self.page, '<b>G?NERO Y CR?TICA</b>', '<br />')
+        self.plot = gutils.trim(self.page, u'<b>G?NERO Y CR?TICA</b>', '<br />')
         if self.plot == '':
             self.plot = gutils.trim(self.page, '<b>G&Eacute;NERO Y CR&Iacute;TICA</b>', '<br />')
         self.plot = gutils.after(self.plot, '<td valign="top">')
@@ -70,17 +72,17 @@
         self.plot = string.replace(self.plot, '(FILMAFFINITY)', '')
 
     def get_year(self):
-        self.year = gutils.trim(self.page, '<b>A?O</b></td>', '</td>')
-        self.year = gutils.after(self.year, '<td >')
+        self.year = gutils.trim(self.page, u'<b>A?O</b></td>', '</td>')
+        self.year = gutils.clean(self.year)
 
     def get_runtime(self):
-        self.runtime = gutils.trim(self.page, '<b>DURACI?N</b></td>', ' min.</td>')
+        self.runtime = gutils.trim(self.page, u'<b>DURACI?N</b></td>', ' min.</td>')
         if self.runtime == '':
             self.runtime = gutils.trim(self.page, '<b>DURACI&Oacute;N</b></td>', ' min.</td>')
         self.runtime = gutils.after(self.runtime[-10:], '<td>')
 
     def get_genre(self):
-        self.genre = gutils.trim(self.page, '<b>G?NERO Y CR?TICA</b>', '<br />')
+        self.genre = gutils.trim(self.page, u'<b>G?NERO Y CR?TICA</b>', '<br />')
         if self.genre == '':
             self.genre = gutils.trim(self.page, '<b>G&Eacute;NERO Y CR&Iacute;TICA</b>', '<br />')
         self.genre = gutils.trim(self.genre, '<td valign="top">', '/')
@@ -89,9 +91,9 @@
     def get_cast(self):
         self.cast = ''
         self.cast = gutils.trim(self.page, '<b>REPARTO</b></td>', '</td>')
-        self.cast = string.replace(self.cast, '</a>,', '\n')
+        self.cast = re.sub('</a>,[ ]*', '\n', self.cast)
         self.cast = string.strip(gutils.strip_tags(self.cast))
-        self.cast = string.replace(self.cast, '  ', '')
+        self.cast = re.sub('[ ]+', ' ', self.cast)
 
     def get_classification(self):
         self.classification = ''
@@ -111,20 +113,29 @@
         self.trailer = ''
 
     def get_country(self):
-        self.country = gutils.trim(self.page, '<b>PA?S</b></td>', '</td>')
-        self.country = gutils.trim(self.country, 'alt="', '"')
+        self.country = gutils.trim(self.page, u'<b>PA?S</b></td>', '</td>')
+        tmp = gutils.trim(self.country, 'alt="', '"')
+        if tmp == '':
+            self.country = gutils.trim(self.country, 'title="', '"')
+        else:
+            self.country = tmp
 
     def get_rating(self):
         self.rating = gutils.trim(self.page, '<tr><td align="center" style="color:#990000; font-size:22px; font-weight: bold;">', '</td></tr>')
         if self.rating:
-            self.rating = str(float(gutils.clean(string.replace(self.rating, ',', '.'))))
+            self.rating = str(round(float(gutils.clean(string.replace(self.rating, ',', '.')))))
 
+    def get_cameraman(self):
+        self.cameraman = gutils.trim(self.page, u'<b>FOTOGRAF?A</b></td>', '</td>')
+        if self.cameraman == '':
+            self.cameraman = gutils.trim(self.page, '<b>FOTOGRAF&Iacute;A</b></td>', '</td>')
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
-        self.original_url_search    = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
-        self.translated_url_search    = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
-        self.encode = 'iso-8859-15'
+        self.original_url_search   = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
+        self.translated_url_search = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
+        self.encode                = 'iso-8859-15'
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
@@ -133,12 +144,12 @@
         self.sub_search()
         if self.page <> '':
             return self.page
-        auxPage = gutils.trim(auxPage, '<b>TU CR?TICA</b></div>', '</a>')
+        auxPage = gutils.trim(auxPage, u'<b>TU CR?TICA</b></div>', '</a>')
         self.page = gutils.trim(auxPage, 'movie_id=', '">')
         return self.page
 
     def sub_search(self):
-        self.page = gutils.trim(self.page, 'Resultados por t?tulo</span>', '<br>')
+        self.page = gutils.trim(self.page, u'Resultados por t?tulo</span>', '<br>')
         #self.page = gutils.after(self.page, '</td></tr><tr><td><b>')
         #self.page = self.page.decode('iso-8859-15')
 
@@ -152,6 +163,6 @@
 
             if (elements[0]<>''):
                 for element in elements[:-1]:
-                    self.ids.append(gutils.trim(element, '<b><a href="/es/film','.html'))
+                    self.ids.append(gutils.trim(element, '<b><a href="/es/film', '.html'))
                     title = gutils.after(element, '<b><a href="/es/film')
                     self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.after(title, '>'))))



From mikej06 at mail.berlios.de  Sat Jan 31 22:49:26 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 31 Jan 2009 22:49:26 +0100
Subject: [Griffith-svn] r1138 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200901312149.n0VLnQtw025448@sheep.berlios.de>

Author: mikej06
Date: 2009-01-31 22:48:43 +0100 (Sat, 31 Jan 2009)
New Revision: 1138

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieAllocine.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovie7arte.py
   trunk/lib/plugins/movie/PluginMovieAllocine.py
Log:
* Allocine movie plugin updated
* small unicode fixes for 7arte movie plugin

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-01-28 21:31:03 UTC (rev 1137)
+++ branches/0.9.x/ChangeLog	2009-01-31 21:48:43 UTC (rev 1138)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-01-31  Michael Jahn
+	* Allocine movie plugin updated
+
 2009-01-28  Michael Jahn
 	* FilmAffinity movie plugin updated
 

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieAllocine.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieAllocine.py	2009-01-28 21:31:03 UTC (rev 1137)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieAllocine.py	2009-01-31 21:48:43 UTC (rev 1138)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id: PluginMovieIMDB.py 176 2006-02-01 12:07:26Z iznogoud $'
 
-# Copyright (c) 2005-2006 Vasco Nunes, Piotr Ozarowski
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr Ozarowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -23,62 +23,78 @@
 
 import gutils
 import movie
-import string
+import string, re
 
-plugin_name = "Allocine"
-plugin_description = "Internet Movie Database"
-plugin_url = "www.allocine.fr"
-plugin_language = _("French")
-plugin_author = "Pierre-Luc Levy"
+plugin_name         = "Allocine"
+plugin_description  = "Internet Movie Database"
+plugin_url          = "www.allocine.fr"
+plugin_language     = _("French")
+plugin_author       = "Pierre-Luc Levy"
 plugin_author_email = ""
-plugin_version = "0.6"
+plugin_version      = "0.7"
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
 		self.movie_id = id
-		self.url = "http://www.allocine.fr/film/fichefilm_gen_cfilm=%s.html" % str(self.movie_id)
+		self.url      = "http://www.allocine.fr/film/fichefilm_gen_cfilm=%s.html" % str(self.movie_id)
+		self.encode   = 'iso-8859-1'
 
+	def initialize(self):
+		self.page = gutils.convert_entities(self.page.decode(self.encode))
+		self.page_cast = self.open_page(self.parent_window, url = "http://www.allocine.fr/film/casting_gen_cfilm=%s.html" % str(self.movie_id))
+
 	def get_image(self):
-		self.image_url = gutils.trim(self.page,"Poster","Date de sor")
-		self.image_url = gutils.after(self.image_url,"activerlientexte.inc")
-		self.image_url = gutils.trim(self.image_url,"<img src=\"","\"")
+		urls = re.split('<img[ \t]+src=[\'"]', self.page)
+		for index in range(1, len(urls), 1):
+			url = gutils.before(urls[index], '"')
+			if string.find(url, '.jpg') >= 0:
+				self.image_url = url
+				break
 
 	def get_o_title(self):
 		self.o_title = ""
 		self.o_title = gutils.trim(self.page,"Titre original : <i>","</i>")
 		if (self.o_title==''):
-			self.o_title = gutils.trim(self.page,"<title>","</title>")
+			self.o_title = string.replace(gutils.trim(self.page, '<title>', '</title>'), ' - Allocine.fr', '')
+		self.o_title = self.o_title.encode(self.encode)
 
 	def get_title(self):
-		self.title = gutils.trim(self.page,"<title>","</title>")
+		self.title = string.replace(gutils.trim(self.page, '<title>', '</title>'), ' - Allocine.fr', '')
+		self.title = self.title.encode(self.encode)
 
 	def get_director(self):
-		self.director = gutils.trim(self.page,"<h4>R??alis?? par ","</a></h4>")
+		self.director = gutils.trim(self.page, u'R??alis?? par ', '</a></h3>')
+		self.director = self.director.encode(self.encode)
 
 	def get_plot(self):
-		self.plot = gutils.trim(self.page,"Synopsis</b></h3></td></tr></table>","</h4>")
-		self.plot = gutils.after(self.plot,"<h4>")
+		self.plot = gutils.trim(self.page, 'Synopsis', '</h4></div>')
+		self.plot = self.plot.encode(self.encode)
 
 	def get_year(self):
-		self.year = gutils.trim(self.page,"Ann??e de production : ","</h4>")
+		self.year = gutils.trim(self.page, u'Ann??e de production : ', '<')
+		self.year = self.year.encode(self.encode)
 
 	def get_runtime(self):
 		self.runtime = ""
-		self.runtime = gutils.trim(self.page,"<h4>Dur??e : ","min.</h4>&nbsp;")
+		self.runtime = gutils.trim(self.page, u'>Dur??e : ', 'min')
 		if self.runtime:
 			self.runtime = str (int(gutils.before(self.runtime,"h"))*60 + int(gutils.after(self.runtime,"h")))
 
 	def get_genre(self):
-		self.genre = gutils.trim(self.page,"<h4>Genre : ","</h4>")
+		self.genre = gutils.trim(self.page, 'Genre : ', '<h3')
 		self.genre = gutils.strip_tags(self.genre)
+		self.genre = self.genre.encode(self.encode)
 
 	def get_cast(self):
 		self.cast = ""
-		self.cast = gutils.trim(self.page,"<h4>Avec ","</h4>")
-		self.cast = gutils.strip_tags(self.cast)
-		self.cast = string.replace(self.cast,", ", "\n")
+		casts = gutils.trim(self.page_cast, 'Acteurs', '</table>')
+		parts = string.split(casts, '<td ')
+		for index in range(1, len(parts) - 1, 2):
+			character = gutils.after(parts[index], '>')
+			actor = gutils.after(parts[index + 1], '>')
+			self.cast = self.cast + gutils.clean(actor) + _(' as ').encode(self.encode) + gutils.clean(character) + '\n'
 
-	def get_image(self):
+	def get_classification(self):
 		self.classification = ""
 
 	def get_studio(self):
@@ -94,19 +110,21 @@
 		self.trailer = "http://www.allocine.fr/film/video_gen_cfilm=%s.html" % self.movie_id
 
 	def get_country(self):
-		self.country = gutils.trim(self.page,"<h4>Film ",".</h4>&nbsp;")
+		self.country = gutils.trim(self.page, u'>Film ', u'.\xa0<')
+		self.country = self.country.encode(self.encode)
 
 	def get_rating(self):
-		self.rating = gutils.trim(self.page, "Spectateurs</a> ", "</h4>")
-		self.rating = gutils.trim(self.rating, "etoile_", ".gif")
+		self.rating = gutils.trim(self.page, 'Spectateurs</a>', '</tr>')
+		self.rating = gutils.trim(self.rating, 'etoile_', '"')
 		if self.rating:
-			self.rating = str(float(int(self.rating)*2.25))
+			self.rating = str(round(float(int(self.rating)*2.25)))
 
 class SearchPlugin(movie.SearchMovie):
 
 	def __init__(self):
-		self.original_url_search	= "http://www.allocine.fr/recherche/?motcle="
-		self.translated_url_search	= "http://www.allocine.fr/recherche/?motcle="
+		self.original_url_search   = "http://www.allocine.fr/recherche/?rub=1&motcle="
+		self.translated_url_search = "http://www.allocine.fr/recherche/?rub=1&motcle="
+		self.encode                = 'iso-8859-1'
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
@@ -114,11 +132,12 @@
 		return self.page
 
 	def sub_search(self):
-		self.page = gutils.trim(self.page,"Recherche : <b>", "<h3><b>Articles <h4>");
+		self.page = gutils.trim(self.page, 'Recherche : <b>', '</table><script');
 
 	def get_searches(self):
-		elements = string.split(self.page,"<td colspan=\"2\" height=\"1\" valign=\"top\"><hr /></td>")
+		elements = string.split(self.page, '<h4><a href="/film/fichefilm_gen_cfilm=')
 		if (elements[0]<>''):
-			for element in elements:
-				self.ids.append(gutils.trim(element,"/film/fichefilm_gen_cfilm=",".html"))
-				self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.trim(element,"link1\">","</a>"))))
+			for index in range(1, len(elements), 1):
+				element = elements[index]
+				self.ids.append(gutils.before(element, '.'))
+				self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.trim(element, '>', '</a>'))))

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-01-28 21:31:03 UTC (rev 1137)
+++ trunk/ChangeLog	2009-01-31 21:48:43 UTC (rev 1138)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-01-31  Michael Jahn
+	* Allocine movie plugin updated
+	* small unicode fixes for 7arte movie plugin
+
 2009-01-28  Michael Jahn
 	* FilmAffinity movie plugin updated
 

Modified: trunk/lib/plugins/movie/PluginMovie7arte.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovie7arte.py	2009-01-28 21:31:03 UTC (rev 1137)
+++ trunk/lib/plugins/movie/PluginMovie7arte.py	2009-01-31 21:48:43 UTC (rev 1138)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2006 Vasco Nunes, Piotr Ozarowski
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr Ozarowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -25,13 +25,13 @@
 import movie
 import string
 
-plugin_name = "7arte"
-plugin_description = "O cinema em Portugal"
-plugin_url = "7arte.net"
-plugin_language = _("Portuguese")
-plugin_author = "Vasco Nunes"
+plugin_name         = "7arte"
+plugin_description  = "O cinema em Portugal"
+plugin_url          = "7arte.net"
+plugin_language     = _("Portuguese")
+plugin_author       = "Vasco Nunes"
 plugin_author_email = "<vasco.m.nunes at gmail.com>"
-plugin_version = "0.6"
+plugin_version      = "0.6"
 
 class Plugin(movie.Movie):
     """A movie plugin object"""
@@ -77,7 +77,7 @@
 
     def get_cast(self):
         self.cast = gutils.trim(self.page, "<B>Actores:</B>", "</FONT></TD>")
-        self.cast = string.replace(self.cast, "<B>?</B> ", "")
+        self.cast = string.replace(self.cast, u"<B>??</B> ", "")
 
     def get_classification(self):
         """Find the film's classification"""
@@ -122,9 +122,9 @@
 class SearchPlugin(movie.SearchMovie):
     """A movie search object"""
     def __init__(self):
-        self.original_url_search = "http://7arte.net/cgi-bin/arq_search_orig.pl?proc="
+        self.original_url_search   = "http://7arte.net/cgi-bin/arq_search_orig.pl?proc="
         self.translated_url_search = "http://7arte.net/cgi-bin/arq_search.pl?proc="
-        self.encode='iso-8859-1'
+        self.encode                = 'iso-8859-1'
 
     def search(self, parent_window):
         """Perform the web search"""

Modified: trunk/lib/plugins/movie/PluginMovieAllocine.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAllocine.py	2009-01-28 21:31:03 UTC (rev 1137)
+++ trunk/lib/plugins/movie/PluginMovieAllocine.py	2009-01-31 21:48:43 UTC (rev 1138)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id: PluginMovieIMDB.py 176 2006-02-01 12:07:26Z iznogoud $'
 
-# Copyright (c) 2005-2006 Vasco Nunes, Piotr Ozarowski
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr Ozarowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -23,62 +23,71 @@
 
 import gutils
 import movie
-import string
+import string, re
 
-plugin_name = "Allocine"
-plugin_description = "Internet Movie Database"
-plugin_url = "www.allocine.fr"
-plugin_language = _("French")
-plugin_author = "Pierre-Luc Levy"
+plugin_name         = "Allocine"
+plugin_description  = "Internet Movie Database"
+plugin_url          = "www.allocine.fr"
+plugin_language     = _("French")
+plugin_author       = "Pierre-Luc Levy"
 plugin_author_email = ""
-plugin_version = "0.6"
+plugin_version      = "0.7"
 
 class Plugin(movie.Movie):
     def __init__(self, id):
         self.movie_id = id
-        self.url = "http://www.allocine.fr/film/fichefilm_gen_cfilm=%s.html" % str(self.movie_id)
+        self.url      = "http://www.allocine.fr/film/fichefilm_gen_cfilm=%s.html" % str(self.movie_id)
+        self.encode   = 'iso-8859-1'
 
+    def initialize(self):
+        self.page_cast = self.open_page(self.parent_window, url = "http://www.allocine.fr/film/casting_gen_cfilm=%s.html" % str(self.movie_id))
+
     def get_image(self):
-        self.image_url = gutils.trim(self.page,"Poster","Date de sor")
-        self.image_url = gutils.after(self.image_url,"activerlientexte.inc")
-        self.image_url = gutils.trim(self.image_url,"<img src=\"","\"")
+        urls = re.split('<img[ \t]+src=[\'"]', self.page)
+        for index in range(1, len(urls), 1):
+            url = gutils.before(urls[index], '"')
+            if string.find(url, '.jpg') >= 0:
+                self.image_url = url
+                break
 
     def get_o_title(self):
         self.o_title = ""
         self.o_title = gutils.trim(self.page,"Titre original : <i>","</i>")
         if (self.o_title==''):
-            self.o_title = gutils.trim(self.page,"<title>","</title>")
+            self.o_title = string.replace(gutils.trim(self.page, '<title>', '</title>'), ' - Allocine.fr', '')
 
     def get_title(self):
-        self.title = gutils.trim(self.page,"<title>","</title>")
+        self.title = string.replace(gutils.trim(self.page, '<title>', '</title>'), ' - Allocine.fr', '')
 
     def get_director(self):
-        self.director = gutils.trim(self.page,"<h4>R?alis? par ","</a></h4>")
+        self.director = gutils.trim(self.page, u'R??alis?? par ', '</a></h3>')
 
     def get_plot(self):
-        self.plot = gutils.trim(self.page,"Synopsis</b></h3></td></tr></table>","</h4>")
-        self.plot = gutils.after(self.plot,"<h4>")
+        self.plot = gutils.trim(self.page, 'Synopsis', '</h4></div>')
 
     def get_year(self):
-        self.year = gutils.trim(self.page,"Ann?e de production : ","</h4>")
+        self.year = gutils.trim(self.page, u'Ann??e de production : ', '<')
 
     def get_runtime(self):
         self.runtime = ""
-        self.runtime = gutils.trim(self.page,"<h4>Dur?e : ","min.</h4>&nbsp;")
+        self.runtime = gutils.trim(self.page, u'>Dur??e : ', 'min')
         if self.runtime:
             self.runtime = str (int(gutils.before(self.runtime,"h"))*60 + int(gutils.after(self.runtime,"h")))
 
     def get_genre(self):
-        self.genre = gutils.trim(self.page,"<h4>Genre : ","</h4>")
+        self.genre = gutils.trim(self.page, 'Genre : ', '<h3')
         self.genre = gutils.strip_tags(self.genre)
 
     def get_cast(self):
         self.cast = ""
-        self.cast = gutils.trim(self.page,"<h4>Avec ","</h4>")
-        self.cast = gutils.strip_tags(self.cast)
-        self.cast = string.replace(self.cast,", ", "\n")
+        casts = gutils.trim(self.page_cast, 'Acteurs', '</table>')
+        parts = string.split(casts, '<td ')
+        for index in range(1, len(parts) - 1, 2):
+            character = gutils.after(parts[index], '>')
+            actor = gutils.after(parts[index + 1], '>')
+            self.cast = self.cast + gutils.clean(actor) + _(' as ') + gutils.clean(character) + '\n'
 
-    def get_image(self):
+    def get_classification(self):
         self.classification = ""
 
     def get_studio(self):
@@ -94,19 +103,26 @@
         self.trailer = "http://www.allocine.fr/film/video_gen_cfilm=%s.html" % self.movie_id
 
     def get_country(self):
-        self.country = gutils.trim(self.page,"<h4>Film ",".</h4>&nbsp;")
+        self.country = gutils.trim(self.page, '>Film ', '.&nbsp;<')
 
     def get_rating(self):
-        self.rating = gutils.trim(self.page, "Spectateurs</a> ", "</h4>")
-        self.rating = gutils.trim(self.rating, "etoile_", ".gif")
+        self.rating = gutils.trim(self.page, 'Spectateurs</a>', '</tr>')
+        self.rating = gutils.trim(self.rating, 'etoile_', '"')
         if self.rating:
-            self.rating = str(float(int(self.rating)*2.25))
+            self.rating = str(round(float(int(self.rating)*2.25)))
 
+    def get_screenplay(self):
+        self.screenplay = gutils.clean(gutils.trim(self.page_cast, u'Sc??nariste', '</tr>'))
+
+    def get_cameraman(self):
+        self.cameraman = gutils.clean(gutils.trim(self.page_cast, 'Directeur de la photographie', '</tr>'))
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
-        self.original_url_search    = "http://www.allocine.fr/recherche/?motcle="
-        self.translated_url_search    = "http://www.allocine.fr/recherche/?motcle="
+        self.original_url_search   = "http://www.allocine.fr/recherche/?rub=1&motcle="
+        self.translated_url_search = "http://www.allocine.fr/recherche/?rub=1&motcle="
+        self.encode                = 'iso-8859-1'
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
@@ -115,11 +131,12 @@
         return self.page
 
     def sub_search(self):
-        self.page = gutils.trim(self.page,"Recherche : <b>", "<h3><b>Articles <h4>");
+        self.page = gutils.trim(self.page, 'Recherche : <b>', '</table><script');
 
     def get_searches(self):
-        elements = string.split(self.page,"<td colspan=\"2\" height=\"1\" valign=\"top\"><hr /></td>")
+        elements = string.split(self.page, '<h4><a href="/film/fichefilm_gen_cfilm=')
         if (elements[0]<>''):
-            for element in elements:
-                self.ids.append(gutils.trim(element,"/film/fichefilm_gen_cfilm=",".html"))
-                self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.trim(element,"link1\">","</a>"))))
+            for index in range(1, len(elements), 1):
+                element = elements[index]
+                self.ids.append(gutils.before(element, '.'))
+                self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.trim(element, '>', '</a>'))))



From mikej06 at mail.berlios.de  Sat Jan 31 22:51:34 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 31 Jan 2009 22:51:34 +0100
Subject: [Griffith-svn] r1139 - trunk/lib/plugins/movie
Message-ID: <200901312151.n0VLpYK6025748@sheep.berlios.de>

Author: mikej06
Date: 2009-01-31 22:51:20 +0100 (Sat, 31 Jan 2009)
New Revision: 1139

Modified:
   trunk/lib/plugins/movie/PluginMovieIMDB.py
Log:
typo

Modified: trunk/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-01-31 21:48:43 UTC (rev 1138)
+++ trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-01-31 21:51:20 UTC (rev 1139)
@@ -172,8 +172,8 @@
             self.screenplay = result.groups()[0]
             self.screenplay = self.screenplay.replace('<br/>', ', ')
 
-    def get_camerman(self):
-        self.camerman = ''
+    def get_cameraman(self):
+        self.cameraman = ''
 
     def __before_more(self, data):
         tmp = string.find(data, '>more<')



