From mikej06 at mail.berlios.de  Thu Apr  2 11:47:56 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 2 Apr 2009 11:47:56 +0200
Subject: [Griffith-svn] r1180 - in branches/0.9.x/lib: . sqlalchemy/databases
Message-ID: <200904020947.n329luqO009310@sheep.berlios.de>

Author: mikej06
Date: 2009-04-02 11:47:45 +0200 (Thu, 02 Apr 2009)
New Revision: 1180

Modified:
   branches/0.9.x/lib/sql.py
   branches/0.9.x/lib/sqlalchemy/databases/sqlite.py
Log:
special fix for griffith 0.9.x and pysqlite 2.5.x because of the following error message
"You must not use 8-bit bytestrings unless you usea text_factory that can interpret 8-bit bytestrings
(like text_factory = str). It is highly recommended that you instead just switch your application to Unicode strings ..."
backport of method bind_processor from sqlalchemy 0.4.x doesn't work
possible fix for the following bug report:
[#290979] can't save entry where cast member has extended ascii 

Modified: branches/0.9.x/lib/sql.py
===================================================================
--- branches/0.9.x/lib/sql.py	2009-03-29 20:02:21 UTC (rev 1179)
+++ branches/0.9.x/lib/sql.py	2009-04-02 09:47:45 UTC (rev 1180)
@@ -340,12 +340,16 @@
 			config.set('type', 'sqlite', section='database')
 			url = "sqlite:///%s" % os.path.join(griffith_dir, config.get('name', 'griffith', section='database') + '.db')
 		try:
-			self.metadata = BoundMetaData(url)
+			if config.get('type', section='database') == 'sqlite':
+				# use explicit convert_unicode because of changes since pysqlite 2.5
+				self.metadata = BoundMetaData(url, convert_unicode = True)
+			else:
+				self.metadata = BoundMetaData(url)
 		except Exception, e:	# InvalidRequestError, ImportError
 			debug.show("BoundMetaData: %s" % e)
 			config.set('type', 'sqlite', section='database')
 			gutils.warning(self, "%s\n\n%s" % (_('Cannot connect to database.\nFalling back to SQLite.'), _('Please check debug output for more informations.')))
-			self.metadata = BoundMetaData("sqlite:///%s" % os.path.join(griffith_dir, config.get('name', 'griffith', section='database') + '.db'))
+			self.metadata = BoundMetaData("sqlite:///%s" % os.path.join(griffith_dir, config.get('name', 'griffith', section='database') + '.db'), convert_unicode = True)
 
 		# try to establish a db connection
 		try:
@@ -355,7 +359,7 @@
 			gutils.error(self, _('Database connection failed.'))
 			config.set('type', 'sqlite', section='database')
 			url = "sqlite:///%s" % os.path.join(griffith_dir, 'griffith.db')
-			self.metadata = BoundMetaData(url)
+			self.metadata = BoundMetaData(url, convert_unicode = True)
 			self.metadata.engine.connect()
 		#}}}
 

Modified: branches/0.9.x/lib/sqlalchemy/databases/sqlite.py
===================================================================
--- branches/0.9.x/lib/sqlalchemy/databases/sqlite.py	2009-03-29 20:02:21 UTC (rev 1179)
+++ branches/0.9.x/lib/sqlalchemy/databases/sqlite.py	2009-04-02 09:47:45 UTC (rev 1180)
@@ -84,32 +84,50 @@
 
 
 class SLUnicodeMixin(object):
-   def bind_processor(self, dialect):
-       if self.convert_unicode or dialect.convert_unicode:
-           if self.assert_unicode is None:
+    def bind_processor(self, dialect):
+        if self.convert_unicode or dialect.convert_unicode:
+            if self.assert_unicode is None:
                assert_unicode = dialect.assert_unicode
-           else:
-               assert_unicode = self.assert_unicode
+            else:
+                assert_unicode = self.assert_unicode
+                 
+            if not assert_unicode:
+                return None 
                 
-           if not assert_unicode:
-               return None 
-                
-           def process(value):
-               if not isinstance(value, (unicode, NoneType)):
-                   if assert_unicode == 'warn':
-                       util.warn("Unicode type received non-unicode bind " 
+            def process(value):
+                if not isinstance(value, (unicode, NoneType)):
+                    if assert_unicode == 'warn':
+                        util.warn("Unicode type received non-unicode bind "
                                  "param value %r" % value)
-                       return value 
-                   else:
-                       raise exc.InvalidRequestError("Unicode type received non-unicode bind param value %r" % value)
-               else:
-                   return value
-           return process
-       else:
-           return None 
+                        return value 
+                    else:
+                        raise exc.InvalidRequestError("Unicode type received non-unicode bind param value %r" % value)
+                else:
+                    return value
+            return process
+        else:
+            return None
 
-   def result_processor(self, dialect):
-       return None 
+    def result_processor(self, dialect):
+       return None
+
+    # special fix for griffith 0.9.x and pysqlite 2.5.x because of the following error message
+    # You must not use 8-bit bytestrings unless you usea text_factory that can interpret 8-bit bytestrings
+    # (like text_factory = str). It is highly recommended that you instead just switch your application to Unicode strings
+    #
+    # backport of method bind_processor from sqlalchemy 0.4.x doesn't work
+    def convert_result_value(self, value, dialect):
+        if (self.convert_unicode or dialect.convert_unicode) and isinstance(value, unicode): 
+            return value.encode('utf8') 
+        else:
+            return value
+
+    def convert_bind_param(self, value, dialect):
+        if (self.convert_unicode or dialect.convert_unicode) and isinstance(value, basestring): 
+            # pass string values as unicode
+            return value.decode('utf8') 
+        else:
+            return value
     
 class SLText(SLUnicodeMixin, sqltypes.TEXT):
 #class SLText(sqltypes.TEXT):



From mikej06 at mail.berlios.de  Thu Apr  2 12:20:21 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 2 Apr 2009 12:20:21 +0200
Subject: [Griffith-svn] r1181 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200904021020.n32AKLi6013523@sheep.berlios.de>

Author: mikej06
Date: 2009-04-02 12:20:06 +0200 (Thu, 02 Apr 2009)
New Revision: 1181

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieIMDB-de.py
Log:
IMDB-de plugin updated (original title not fetched)

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-04-02 09:47:45 UTC (rev 1180)
+++ branches/0.9.x/ChangeLog	2009-04-02 10:20:06 UTC (rev 1181)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-04-02  Michael Jahn
+	* fixed error when saving extended ascii data with pysqlite 2.5.x
+	* IMDB-de plugin updated
+
 2009-03-29  Michael Jahn
 	* [#224546] Plot isn't being pulled from IMDB for some movies
 	* [#341826] "Country" field from IMDB contains newlines

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-02 09:47:45 UTC (rev 1180)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-02 10:20:06 UTC (rev 1181)
@@ -30,7 +30,7 @@
 plugin_language     = _('German')
 plugin_author       = 'Michael Jahn'
 plugin_author_email = 'mikej06 at hotmail.com'
-plugin_version      = '1.5'
+plugin_version      = '1.6'
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
@@ -68,8 +68,9 @@
 		if tmp:
 			elements = string.split(tmp, '<br>')
 			for element in elements:
-				tmp = gutils.before(element, '(Originaltitel)')
-				if tmp <> '':
+				index = string.find(element,'(Originaltitel)')
+				if index > 0:
+					tmp = element[:index]
 					self.o_title = gutils.before(tmp, '- ')
 					if not self.o_title:
 						self.o_title = tmp

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-04-02 09:47:45 UTC (rev 1180)
+++ trunk/ChangeLog	2009-04-02 10:20:06 UTC (rev 1181)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-04-02  Michael Jahn
+	* IMDB-de plugin updated
+
 2009-03-29  Michael Jahn
 	* [#224546] Plot isn't being pulled from IMDB for some movies
 	* [#341826] "Country" field from IMDB contains newlines

Modified: trunk/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-02 09:47:45 UTC (rev 1180)
+++ trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-02 10:20:06 UTC (rev 1181)
@@ -64,8 +64,9 @@
         if tmp:
             elements = string.split(tmp, '<br>')
             for element in elements:
-                tmp = gutils.before(element, '(Originaltitel)')
-                if tmp <> '':
+                index = string.find(element,'(Originaltitel)')
+                if index > 0:
+                    tmp = element[:index]
                     self.o_title = gutils.before(tmp, '- ')
                     if not self.o_title:
                         self.o_title = tmp



From mikej06 at mail.berlios.de  Sun Apr  5 20:47:06 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sun, 5 Apr 2009 20:47:06 +0200
Subject: [Griffith-svn] r1182 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200904051847.n35Il6Ua020741@sheep.berlios.de>

Author: mikej06
Date: 2009-04-05 20:46:43 +0200 (Sun, 05 Apr 2009)
New Revision: 1182

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieFilmDb.py
Log:
[#269907] PluginMovieFilmDb.py: list index out of range
and complete update of the plugin with test data

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-04-02 10:20:06 UTC (rev 1181)
+++ branches/0.9.x/ChangeLog	2009-04-05 18:46:43 UTC (rev 1182)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-05  Michael Jahn
+	* [#269907] PluginMovieFilmDb.py: list index out of range
+	  and complete update of the plugin with test data
+
 2009-04-02  Michael Jahn
 	* fixed error when saving extended ascii data with pysqlite 2.5.x
 	* IMDB-de plugin updated

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-02 10:20:06 UTC (rev 1181)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-05 18:46:43 UTC (rev 1182)
@@ -1,144 +1,314 @@
-# -*- coding: UTF-8 -*-
-
-__revision__ = '$Id$'
-
-# Copyright (c) 2007 Michael Jahn
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Library General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
-
-# You may use and distribute this software under the terms of the
-# GNU General Public License, version 2 or later
-
-import gutils
-import movie
-import string
-
-plugin_name		= 'FilmDb.de'
-plugin_description	= 'FILMDB.DE'
-plugin_url		= 'www.filmdb.de'
-plugin_language		= _('German')
-plugin_author		= 'Michael Jahn'
-plugin_author_email	= '<mikej06 at hotmail.com>'
-plugin_version		= '1.0'
-
-class Plugin(movie.Movie):
-	def __init__(self, id):
-		self.encode='iso-8859-1'
-		self.movie_id = id
-		self.url = "http://www.filmdb.de/filmanzeige.php?alle=1&filmid=" + self.movie_id
-
-	def initialize(self):
-		self.tmp_page = gutils.trim(self.page, "<h1>Filmdatenbank - ", "Kommentare</a>")
-	
-	def get_image(self):
-		self.image_url = gutils.trim(self.tmp_page, '<td background="', '"');
-
-	def get_o_title(self):
-		self.o_title = gutils.trim(self.page, '<h1>Filmdatenbank - ', '</h1>')
-
-	def get_title(self):
-		self.title = gutils.trim(self.page, '<h1>Filmdatenbank - ', '</h1>')
-
-	def get_director(self):
-		self.director = gutils.after(gutils.trim(self.tmp_page, 'regisseursuche.php', '</a>'), '>')
-
-	def get_plot(self):
-		self.plot = gutils.trim(self.tmp_page, '>Inhalt</strong>', '<td width="150" valign="top">')
-		self.plot = self.plot.replace('\t', '')
-		self.plot = self.plot.replace('\n', '')
-		self.plot = self.plot.replace('?', '"')
-		self.plot = self.plot.replace('?', '"')
-
-	def get_year(self):
-		elements = string.split(self.tmp_page, 'landjahrsuche.php')
-		self.year = gutils.trim(elements[2], '>', '</a>') + '\n'
-
-	def get_runtime(self):
-		self.runtime = ""
-		tmp = gutils.trim(self.tmp_page, '</a>  ? ', ' Stunden')
-		if tmp <> '':
-			elements = string.split(tmp, ':')
-			try:
-				hours = int(elements[0])
-				mins = int(elements[1])
-				self.runtime = str(hours * 60 + mins)
-			except:
-				self.runtime = ""
-
-	def get_genre(self):
-		self.genre = gutils.after(gutils.trim(self.tmp_page, 'genresuche.php', '</a>'), '>')
-
-	def get_cast(self):
-		self.cast = ""
-		elements = string.split(self.tmp_page, 'schauspielersuche.php')
-		elements[0] = ''
-		for element in elements:
-			if element <> '':
-				self.cast = self.cast + gutils.trim(element, '>', '</a>') + '\n'
-
-	def get_classification(self):
-		self.classification = ""
-
-	def get_studio(self):
-		self.studio = ""
-
-	def get_o_site(self):
-		self.o_site = ""
-
-	def get_site(self):
-		self.site = "http://www.filmdb.de/filmanzeige.php?filmid=" + self.movie_id
-
-	def get_trailer(self):
-		self.trailer = ""
-
-	def get_country(self):
-		elements = string.split(self.tmp_page, 'landjahrsuche.php')
-		self.country = gutils.trim(elements[1], '>', '</a>') + '\n'
-
-	def get_rating(self):
-		self.rating = gutils.trim(self.tmp_page, 'Unsere User haben diesen Film mit ', ' bewertet.')
-		self.rating = self.rating.replace('%', '')
-		self.rating = gutils.strip_tags(self.rating)
-		elements = self.rating.split('.')
-		try:
-			tmprating = int(elements[0])
-			self.rating = str(tmprating / 10)
-		except:
-			self.rating = '0'
-
-	def get_notes(self):
-		self.notes = ""
-
-class SearchPlugin(movie.SearchMovie):
-
-	def __init__(self):
-		self.original_url_search   = "http://www.filmdb.de/globalsuche.php?name="
-		self.translated_url_search = "http://www.filmdb.de/globalsuche.php?name="
-		self.encode='iso-8859-1'
-
-	def search(self,parent_window):
-		self.open_search(parent_window)
-		return gutils.trim(self.page, "<span class=font_normal>", "<table width=590")
-
-	def get_searches(self):
-		elements = string.split(self.page, "<!--")
-		elements[0] = ''
-		for element in elements:
-			if element <> '':
-				self.ids.append(gutils.trim(element, "filmid=", ">"))
-				self.titles.append(gutils.trim(
-					gutils.after(element, "filmid="), ">", "<") + " - " +
-					gutils.trim(gutils.after(element, "</a>"), "<td>", "</td>") + " - " +
-					gutils.trim(gutils.after(gutils.after(element, "<td>"), "<td>"), "<td>", "</td>"))
+???# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2007-2009 Michael Jahn
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+import gutils
+import movie
+import string, re
+
+plugin_name         = 'FilmDb.de'
+plugin_description  = 'FILMDB.DE'
+plugin_url          = 'www.filmdb.de'
+plugin_language     = _('German')
+plugin_author       = 'Michael Jahn'
+plugin_author_email = '<mikej06 at hotmail.com>'
+plugin_version      = '1.1'
+
+class Plugin(movie.Movie):
+	def __init__(self, id):
+		self.encode   = 'iso-8859-1'
+		self.movie_id = id
+		self.url      = "http://www.filmdb.de/filmanzeige.php?alle=1&filmid=" + self.movie_id
+
+	def get_image(self):
+		tmp = gutils.trim(self.page, 'plakat.php?', '\'')
+		if tmp:
+			page_image = self.open_page(url='http://www.filmdb.de/plakat.php?' + tmp)
+			tmp = gutils.trim(self.page, 'http://bilder.filmdb.de', '"')
+			if tmp:
+				self.image_url = 'http://bilder.filmdb.de' + tmp
+
+	def get_o_title(self):
+		self.o_title = gutils.trim(self.page, '<h1>', '</h1>')
+
+	def get_title(self):
+		self.title = gutils.trim(self.page, '<h1>', '</h1>')
+
+	def get_director(self):
+		self.director = ''
+		elements = re.split('regisseursuche.php?', self.page)
+		elements[0] = ''
+		listelement = ''
+		for element in elements:
+			if element <> '':
+				self.director = self.director + listelement + gutils.trim(element, '>', '</a>')
+				listelement = ', '
+
+	def get_plot(self):
+		self.plot = gutils.trim(self.page, 'noshade style=\'color:#FFCCCC;\'>', '<')
+		if self.plot == '':
+			self.plot = gutils.trim(self.page, 'noshade style=\'color:#FFCCCC;\'>', '"')
+		self.plot = self.plot.replace('\t', '')
+		self.plot = self.plot.replace('\n', '')
+		self.plot = self.plot.replace(u'\x93', '"')
+		self.plot = self.plot.replace(u'\x84', '"')
+
+	def get_year(self):
+		elements = string.split(self.page, 'landjahrsuche.php')
+		if len(elements) > 1:
+			self.year = gutils.trim(elements[2], '>', '</a>')
+		else:
+			self.year = ''
+
+	def get_runtime(self):
+		self.runtime = ""
+		tmp = gutils.trim(self.page, 'L&auml;nge: ', '<')
+		if tmp <> '':
+			elements = string.split(tmp, ':')
+			try:
+				hours = int(elements[0])
+				mins = int(elements[1])
+				self.runtime = str(hours * 60 + mins)
+			except:
+				self.runtime = ""
+
+	def get_genre(self):
+		self.genre = gutils.after(gutils.trim(self.page, 'genresuche.php', '</a>'), '>')
+
+	def get_cast(self):
+		self.cast = ""
+		tmp = gutils.trim(self.page, 'function schauspiel()', '}')
+		if tmp == '':
+			tmp = self.page
+		elements = string.split(tmp, 'schauspielersuche.php')
+		elements[0] = ''
+		for element in elements:
+			if element <> '':
+				self.cast = self.cast + gutils.clean(gutils.trim(element, '>', '</a>')) + '\n'
+
+	def get_classification(self):
+		self.classification = ""
+
+	def get_studio(self):
+		self.studio = ""
+
+	def get_o_site(self):
+		self.o_site = ""
+
+	def get_site(self):
+		self.site = "http://www.filmdb.de/filmanzeige.php?filmid=" + self.movie_id
+
+	def get_trailer(self):
+		self.trailer = ""
+
+	def get_country(self):
+		elements = string.split(self.page, 'landjahrsuche.php')
+		if len (elements) > 0:
+			self.country = gutils.trim(elements[1], '>', '</a>') + '\n'
+
+	def get_rating(self):
+		self.rating = gutils.trim(self.page, 'Unsere User haben diesen Film mit ', ' bewertet.')
+		self.rating = self.rating.replace('%', '')
+		self.rating = gutils.strip_tags(self.rating)
+		elements = self.rating.split('.')
+		try:
+			tmprating = int(elements[0])
+			self.rating = str(tmprating / 10)
+		except:
+			self.rating = '0'
+
+	def get_notes(self):
+		self.notes = ''
+
+class SearchPlugin(movie.SearchMovie):
+
+	def __init__(self):
+		self.original_url_search   = "http://www.filmdb.de/globalsuche.php?name="
+		self.translated_url_search = "http://www.filmdb.de/globalsuche.php?name="
+		self.encode                = 'iso-8859-1'
+		self.remove_accents        = False
+
+	def search(self,parent_window):
+		self.open_search(parent_window)
+		return self.page
+
+	def get_searches(self):
+		elements = re.split('(?:href=["]*filmanzeige[.]php[?]filmid=)', self.page)
+		elements[0] = ''
+		for element in elements:
+			if element <> '':
+				idmatch = re.search('([>]|["])', element)
+				if idmatch:
+					self.ids.append(element[:idmatch.end() - 1])
+					self.titles.append(gutils.trim(element, '>', '<') + ' - ' +
+						gutils.trim(gutils.after(element, '</a>'), '<td>', '</td>') + ' - ' +
+						gutils.trim(gutils.after(element, '<td>'), '<td>', '</td>'))
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky Balboa' : [  1,  1 ],
+		'Arahan'       : [  1,  1 ],
+		'M??rchen'      : [ 23, 23 ]
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'Rocky Balboa' : { 
+			'title'               : 'Rocky Balboa',
+			'o_title'             : 'Rocky Balboa',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Dolph Lundgren\n\
+Sylvester Stallone\n\
+Carl Weathers\n\
+Burt Young\n\
+Mike Tyson\n\
+Talia Shire\n\
+Burgess Meredith\n\
+Tony Burton\n\
+Mr. T\n\
+Milo Ventimiglia\n\
+Frank Stallone\n\
+Michael Buffer\n\
+Geraldine Hughes\n\
+Lahmard J. Tate\n\
+Don Sherman\n\
+Robert Michael Kelly\n\
+LeRoy Neiman\n\
+Stu Nahan\n\
+Skip Bayless\n\
+Gunnar Peterson\n\
+Tobias Segal\n\
+Marc Ratner\n\
+Henry G. Sanders\n\
+Angela Boyd\n\
+Ana Gerena\n\
+Ricky Cavazos\n\
+Rick Buchborn\n\
+Fran Pultro\n\
+Joe Cortez\n\
+Charles Johnson\n\
+Jody Giambelluca\n\
+Yahya\n\
+Tim Carr\n\
+Jack Lazzarado\n\
+Carter Mitchell\n\
+Barney Fitzpatrick\n\
+Maureen Schilling\n\
+James Binns\n\
+Antonio Tarver\n\
+A.J. Benza\n\
+Matt Frack\n\
+Louis Giansante\n\
+Kevin King Templeton\n\
+Woody Paige\n\
+Pedro Lovell\n\
+Nick Baker\n\
+Brian Kenny\n\
+Paul Dion Monte\n\
+Jim Lampley\n\
+Dana Jacobson\n\
+Bert Randolph Sugar\n\
+Bernard Fern??ndez\n\
+Larry Merchant\n\
+Anthony Lato Jr.\n\
+Max Kellerman\n\
+Lou DiBella\n\
+Vinod Kumar\n\
+Johnnie Hobbs Jr.\n\
+Jay Crawford\n\
+Gary Compton\n\
+James Francis Kelly III',
+			'country'             : 'USA',
+			'genre'               : 'Drama',
+			'classification'      : False,
+			'studio'              : False,
+			'o_site'              : False,
+			'site'                : 'http://www.filmdb.de/filmanzeige.php?filmid=Rocky Balboa',
+			'trailer'             : False,
+			'year'                : 2006,
+			'notes'               : False,
+			'runtime'             : 102,
+			'image'               : True,
+			'rating'              : False
+		},
+		'Tatort -%3Cwbr %2F%3E M%26auml%3Brchenwald' : { 
+			'title'               : 'Tatort - M??rchenwald',
+			'o_title'             : 'Tatort - M??rchenwald',
+			'director'            : 'Christiane Balthasar',
+			'plot'                : True,
+			'cast'                : 'Maria Furtw??ngler\n\
+Hannes Jaenicke\n\
+Charly H??bner\n\
+Ingo Naujoks\n\
+Michael Wittenborn',
+			'country'             : 'D',
+			'genre'               : False,
+			'classification'      : False,
+			'studio'              : False,
+			'o_site'              : False,
+			'site'                : 'http://www.filmdb.de/filmanzeige.php?filmid=Tatort -%3Cwbr %2F%3E M%26auml%3Brchenwald',
+			'trailer'             : False,
+			'year'                : 2004,
+			'notes'               : False,
+			'runtime'             : 90,
+			'image'               : True,
+			'rating'              : False
+		},
+		'Arahan' : { 
+			'title'               : 'Arahan',
+			'o_title'             : 'Arahan',
+			'director'            : 'Ryoo Seung-Wan',
+			'plot'                : True,
+			'cast'                : 'So-yi Yoon\n\
+Doo-hong Jung\n\
+Ryu Seung-beom\n\
+Ahn Sung-ki\n\
+Yun Ju-Sang',
+			'country'             : 'RK',
+			'genre'               : 'Actionkom??die',
+			'classification'      : False,
+			'studio'              : False,
+			'o_site'              : False,
+			'site'                : 'http://www.filmdb.de/filmanzeige.php?filmid=Arahan',
+			'trailer'             : False,
+			'year'                : 2004,
+			'notes'               : False,
+			'runtime'             : 109,
+			'image'               : False,
+			'rating'              : False
+		}
+	}

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-04-02 10:20:06 UTC (rev 1181)
+++ trunk/ChangeLog	2009-04-05 18:46:43 UTC (rev 1182)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-05  Michael Jahn
+	* [#269907] PluginMovieFilmDb.py: list index out of range
+	  and complete update of the plugin with test data
+
 2009-04-02  Michael Jahn
 	* IMDB-de plugin updated
 

Modified: trunk/lib/plugins/movie/PluginMovieFilmDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-02 10:20:06 UTC (rev 1181)
+++ trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-05 18:46:43 UTC (rev 1182)
@@ -1,145 +1,315 @@
-# -*- coding: UTF-8 -*-
-
-__revision__ = '$Id$'
-
-# Copyright (c) 2007 Michael Jahn
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Library General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
-
-# You may use and distribute this software under the terms of the
-# GNU General Public License, version 2 or later
-
-import gutils
-import movie
-import string
-
-plugin_name        = 'FilmDb.de'
-plugin_description    = 'FILMDB.DE'
-plugin_url        = 'www.filmdb.de'
-plugin_language        = _('German')
-plugin_author        = 'Michael Jahn'
-plugin_author_email    = '<mikej06 at hotmail.com>'
-plugin_version        = '1.0'
-
-class Plugin(movie.Movie):
-    def __init__(self, id):
-        self.encode='iso-8859-1'
-        self.movie_id = id
-        self.url = "http://www.filmdb.de/filmanzeige.php?alle=1&filmid=" + self.movie_id
-
-    def initialize(self):
-        self.tmp_page = gutils.trim(self.page, "<h1>Filmdatenbank - ", "Kommentare</a>")
-    
-    def get_image(self):
-        self.image_url = gutils.trim(self.tmp_page, '<td background="', '"');
-
-    def get_o_title(self):
-        self.o_title = gutils.trim(self.page, '<h1>Filmdatenbank - ', '</h1>')
-
-    def get_title(self):
-        self.title = gutils.trim(self.page, '<h1>Filmdatenbank - ', '</h1>')
-
-    def get_director(self):
-        self.director = gutils.after(gutils.trim(self.tmp_page, 'regisseursuche.php', '</a>'), '>')
-
-    def get_plot(self):
-        self.plot = gutils.trim(self.tmp_page, '>Inhalt</strong>', '<td width="150" valign="top">')
-        self.plot = self.plot.replace('\t', '')
-        self.plot = self.plot.replace('\n', '')
-        self.plot = self.plot.replace('?', '"')
-        self.plot = self.plot.replace('?', '"')
-
-    def get_year(self):
-        elements = string.split(self.tmp_page, 'landjahrsuche.php')
-        self.year = gutils.trim(elements[2], '>', '</a>') + '\n'
-
-    def get_runtime(self):
-        self.runtime = ""
-        tmp = gutils.trim(self.tmp_page, '</a>  ? ', ' Stunden')
-        if tmp <> '':
-            elements = string.split(tmp, ':')
-            try:
-                hours = int(elements[0])
-                mins = int(elements[1])
-                self.runtime = str(hours * 60 + mins)
-            except:
-                self.runtime = ""
-
-    def get_genre(self):
-        self.genre = gutils.after(gutils.trim(self.tmp_page, 'genresuche.php', '</a>'), '>')
-
-    def get_cast(self):
-        self.cast = ""
-        elements = string.split(self.tmp_page, 'schauspielersuche.php')
-        elements[0] = ''
-        for element in elements:
-            if element <> '':
-                self.cast = self.cast + gutils.trim(element, '>', '</a>') + '\n'
-
-    def get_classification(self):
-        self.classification = ""
-
-    def get_studio(self):
-        self.studio = ""
-
-    def get_o_site(self):
-        self.o_site = ""
-
-    def get_site(self):
-        self.site = "http://www.filmdb.de/filmanzeige.php?filmid=" + self.movie_id
-
-    def get_trailer(self):
-        self.trailer = ""
-
-    def get_country(self):
-        elements = string.split(self.tmp_page, 'landjahrsuche.php')
-        self.country = gutils.trim(elements[1], '>', '</a>') + '\n'
-
-    def get_rating(self):
-        self.rating = gutils.trim(self.tmp_page, 'Unsere User haben diesen Film mit ', ' bewertet.')
-        self.rating = self.rating.replace('%', '')
-        self.rating = gutils.strip_tags(self.rating)
-        elements = self.rating.split('.')
-        try:
-            tmprating = int(elements[0])
-            self.rating = str(tmprating / 10)
-        except:
-            self.rating = '0'
-
-    def get_notes(self):
-        self.notes = ""
-
-class SearchPlugin(movie.SearchMovie):
-
-    def __init__(self):
-        self.original_url_search   = "http://www.filmdb.de/globalsuche.php?name="
-        self.translated_url_search = "http://www.filmdb.de/globalsuche.php?name="
-        self.encode='iso-8859-1'
-
-    def search(self,parent_window):
-        if not self.open_search(parent_window):
-            return None
-        return gutils.trim(self.page, "<span class=font_normal>", "<table width=590")
-
-    def get_searches(self):
-        elements = string.split(self.page, "<!--")
-        elements[0] = ''
-        for element in elements:
-            if element <> '':
-                self.ids.append(gutils.trim(element, "filmid=", ">"))
-                self.titles.append(gutils.trim(
-                    gutils.after(element, "filmid="), ">", "<") + " - " +
-                    gutils.trim(gutils.after(element, "</a>"), "<td>", "</td>") + " - " +
-                    gutils.trim(gutils.after(gutils.after(element, "<td>"), "<td>"), "<td>", "</td>"))
+???# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2007-2009 Michael Jahn
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+import gutils
+import movie
+import string, re
+
+plugin_name         = 'FilmDb.de'
+plugin_description  = 'FILMDB.DE'
+plugin_url          = 'www.filmdb.de'
+plugin_language     = _('German')
+plugin_author       = 'Michael Jahn'
+plugin_author_email = '<mikej06 at hotmail.com>'
+plugin_version      = '1.0'
+
+class Plugin(movie.Movie):
+    def __init__(self, id):
+        self.encode   = 'iso-8859-1'
+        self.movie_id = id
+        self.url      = "http://www.filmdb.de/filmanzeige.php?alle=1&filmid=" + self.movie_id
+
+    def get_image(self):
+        tmp = gutils.trim(self.page, 'plakat.php?', '\'')
+        if tmp:
+            page_image = self.open_page(url='http://www.filmdb.de/plakat.php?' + tmp)
+            tmp = gutils.trim(self.page, 'http://bilder.filmdb.de', '"')
+            if tmp:
+                self.image_url = 'http://bilder.filmdb.de' + tmp
+
+    def get_o_title(self):
+        self.o_title = gutils.trim(self.page, '<h1>', '</h1>')
+
+    def get_title(self):
+        self.title = gutils.trim(self.page, '<h1>', '</h1>')
+
+    def get_director(self):
+        self.director = ''
+        elements = re.split('regisseursuche.php?', self.page)
+        elements[0] = ''
+        listelement = ''
+        for element in elements:
+            if element <> '':
+                self.director = self.director + listelement + gutils.trim(element, '>', '</a>')
+                listelement = ', '
+
+    def get_plot(self):
+        self.plot = gutils.trim(self.page, 'noshade style=\'color:#FFCCCC;\'>', '<')
+        if self.plot == '':
+            self.plot = gutils.trim(self.page, 'noshade style=\'color:#FFCCCC;\'>', '"')
+        self.plot = self.plot.replace('\t', '')
+        self.plot = self.plot.replace('\n', '')
+        self.plot = self.plot.replace(u'\x93', '"')
+        self.plot = self.plot.replace(u'\x84', '"')
+
+    def get_year(self):
+        elements = string.split(self.page, 'landjahrsuche.php')
+        if len(elements) > 1:
+            self.year = gutils.trim(elements[2], '>', '</a>')
+        else:
+            self.year = ''
+
+    def get_runtime(self):
+        self.runtime = ""
+        tmp = gutils.trim(self.page, 'L&auml;nge: ', '<')
+        if tmp <> '':
+            elements = string.split(tmp, ':')
+            try:
+                hours = int(elements[0])
+                mins = int(elements[1])
+                self.runtime = str(hours * 60 + mins)
+            except:
+                self.runtime = ""
+
+    def get_genre(self):
+        self.genre = gutils.after(gutils.trim(self.page, 'genresuche.php', '</a>'), '>')
+
+    def get_cast(self):
+        self.cast = ""
+        tmp = gutils.trim(self.page, 'function schauspiel()', '}')
+        if tmp == '':
+            tmp = self.page
+        elements = string.split(tmp, 'schauspielersuche.php')
+        elements[0] = ''
+        for element in elements:
+            if element <> '':
+                self.cast = self.cast + gutils.clean(gutils.trim(element, '>', '</a>')) + '\n'
+
+    def get_classification(self):
+        self.classification = ""
+
+    def get_studio(self):
+        self.studio = ""
+
+    def get_o_site(self):
+        self.o_site = ""
+
+    def get_site(self):
+        self.site = "http://www.filmdb.de/filmanzeige.php?filmid=" + self.movie_id
+
+    def get_trailer(self):
+        self.trailer = ""
+
+    def get_country(self):
+        elements = string.split(self.page, 'landjahrsuche.php')
+        if len (elements) > 0:
+            self.country = gutils.trim(elements[1], '>', '</a>') + '\n'
+
+    def get_rating(self):
+        self.rating = gutils.trim(self.page, 'Unsere User haben diesen Film mit ', ' bewertet.')
+        self.rating = self.rating.replace('%', '')
+        self.rating = gutils.strip_tags(self.rating)
+        elements = self.rating.split('.')
+        try:
+            tmprating = int(elements[0])
+            self.rating = str(tmprating / 10)
+        except:
+            self.rating = '0'
+
+    def get_notes(self):
+        self.notes = ''
+
+class SearchPlugin(movie.SearchMovie):
+
+    def __init__(self):
+        self.original_url_search   = "http://www.filmdb.de/globalsuche.php?name="
+        self.translated_url_search = "http://www.filmdb.de/globalsuche.php?name="
+        self.encode                = 'iso-8859-1'
+        self.remove_accents        = False
+
+    def search(self,parent_window):
+        if not self.open_search(parent_window):
+            return None
+        return self.page
+
+    def get_searches(self):
+        elements = re.split('(?:href=["]*filmanzeige[.]php[?]filmid=)', self.page)
+        elements[0] = ''
+        for element in elements:
+            if element <> '':
+                idmatch = re.search('([>]|["])', element)
+                if idmatch:
+                    self.ids.append(element[:idmatch.end() - 1])
+                    self.titles.append(gutils.trim(element, '>', '<') + ' - ' +
+                            gutils.trim(gutils.after(element, '</a>'), '<td>', '</td>') + ' - ' +
+                            gutils.trim(gutils.after(element, '<td>'), '<td>', '</td>'))
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [  1,  1 ],
+        'Arahan'       : [  1,  1 ],
+        'M??rchen'      : [ 23, 23 ]
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        'Rocky Balboa' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Dolph Lundgren\n\
+Sylvester Stallone\n\
+Carl Weathers\n\
+Burt Young\n\
+Mike Tyson\n\
+Talia Shire\n\
+Burgess Meredith\n\
+Tony Burton\n\
+Mr. T\n\
+Milo Ventimiglia\n\
+Frank Stallone\n\
+Michael Buffer\n\
+Geraldine Hughes\n\
+Lahmard J. Tate\n\
+Don Sherman\n\
+Robert Michael Kelly\n\
+LeRoy Neiman\n\
+Stu Nahan\n\
+Skip Bayless\n\
+Gunnar Peterson\n\
+Tobias Segal\n\
+Marc Ratner\n\
+Henry G. Sanders\n\
+Angela Boyd\n\
+Ana Gerena\n\
+Ricky Cavazos\n\
+Rick Buchborn\n\
+Fran Pultro\n\
+Joe Cortez\n\
+Charles Johnson\n\
+Jody Giambelluca\n\
+Yahya\n\
+Tim Carr\n\
+Jack Lazzarado\n\
+Carter Mitchell\n\
+Barney Fitzpatrick\n\
+Maureen Schilling\n\
+James Binns\n\
+Antonio Tarver\n\
+A.J. Benza\n\
+Matt Frack\n\
+Louis Giansante\n\
+Kevin King Templeton\n\
+Woody Paige\n\
+Pedro Lovell\n\
+Nick Baker\n\
+Brian Kenny\n\
+Paul Dion Monte\n\
+Jim Lampley\n\
+Dana Jacobson\n\
+Bert Randolph Sugar\n\
+Bernard Fern??ndez\n\
+Larry Merchant\n\
+Anthony Lato Jr.\n\
+Max Kellerman\n\
+Lou DiBella\n\
+Vinod Kumar\n\
+Johnnie Hobbs Jr.\n\
+Jay Crawford\n\
+Gary Compton\n\
+James Francis Kelly III',
+            'country'             : 'USA',
+            'genre'               : 'Drama',
+            'classification'      : False,
+            'studio'              : False,
+            'o_site'              : False,
+            'site'                : 'http://www.filmdb.de/filmanzeige.php?filmid=Rocky Balboa',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 102,
+            'image'               : True,
+            'rating'              : False
+        },
+        'Tatort -%3Cwbr %2F%3E M%26auml%3Brchenwald' : { 
+            'title'               : 'Tatort - M??rchenwald',
+            'o_title'             : 'Tatort - M??rchenwald',
+            'director'            : 'Christiane Balthasar',
+            'plot'                : True,
+            'cast'                : 'Maria Furtw??ngler\n\
+Hannes Jaenicke\n\
+Charly H??bner\n\
+Ingo Naujoks\n\
+Michael Wittenborn',
+            'country'             : 'D',
+            'genre'               : False,
+            'classification'      : False,
+            'studio'              : False,
+            'o_site'              : False,
+            'site'                : 'http://www.filmdb.de/filmanzeige.php?filmid=Tatort -%3Cwbr %2F%3E M%26auml%3Brchenwald',
+            'trailer'             : False,
+            'year'                : 2004,
+            'notes'               : False,
+            'runtime'             : 90,
+            'image'               : True,
+            'rating'              : False
+        },
+        'Arahan' : { 
+            'title'               : 'Arahan',
+            'o_title'             : 'Arahan',
+            'director'            : 'Ryoo Seung-Wan',
+            'plot'                : True,
+            'cast'                : 'So-yi Yoon\n\
+Doo-hong Jung\n\
+Ryu Seung-beom\n\
+Ahn Sung-ki\n\
+Yun Ju-Sang',
+            'country'             : 'RK',
+            'genre'               : 'Actionkom??die',
+            'classification'      : False,
+            'studio'              : False,
+            'o_site'              : False,
+            'site'                : 'http://www.filmdb.de/filmanzeige.php?filmid=Arahan',
+            'trailer'             : False,
+            'year'                : 2004,
+            'notes'               : False,
+            'runtime'             : 109,
+            'image'               : False,
+            'rating'              : False
+        }
+    }



From mikej06 at mail.berlios.de  Sun Apr  5 20:56:16 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sun, 5 Apr 2009 20:56:16 +0200
Subject: [Griffith-svn] r1183 - branches/0.9.x/lib
	branches/0.9.x/lib/plugins/movie trunk/lib trunk/lib/plugins/movie
Message-ID: <200904051856.n35IuGMH021782@sheep.berlios.de>

Author: mikej06
Date: 2009-04-05 20:55:46 +0200 (Sun, 05 Apr 2009)
New Revision: 1183

Modified:
   branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py
   branches/0.9.x/lib/plugins/movie/PluginMovieCinematografo.py
   branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py
   branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
   branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py
   branches/0.9.x/lib/test_movieplugins.py
   trunk/lib/plugins/movie/PluginMovieAmazon.py
   trunk/lib/plugins/movie/PluginMovieCinematografo.py
   trunk/lib/plugins/movie/PluginMovieIMDB-de.py
   trunk/lib/plugins/movie/PluginMovieOFDb.py
   trunk/lib/test_movieplugins.py
Log:
* typo in plugin FilmDb
* test data updated for plugins Amazon, Cinematografo, IMDB-de, OFDb

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieAmazon.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -394,7 +394,7 @@
 Antonio Traver\n\
 Burt Young',
 			'country'			: 'USA',
-			'genre'				: 'Mehr Drama, Drama',
+			'genre'				: 'Drama, Drama',
 			'classification'	: 'Freigegeben ab 12 Jahren',
 			'studio'			: 'MGM Home Entertainment GmbH (dt.)',
 			'o_site'			: False,
@@ -415,7 +415,7 @@
 Fran?oise Fabian\n\
 Charles G?rard',
 			'country'			: 'Frankreich, Italien',
-			'genre'				: 'Krimi, Mehr Drama, Mehr Kom?die, Drama, Kom?die, Krimi',
+			'genre'				: 'Krimikom?die, Drama, General AAS, Drama, Kom?die, Krimi',
 			'classification'	: 'Freigegeben ab 12 Jahren',
 			'studio'			: 'Warner Home Video - DVD',
 			'o_site'			: False,
@@ -436,7 +436,7 @@
 Yoon So-yi\n\
 Ahn Sung-kee',
 			'country'			: 'S?dkorea',
-			'genre'				: 'Actionkom?die, Abenteuer- & Actionkom?die, Fantasykom?die, Action, Kom?die, Mehr Fantasy, Korea, Action, Kom?die, Fantasy, Unter 10 EUR',
+			'genre'				: 'Actionkom?die, Abenteuer- & Actionkom?die, Fantasykom?die, General AAS, Action, Kom?die, Action, Fantasy, Kom?die, Korea, Unter 10 EUR',
 			'classification'	: 'Freigegeben ab 16 Jahren',
 			'o_site'			: False,
 			'site'				: 'http://www.amazon.de/dp/B000BSNOD6',

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieCinematografo.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieCinematografo.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieCinematografo.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -224,7 +224,7 @@
 			'country'			: 'USA',
 			'genre'				: 'drammatico, sportivo',
 			'classification'	: False,
-			'studio'			: '20th Century Fox Italia, Dvd: 20th Century Fox Home Entertainment',
+			'studio'			: '20th Century Fox Italia, Dvd E Blu-ray: 20th Century Fox Home Entertainment',
 			'o_site'			: False,
 			'site'				: 'http://www.cinematografo.it/bancadati/consultazione/schedafilm.jsp?completa=si&codice=47931',
 			'trailer'			: False,

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -69,8 +69,8 @@
 			self.plot = gutils.trim(self.page, 'noshade style=\'color:#FFCCCC;\'>', '"')
 		self.plot = self.plot.replace('\t', '')
 		self.plot = self.plot.replace('\n', '')
-		self.plot = self.plot.replace(u'\x93', '"')
-		self.plot = self.plot.replace(u'\x84', '"')
+		self.plot = self.plot.replace('\x93', '"')
+		self.plot = self.plot.replace('\x84', '"')
 
 	def get_year(self):
 		elements = string.split(self.page, 'landjahrsuche.php')

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -354,7 +354,9 @@
 Nick Baker' + _(' as ') + 'Irish Pub Bartender\n\
 Don Sherman' + _(' as ') + 'Andy\n\
 Stu Nahan' + _(' as ') + 'Computer Fight Commentator (Sprechrolle)\n\
-Gary Compton' + _(' as ') + 'Sicherheitsbediensteter ?brige Besetzung in alphabetischer Reihenfolge:\n\
+Gary Compton' + _(' as ') + 'Sicherheitsbediensteter\n\
+?brige Besetzung in alphabetischer Reihenfolge:\n\
+Michael Ahl' + _(' as ') + 'Restaurant patron (nicht im Abspann)\n\
 Andrew Aninsman' + _(' as ') + 'Promoter (nicht im Abspann)\n\
 Ricky Cavazos' + _(' as ') + 'Boxing Spectator (nicht im Abspann)\n\
 Deon Derrico' + _(' as ') + 'High roller at limo (nicht im Abspann)\n\
@@ -362,6 +364,7 @@
 Mark J. Kilbane' + _(' as ') + 'Businessman (nicht im Abspann)\n\
 David Kneeream' + _(' as ') + 'Adrian\'s Patron (nicht im Abspann)\n\
 Dolph Lundgren' + _(' as ') + 'Captain Ivan Drago (Archivmaterial) (nicht im Abspann)\n\
+Dean Mauro' + _(' as ') + 'Sports Journalist (nicht im Abspann) (unbest?tigt)\n\
 Burgess Meredith' + _(' as ') + 'Mickey Goldmill (Archivmaterial) (nicht im Abspann)\n\
 Keith Moyer' + _(' as ') + 'Bargast (nicht im Abspann)\n\
 Mr. T' + _(' as ') + 'Clubber Lang (Archivmaterial) (nicht im Abspann)\n\
@@ -409,9 +412,10 @@
 Joseph Rythmann\n\
 Georges Staquet\n\
 Jacques Villedieu\n\
-Harry Walter ?brige Besetzung in alphabetischer Reihenfolge:\n\
+Harry Walter\n\
+?brige Besetzung in alphabetischer Reihenfolge:\n\
 Anouk Aim?e' + _(' as ') + 'Une femme (Archivmaterial) (nicht im Abspann)\n\
-Elie Chouraqui' + _(' as ') + ' (nicht im Abspann)\n\
+Elie Chouraqui' + _(' as ') + '(nicht im Abspann)\n\
 R?my Julienne' + _(' as ') + 'Chauffeur de taxi (nicht im Abspann)\n\
 Jean-Louis Trintignant' + _(' as ') + 'Un homme (Archivmaterial) (nicht im Abspann)',
 			'country'			: 'Frankreich | Italien',

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -20,9 +20,9 @@
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode='utf-8'
+		self.encode   = 'utf-8'
 		self.movie_id = id
-		self.url = "http://www.ofdb.de/%s" % str(self.movie_id)
+		self.url      = "http://www.ofdb.de/%s" % str(self.movie_id)
 
 	def initialize(self):
 		# OFDb didn't provide the runtime, studio and classification but it provide a link to the german imdb entry
@@ -129,8 +129,8 @@
 	def __init__(self):
 		self.original_url_search   = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=OTitel&SText="
 		self.translated_url_search = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=DTitel&SText="
-		self.encode='utf-8'
-		self.remove_accents = False
+		self.encode                = 'utf-8'
+		self.remove_accents        = False
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
@@ -257,7 +257,7 @@
 			'o_title' 			: 'Bonne ann?e, La',
 			'director'			: 'Claude Lelouch',
 			'plot' 				: False,
-			'cast'				: 'Lino Ventura\n\
+			'cast'				: 'Lino Ventura' + _(' as ') + 'Simon \n\
 Fran?oise Fabian\n\
 Charles G?rard\n\
 Andr? Falcon' + _(' as ') + 'Le bijoutier\n\
@@ -301,7 +301,7 @@
 Yoon Soy' + _(' as ') + 'Wi-jin\n\
 Ahn Seong-gi' + _(' as ') + 'Ja-woon\n\
 Jeong Doo-hong' + _(' as ') + 'Heuk-Woon\n\
-Yoon Joo-sang\n\
+Yoon Joo-sang' + _(' as ') + 'Mu-woon \n\
 Kim Ji-yeong\n\
 Baek Chan-gi\n\
 Kim Jae-man\n\

Modified: branches/0.9.x/lib/test_movieplugins.py
===================================================================
--- branches/0.9.x/lib/test_movieplugins.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ branches/0.9.x/lib/test_movieplugins.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2006-2008
+# Copyright (c) 2006-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -64,6 +64,8 @@
 class PluginTester:
 	test_plugins = [
 		'PluginMovieAmazon',
+		'PluginMovieCinematografo',
+		'PluginMovieFilmDb',
 		'PluginMovieFilmeVonAZ',
 		'PluginMovieIMDB-de',
 		'PluginMovieKinoDe',

Modified: trunk/lib/plugins/movie/PluginMovieAmazon.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAmazon.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ trunk/lib/plugins/movie/PluginMovieAmazon.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -397,7 +397,7 @@
 Antonio Traver\n\
 Burt Young',
             'country'             : 'USA',
-            'genre'               : 'Mehr Drama, Drama',
+            'genre'               : 'Drama, Drama',
             'classification'      : 'Freigegeben ab 12 Jahren',
             'studio'              : 'MGM Home Entertainment GmbH (dt.)',
             'o_site'              : False,
@@ -419,7 +419,7 @@
 Fran?oise Fabian\n\
 Charles G?rard',
             'country'             : 'Frankreich, Italien',
-            'genre'               : 'Krimi, Mehr Drama, Mehr Kom?die, Drama, Kom?die, Krimi',
+            'genre'               : 'Krimikom?die, Drama, General AAS, Drama, Kom?die, Krimi',
             'classification'      : 'Freigegeben ab 12 Jahren',
             'studio'              : 'Warner Home Video - DVD',
             'o_site'              : False,
@@ -441,7 +441,7 @@
 Yoon So-yi\n\
 Ahn Sung-kee',
             'country'             : 'S?dkorea',
-            'genre'               : 'Actionkom?die, Abenteuer- & Actionkom?die, Fantasykom?die, Action, Kom?die, Mehr Fantasy, Korea, Action, Kom?die, Fantasy, Unter 10 EUR',
+            'genre'               : 'Actionkom?die, Abenteuer- & Actionkom?die, Fantasykom?die, General AAS, Action, Kom?die, Action, Fantasy, Kom?die, Korea, Unter 10 EUR',
             'classification'      : 'Freigegeben ab 16 Jahren',
             'o_site'              : False,
             'site'                : 'http://www.amazon.de/dp/B000BSNOD6',

Modified: trunk/lib/plugins/movie/PluginMovieCinematografo.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ trunk/lib/plugins/movie/PluginMovieCinematografo.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -211,7 +211,7 @@
             'country'           : 'USA',
             'genre'             : 'drammatico, sportivo',
             'classification'    : False,
-            'studio'            : '20th Century Fox Italia, Dvd: 20th Century Fox Home Entertainment',
+            'studio'            : '20th Century Fox Italia, Dvd E Blu-ray: 20th Century Fox Home Entertainment',
             'o_site'            : False,
             'site'              : 'http://www.cinematografo.it/bancadati/consultazione/schedafilm.jsp?completa=si&codice=47931',
             'trailer'           : False,

Modified: trunk/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -338,7 +338,9 @@
 Nick Baker' + _(' as ') + 'Irish Pub Bartender\n\
 Don Sherman' + _(' as ') + 'Andy\n\
 Stu Nahan' + _(' as ') + 'Computer Fight Commentator (Sprechrolle)\n\
-Gary Compton' + _(' as ') + 'Sicherheitsbediensteter ?brige Besetzung in alphabetischer Reihenfolge:\n\
+Gary Compton' + _(' as ') + 'Sicherheitsbediensteter\n\
+?brige Besetzung in alphabetischer Reihenfolge:\n\
+Michael Ahl' + _(' as ') + 'Restaurant patron (nicht im Abspann)\n\
 Andrew Aninsman' + _(' as ') + 'Promoter (nicht im Abspann)\n\
 Ricky Cavazos' + _(' as ') + 'Boxing Spectator (nicht im Abspann)\n\
 Deon Derrico' + _(' as ') + 'High roller at limo (nicht im Abspann)\n\
@@ -346,6 +348,7 @@
 Mark J. Kilbane' + _(' as ') + 'Businessman (nicht im Abspann)\n\
 David Kneeream' + _(' as ') + 'Adrian\'s Patron (nicht im Abspann)\n\
 Dolph Lundgren' + _(' as ') + 'Captain Ivan Drago (Archivmaterial) (nicht im Abspann)\n\
+Dean Mauro' + _(' as ') + 'Sports Journalist (nicht im Abspann) (unbest?tigt)\n\
 Burgess Meredith' + _(' as ') + 'Mickey Goldmill (Archivmaterial) (nicht im Abspann)\n\
 Keith Moyer' + _(' as ') + 'Bargast (nicht im Abspann)\n\
 Mr. T' + _(' as ') + 'Clubber Lang (Archivmaterial) (nicht im Abspann)\n\
@@ -393,9 +396,10 @@
 Joseph Rythmann\n\
 Georges Staquet\n\
 Jacques Villedieu\n\
-Harry Walter ?brige Besetzung in alphabetischer Reihenfolge:\n\
+Harry Walter\n\
+?brige Besetzung in alphabetischer Reihenfolge:\n\
 Anouk Aim?e' + _(' as ') + 'Une femme (Archivmaterial) (nicht im Abspann)\n\
-Elie Chouraqui' + _(' as ') + ' (nicht im Abspann)\n\
+Elie Chouraqui' + _(' as ') + '(nicht im Abspann)\n\
 R?my Julienne' + _(' as ') + 'Chauffeur de taxi (nicht im Abspann)\n\
 Jean-Louis Trintignant' + _(' as ') + 'Un homme (Archivmaterial) (nicht im Abspann)',
             'country'            : 'Frankreich | Italien',

Modified: trunk/lib/plugins/movie/PluginMovieOFDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieOFDb.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ trunk/lib/plugins/movie/PluginMovieOFDb.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -20,7 +20,7 @@
 
 class Plugin(movie.Movie):
     def __init__(self, id):
-        self.encode   = 'utf8'
+        self.encode   = 'utf-8'
         self.movie_id = id
         self.url      = "http://www.ofdb.de/%s" % str(self.movie_id)
 
@@ -116,7 +116,7 @@
     def __init__(self):
         self.original_url_search   = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=OTitel&SText="
         self.translated_url_search = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=DTitel&SText="
-        self.encode                = 'utf8'
+        self.encode                = 'utf-8'
         self.remove_accents        = False
 
     def search(self,parent_window):
@@ -245,7 +245,7 @@
             'o_title'             : 'Bonne ann?e, La',
             'director'            : 'Claude Lelouch',
             'plot'                 : False,
-            'cast'                : 'Lino Ventura\n\
+            'cast'                : 'Lino Ventura' + _(' as ') + 'Simon \n\
 Fran?oise Fabian\n\
 Charles G?rard\n\
 Andr? Falcon' + _(' as ') + 'Le bijoutier\n\
@@ -289,7 +289,7 @@
 Yoon Soy' + _(' as ') + 'Wi-jin\n\
 Ahn Seong-gi' + _(' as ') + 'Ja-woon\n\
 Jeong Doo-hong' + _(' as ') + 'Heuk-Woon\n\
-Yoon Joo-sang\n\
+Yoon Joo-sang' + _(' as ') + 'Mu-woon \n\
 Kim Ji-yeong\n\
 Baek Chan-gi\n\
 Kim Jae-man\n\

Modified: trunk/lib/test_movieplugins.py
===================================================================
--- trunk/lib/test_movieplugins.py	2009-04-05 18:46:43 UTC (rev 1182)
+++ trunk/lib/test_movieplugins.py	2009-04-05 18:55:46 UTC (rev 1183)
@@ -68,6 +68,8 @@
 class PluginTester:
     test_plugins = [
         'PluginMovieAmazon',
+        'PluginMovieCinematografo',
+        'PluginMovieFilmDb',
         'PluginMovieFilmeVonAZ',
         'PluginMovieIMDB-de',
         'PluginMovieKinoDe',
@@ -163,7 +165,8 @@
 
         fields_to_fetch = ['o_title', 'title', 'director', 'plot', 'cast', 'country', 'genre',
                 'classification', 'studio', 'o_site', 'site', 'trailer', 'year',
-                'notes', 'runtime', 'image', 'rating']
+                'notes', 'runtime', 'image', 'rating', 'screenplay', 'cameraman',
+                'resolution', 'barcode']
 
         self.movie.fields_to_fetch = fields_to_fetch
     



From mikej06 at mail.berlios.de  Mon Apr  6 16:44:30 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 6 Apr 2009 16:44:30 +0200
Subject: [Griffith-svn] r1184 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200904061444.n36EiU2S030401@sheep.berlios.de>

Author: mikej06
Date: 2009-04-06 16:44:05 +0200 (Mon, 06 Apr 2009)
New Revision: 1184

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieDVDEmpire.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieDVDEmpire.py
Log:
[#348226] DVD Empire lookup problem

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-04-05 18:55:46 UTC (rev 1183)
+++ branches/0.9.x/ChangeLog	2009-04-06 14:44:05 UTC (rev 1184)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-04-06  Michael Jahn
+	* [#348226] DVD Empire lookup problem
+
 2009-04-05  Michael Jahn
 	* [#269907] PluginMovieFilmDb.py: list index out of range
 	  and complete update of the plugin with test data

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieDVDEmpire.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieDVDEmpire.py	2009-04-05 18:55:46 UTC (rev 1183)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieDVDEmpire.py	2009-04-06 14:44:05 UTC (rev 1184)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2007
+# Copyright (c) 2007-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -25,19 +25,19 @@
 import movie
 import re
 
-plugin_name = "DVD Empire"
-plugin_description = "International Retailer of DVD Movies"
-plugin_url = "www.dvdempire.com"
-plugin_language = _("English")
-plugin_author = "Michael Jahn"
+plugin_name         = "DVD Empire"
+plugin_description  = "International Retailer of DVD Movies"
+plugin_url          = "www.dvdempire.com"
+plugin_language     = _("English")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.1"
+plugin_version      = "1.1"
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode='iso-8859-1'
+		self.encode   = 'iso-8859-1'
 		self.movie_id = id
-		self.url = "http://www.dvdempire.com/Exec/v4_item.asp?item_id=" + str(self.movie_id)
+		self.url      = "http://www.dvdempire.com/Exec/v4_item.asp?item_id=" + str(self.movie_id)
 	
 	def get_image(self):
 		tmp_page = gutils.trim(self.page, '<td align="center" valign="top" class="fontsmall">', '</td>')
@@ -57,6 +57,7 @@
 	def get_plot(self):
 		self.plot = gutils.strip_tags(gutils.trim(self.page, '<td width="100%" valign="top" class="fontsmall3">', '</td>'))
 		self.plot = self.plot.replace('\x93', '"')
+		self.plot = self.plot.replace('\x84', '"')
 
 	def get_year(self):
 		self.year = gutils.strip_tags(gutils.trim(self.page, '>Production Year:', '<br />'))
@@ -110,22 +111,26 @@
 		tmp_page = tmp_page.replace('<br />', '\n')
 		tmp_page = gutils.strip_tags(tmp_page)
 		if tmp_page <> '':
+			tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
 			self.notes = self.notes + '\nFeatures:' + tmp_page + '\n'
 		tmp_page = gutils.trim(self.page, 'Video:', '<b>')
 		tmp_page = tmp_page.replace('<br>', '\n')
 		tmp_page = tmp_page.replace('<br />', '\n')
 		tmp_page = gutils.strip_tags(tmp_page)
 		if tmp_page <> '':
+			tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
 			self.notes = self.notes + '\nVideo:' + tmp_page + '\n'
 		tmp_page = gutils.trim(self.page, 'Audio:', '<b>')
 		tmp_page = tmp_page.replace('<br>', '\n')
 		tmp_page = tmp_page.replace('<br />', '\n')
 		tmp_page = gutils.strip_tags(tmp_page)
 		if tmp_page <> '':
+			tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
 			self.notes = self.notes + '\nAudio:' + tmp_page
 		tmp_page = gutils.trim(self.page, 'Subtitles:', '<b>')
 		tmp_page = gutils.strip_tags(tmp_page)
 		if tmp_page <> '':
+			tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
 			self.notes = self.notes + '\nSubtitles:\n' + tmp_page + '\n'
 
 class SearchPlugin(movie.SearchMovie):
@@ -163,16 +168,79 @@
 		return self.page
 
 	def get_searches(self):
-		split_pattern = re.compile('<a[\t ]+href=["\']/Exec/v4_item[.]asp[?]userid=[-0-9]+[&]amp;item_id=')
-		check_pattern = re.compile('[0-9]+[&]amp;searchID=[0-9]+["\']>')
+		split_pattern = re.compile('<a[\t ]+href=["\']/Exec/v4_item[.]asp[?](?:userid=[-0-9]+[&]amp;)*item_id=([0-9]+)\'')
 		elements = split_pattern.split(self.page)
-		elements[0] = ''
-		for element in elements:
-			if element <> '':
-				is_an_item = check_pattern.search(element)
-				if is_an_item:
-					tmp_title = gutils.strip_tags(gutils.trim(element, ">", "</a>"))
-					if tmp_title <> '':
-						tmp_id = gutils.before(element,'&')
-						self.ids.append(tmp_id)
-						self.titles.append(tmp_title)
+		for index in range(1, len(elements), 2):
+			title_element = elements[index + 1]
+			tmp_title = gutils.strip_tags(gutils.trim(title_element, '>', '</a>'))
+			if tmp_title <> '':
+				self.ids.append(elements[index])
+				type = re.search('<b>Blu-ray</b>', title_element)
+				if type:
+					tmp_title = tmp_title + ' (Blu-ray)'
+				type = re.search('<b>DVD-Video</b>', title_element)
+				if type:
+					tmp_title = tmp_title + ' (DVD)'
+				self.titles.append(tmp_title)
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky Balboa' : [ 2, 2 ],
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'1300280' : { 
+			'title'               : 'Rocky Balboa',
+			'o_title'             : 'Rocky Balboa',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Geraldine Hughes\n\
+Milo Ventimiglia\n\
+Antonio Tarver',
+			'country'             : False,
+			'genre'               : 'Sports, Boxing, Drama',
+			'classification'      : 'PG',
+			'studio'              : 'Sony Pictures Home Entertainment',
+			'o_site'              : False,
+			'site'                : 'http://www.dvdempire.com/Exec/v4_item.asp?item_id=1300280',
+			'trailer'             : False,
+			'year'                : 2006,
+			'notes'               : 'Features:\n\
+Deleted Scenes & Alternate Ending\n\
+Boxing\'s Bloopers\n\
+Skill Vs. Will: The Making of Rocky Balboa\n\
+Reality in the Ring: Filming Rocky\'s Final Fight\n\
+Virtual Champion: Creating the Computer Fight\n\
+Audio Commentary with Sylvester Stallone\n\
+\n\
+Video:\n\
+Widescreen 1.85:1 Color (Anamorphic) \n\
+\n\
+Audio:\n\
+ENGLISH: Dolby Digital 5.1 [CC]\n\
+FRENCH: Dolby Digital 5.1\n\
+\n\
+Subtitles:\n\
+English, Spanish, French',
+			'runtime'             : 102,
+			'image'               : True,
+			'rating'              : 9,
+		},
+	}

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-04-05 18:55:46 UTC (rev 1183)
+++ trunk/ChangeLog	2009-04-06 14:44:05 UTC (rev 1184)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-04-06  Michael Jahn
+	* [#348226] DVD Empire lookup problem
+
 2009-04-05  Michael Jahn
 	* [#269907] PluginMovieFilmDb.py: list index out of range
 	  and complete update of the plugin with test data

Modified: trunk/lib/plugins/movie/PluginMovieDVDEmpire.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieDVDEmpire.py	2009-04-05 18:55:46 UTC (rev 1183)
+++ trunk/lib/plugins/movie/PluginMovieDVDEmpire.py	2009-04-06 14:44:05 UTC (rev 1184)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2007
+# Copyright (c) 2007-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -25,20 +25,20 @@
 import movie
 import re
 
-plugin_name = "DVD Empire"
-plugin_description = "International Retailer of DVD Movies"
-plugin_url = "www.dvdempire.com"
-plugin_language = _("English")
-plugin_author = "Michael Jahn"
+plugin_name         = "DVD Empire"
+plugin_description  = "International Retailer of DVD Movies"
+plugin_url          = "www.dvdempire.com"
+plugin_language     = _("English")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.1"
+plugin_version      = "1.1"
 
 class Plugin(movie.Movie):
     def __init__(self, id):
-        self.encode='iso-8859-1'
+        self.encode   = 'iso-8859-1'
         self.movie_id = id
-        self.url = "http://www.dvdempire.com/Exec/v4_item.asp?item_id=" + str(self.movie_id)
-    
+        self.url      = "http://www.dvdempire.com/Exec/v4_item.asp?item_id=" + str(self.movie_id)
+
     def get_image(self):
         tmp_page = gutils.trim(self.page, '<td align="center" valign="top" class="fontsmall">', '</td>')
         self.image_url = gutils.trim(tmp_page, '<img src=\'', '\' ')
@@ -56,7 +56,8 @@
 
     def get_plot(self):
         self.plot = gutils.strip_tags(gutils.trim(self.page, '<td width="100%" valign="top" class="fontsmall3">', '</td>'))
-        self.plot = self.plot.replace('\x93', '"')
+        self.plot = self.plot.replace(u'\x93', '"')
+        self.plot = self.plot.replace(u'\x84', '"')
 
     def get_year(self):
         self.year = gutils.strip_tags(gutils.trim(self.page, '>Production Year:', '<br />'))
@@ -110,29 +111,41 @@
         tmp_page = tmp_page.replace('<br />', '\n')
         tmp_page = gutils.strip_tags(tmp_page)
         if tmp_page <> '':
+            tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
             self.notes = self.notes + '\nFeatures:' + tmp_page + '\n'
         tmp_page = gutils.trim(self.page, 'Video:', '<b>')
         tmp_page = tmp_page.replace('<br>', '\n')
         tmp_page = tmp_page.replace('<br />', '\n')
         tmp_page = gutils.strip_tags(tmp_page)
         if tmp_page <> '':
+            tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
             self.notes = self.notes + '\nVideo:' + tmp_page + '\n'
         tmp_page = gutils.trim(self.page, 'Audio:', '<b>')
         tmp_page = tmp_page.replace('<br>', '\n')
         tmp_page = tmp_page.replace('<br />', '\n')
         tmp_page = gutils.strip_tags(tmp_page)
         if tmp_page <> '':
+            tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
             self.notes = self.notes + '\nAudio:' + tmp_page
         tmp_page = gutils.trim(self.page, 'Subtitles:', '<b>')
         tmp_page = gutils.strip_tags(tmp_page)
         if tmp_page <> '':
+            tmp_page = re.sub('[\r\n]+', '\n', tmp_page)
             self.notes = self.notes + '\nSubtitles:\n' + tmp_page + '\n'
 
+    def get_screenplay(self):
+        self.screenplay = gutils.strip_tags(gutils.trim(self.page, '>Writers:', '</a>'))
+        self.screenplay = self.screenplay.replace('&nbsp;', '')
+        self.screenplay = self.screenplay.replace('&#149;', '')
+
+    def get_barcode(self):
+        self.barcode = gutils.trim(self.page, '<b>UPC Code:</b>', '<')
+
 class SearchPlugin(movie.SearchMovie):
     def __init__(self):
         self.original_url_search   = "http://www.dvdempire.com/Exec/v1_search_all.asp?&site_media_id=0&pp=&search_refined=32&used=0&string="
         self.translated_url_search = "http://www.dvdempire.com/Exec/v1_search_all.asp?&site_media_id=0&pp=&search_refined=32&used=0&string="
-        self.encode = 'iso-8859-1'
+        self.encode                = 'iso-8859-1'
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
@@ -165,16 +178,81 @@
         return self.page
 
     def get_searches(self):
-        split_pattern = re.compile('<a[\t ]+href=["\']/Exec/v4_item[.]asp[?]userid=[-0-9]+[&]amp;item_id=')
-        check_pattern = re.compile('[0-9]+[&]amp;searchID=[0-9]+["\']>')
+        split_pattern = re.compile('<a[\t ]+href=["\']/Exec/v4_item[.]asp[?](?:userid=[-0-9]+[&]amp;)*item_id=([0-9]+)\'')
         elements = split_pattern.split(self.page)
-        elements[0] = ''
-        for element in elements:
-            if element <> '':
-                is_an_item = check_pattern.search(element)
-                if is_an_item:
-                    tmp_title = gutils.strip_tags(gutils.trim(element, ">", "</a>"))
-                    if tmp_title <> '':
-                        tmp_id = gutils.before(element,'&')
-                        self.ids.append(tmp_id)
-                        self.titles.append(tmp_title)
+        for index in range(1, len(elements), 2):
+            title_element = elements[index + 1]
+            tmp_title = gutils.strip_tags(gutils.trim(title_element, '>', '</a>'))
+            if tmp_title <> '':
+                self.ids.append(elements[index])
+                type = re.search('<b>Blu-ray</b>', title_element)
+                if type:
+                    tmp_title = tmp_title + ' (Blu-ray)'
+                type = re.search('<b>DVD-Video</b>', title_element)
+                if type:
+                    tmp_title = tmp_title + ' (DVD)'
+                self.titles.append(tmp_title)
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [ 2, 2 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '1300280' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Geraldine Hughes\n\
+Milo Ventimiglia\n\
+Antonio Tarver',
+            'country'             : False,
+            'genre'               : 'Sports, Boxing, Drama',
+            'classification'      : 'PG',
+            'studio'              : 'Sony Pictures Home Entertainment',
+            'o_site'              : False,
+            'site'                : 'http://www.dvdempire.com/Exec/v4_item.asp?item_id=1300280',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : 'Features:\n\
+Deleted Scenes & Alternate Ending\n\
+Boxing\'s Bloopers\n\
+Skill Vs. Will: The Making of Rocky Balboa\n\
+Reality in the Ring: Filming Rocky\'s Final Fight\n\
+Virtual Champion: Creating the Computer Fight\n\
+Audio Commentary with Sylvester Stallone\n\
+\n\
+Video:\n\
+Widescreen 1.85:1 Color (Anamorphic) \n\
+\n\
+Audio:\n\
+ENGLISH: Dolby Digital 5.1 [CC]\n\
+FRENCH: Dolby Digital 5.1\n\
+\n\
+Subtitles:\n\
+English, Spanish, French',
+            'runtime'             : 102,
+            'image'               : True,
+            'rating'              : 9,
+            'screenplay'          : 'Sylvester Stallone',
+            'barcode'             : '043396161900'
+        },
+    }



From mikej06 at mail.berlios.de  Wed Apr  8 22:16:57 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 8 Apr 2009 22:16:57 +0200
Subject: [Griffith-svn] r1185 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200904082016.n38KGvEH014736@sheep.berlios.de>

Author: mikej06
Date: 2009-04-08 22:16:23 +0200 (Wed, 08 Apr 2009)
New Revision: 1185

Added:
   branches/0.9.x/lib/plugins/movie/PluginMovieAllMovie.py
   trunk/lib/plugins/movie/PluginMovieAllMovie.py
Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/winpackage.iss
   trunk/ChangeLog
   trunk/winpackage.iss
Log:
added AllMovie plugin

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-04-06 14:44:05 UTC (rev 1184)
+++ branches/0.9.x/ChangeLog	2009-04-08 20:16:23 UTC (rev 1185)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-04-08  Michael Jahn
+	* added AllMovie plugin
+
 2009-04-06  Michael Jahn
 	* [#348226] DVD Empire lookup problem
 

Added: branches/0.9.x/lib/plugins/movie/PluginMovieAllMovie.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieAllMovie.py	2009-04-06 14:44:05 UTC (rev 1184)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieAllMovie.py	2009-04-08 20:16:23 UTC (rev 1185)
@@ -0,0 +1,268 @@
+# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+import gutils
+import movie
+import string, re
+
+plugin_name         = "allmovie"
+plugin_description  = "All Media Guide"
+plugin_url          = "www.allmovie.com"
+plugin_language     = _("English")
+plugin_author       = "Michael Jahn"
+plugin_author_email = "griffith-private at lists.berlios.de"
+plugin_version      = "1.0"
+
+class Plugin(movie.Movie):
+    def __init__(self, id):
+        self.encode   = 'utf-8'
+        self.movie_id = id
+        self.url      = 'http://allmovie.com/work/' + str(self.movie_id)
+
+    def initialize(self):
+        self.page_cast = self.open_page(url = 'http://allmovie.com/work/' + str(self.movie_id) + '/cast')
+        self.page_cast = gutils.trim(self.page_cast, 'id="results-table"', '</table>')
+        self.page_credits = self.open_page(url = 'http://allmovie.com/work/' + str(self.movie_id) + '/credits')
+        self.page_credits = gutils.trim(self.page_credits, 'id="results-table"', '</table>')
+
+    def get_image(self):
+        tmp_page = gutils.trim(self.page, 'image.allmusic.com', '"')
+        if tmp_page:
+            self.image_url = 'http://image.allmusic.com' + tmp_page
+        else:
+            self.image_url = ''
+
+    def get_o_title(self):
+        title = re.search('(?:[<]span[\t ]+class="title"[>])([^<]+)(?:</span>)', self.page)
+        if title:
+            self.o_title = title.group(0)
+        else:
+            self.o_title = ''
+
+    def get_title(self):
+        title = re.search('(?:[<]span[\t ]+class="title"[>])([^<]+)(?:</span>)', self.page)
+        if title:
+            self.title = title.group(0)
+        else:
+            self.title = ''
+
+    def get_director(self):
+        self.director = ''
+        tmp = gutils.trim(self.page, '<span>Director</span>', '</table>')
+        directors = re.split('artist/', tmp)
+        for index in range(1, len(directors), 1):
+            director = directors[index]
+            if index > 1:
+                self.director = self.director + ', ' + gutils.trim(director, '>', '<')
+            else:
+                self.director = self.director + gutils.trim(director, '>', '<')
+
+    def get_plot(self):
+        self.plot = gutils.trim(self.page, 'Plot Synopsis</td>', '</table>')
+        self.plot = string.replace(self.plot, '</tr>', '\n')
+
+    def get_year(self):
+        self.year = gutils.trim(self.page, 'href="http://allmovie.com/explore/year/', '"')
+
+    def get_runtime(self):
+        self.runtime = gutils.trim(self.page, '<span>Run Time</span>', '</table>')
+        foundtime = re.search('([0-9]+)(?: min[.])', self.runtime)
+        if foundtime:
+            self.runtime = foundtime.group(1)
+        else:
+            self.runtime = 0
+
+    def get_genre(self):
+        self.genre = ''
+        genres = re.split('href=["\']*http[:]//allmovie.com/explore/genre/', gutils.trim(self.page, '<span>Genres</span>', '</table>'))
+        for index in range(1, len(genres), 1):
+            genre = genres[index]
+            if index > 1:
+                self.genre = self.genre + ', ' + gutils.trim(genre, '>', '<')
+            else:
+                self.genre = self.genre + gutils.trim(genre, '>', '<')
+
+    def get_cast(self):
+        self.cast = ''
+        casts = re.split('artist/', self.page_cast)
+        for index in range(1, len(casts), 1):
+            cast = casts[index]
+            name = gutils.trim(cast, '>', '<')
+            played = gutils.clean(gutils.trim(cast, '>- ', '</td>'))
+            if played:
+                name = name + _(' as ') + played
+            if index > 1:
+                self.cast = self.cast + '\n' + name
+            else:
+                self.cast = self.cast + name
+
+    def get_classification(self):
+        self.classification = ''
+        tmp = gutils.trim(self.page, '<span>MPAA Rating</span>', '</table>')
+        jumptd = string.find(tmp, '</td>')
+        if jumptd >= 0:
+            jumptd = string.find(tmp[jumptd + 1:], '</td>')
+            if jumptd >= 0:
+                self.classification = tmp[jumptd + 1:]
+
+    def get_studio(self):
+        self.studio = ''
+        tmp = gutils.trim(self.page, '<span>Produced by</span>', '</table>')
+        studios = re.split('search/tag/899/', tmp)
+        for index in range(1, len(studios), 1):
+            studio = studios[index]
+            if index > 1:
+                self.studio = self.studio + ', ' + gutils.trim(studio, '>', '<')
+            else:
+                self.studio = self.studio + gutils.trim(studio, '>', '<')
+
+    def get_o_site(self):
+        self.o_site = ''
+        offsindex = string.find(self.page, '>Official Site</a>')
+        if offsindex >= 0:
+            offsindex = string.rfind(self.page[:offsindex], 'href="')
+            if offsindex >= 0:
+                self.o_site = gutils.before(self.page[offsindex + 6:], '"')
+
+    def get_site(self):
+        self.site = self.url
+
+    def get_trailer(self):
+        self.trailer = ''
+
+    def get_country(self):
+        self.country = ''
+        countries = re.split('href=["\']*http[:]//allmovie.com/explore/country/', self.page)
+        for index in range(1, len(countries), 1):
+            country = countries[index]
+            if index > 1:
+                self.country = self.country + ', ' + gutils.trim(country, '>', '<')
+            else:
+                self.country = self.country + gutils.trim(country, '>', '<')
+
+    def get_rating(self):
+        tmp = gutils.trim(self.page, '<span>Work Rating</span>', '</table>')
+        foundnumber = re.search('(?:title=")([0-9])(?: Stars)', tmp)
+        if foundnumber:
+            try:
+                self.rating = str(int(foundnumber.group(1)) * 2)
+            except:
+                self.rating = '0'
+
+    def get_notes(self):
+        self.notes = ''
+
+class SearchPlugin(movie.SearchMovie):
+    def __init__(self):
+        self.original_url_search   = "http://allmovie.com/search/all/"
+        self.translated_url_search = "http://allmovie.com/search/all/"
+        self.encode                = 'utf-8'
+
+    def search(self,parent_window):
+        if not self.open_search(parent_window):
+            return None
+        return self.page
+
+    def get_searches(self):
+        elements = re.split('href=["\']*http[:]//allmovie.com/work/', self.page)
+        for index in range(1, len(elements), 1):
+            element = elements[index]
+            idend = re.search('["\']', element)
+            if idend:
+                id = element[:idend.end() - 1]
+                title = gutils.trim(element, '>', '<')
+                additionals = re.split('class=["\']cell[^>]+[>]', element)
+                if len(additionals) > 2:
+                    title = title + ' (' + gutils.clean(gutils.before(additionals[2], '</td'))
+                    if len(additionals) > 3:
+                        title = title + ', ' + gutils.clean(gutils.before(additionals[3], '</td'))
+                        if len(additionals) > 4:
+                            title = title + ', ' + gutils.clean(gutils.before(additionals[4], '</td'))
+                    title = title + ')'
+                self.ids.append(id)
+                self.titles.append(title)
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [ 100, 100 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        'rocky-balboa-337682' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone' + _(' as ') + 'Rocky Balboa\n\
+Burt Young' + _(' as ') + 'Paulie\n\
+Antonio Tarver' + _(' as ') + 'Mason "The Line" Dixon\n\
+Geraldine Hughes' + _(' as ') + 'Marie\n\
+Milo Ventimiglia' + _(' as ') + 'Rocky Balboa Jr.\n\
+Tony Burton' + _(' as ') + 'Duke\n\
+A.J. Benza' + _(' as ') + 'L.C.\n\
+James Francis Kelly III' + _(' as ') + 'Steps\n\
+Lou DiBella\n\
+Mike Tyson' + _(' as ') + 'Himself\n\
+Woodrow W. Paige\n\
+Skip Bayless\n\
+Jay Crawford\n\
+Brian Kenny\n\
+Dana Jacobson\n\
+Chuck Johnson\n\
+Jim Lampley\n\
+Larry Merchant\n\
+Max Kellerman\n\
+Leroy Neiman\n\
+Bert Randolph Sugar\n\
+Bernard Fernandez\n\
+Michael Buffer\n\
+Talia Shire',
+            'country'             : 'USA',
+            'genre'               : 'Drama',
+            'classification'      : 'PG',
+            'studio'              : 'Chartoff Winkler Productions, Columbia Pictures, MGM, Revolution Studios',
+            'o_site'              : 'http://www.rocky.com/',
+            'site'                : 'http://allmovie.com/work/rocky-balboa-337682',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 101,
+            'image'               : True,
+            'rating'              : 6
+        },
+    }


Property changes on: branches/0.9.x/lib/plugins/movie/PluginMovieAllMovie.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: branches/0.9.x/winpackage.iss
===================================================================
--- branches/0.9.x/winpackage.iss	2009-04-06 14:44:05 UTC (rev 1184)
+++ branches/0.9.x/winpackage.iss	2009-04-08 20:16:23 UTC (rev 1185)
@@ -79,6 +79,7 @@
 Source: dist\lib\plugins\imp\*;    DestDir: {app}\lib\plugins\imp;    Flags: ignoreversion recursesubdirs createallsubdirs
 ; component based installation
 Source: dist\lib\plugins\movie\PluginMovie7arte.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\7arte
+Source: dist\lib\plugins\movie\PluginMovieAllMovie.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\AllMovie
 Source: dist\lib\plugins\movie\PluginMovieAllocine.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\French\Allocine
 Source: dist\lib\plugins\movie\PluginMovieAmazon.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Amazon
 Source: dist\lib\plugins\movie\PluginMovieAniDB.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\AnimeDB
@@ -147,6 +148,7 @@
 Name: Movie_Import_Plugins\Amazon;                   Description: Amazon Import Plugin; Types: full
 
 Name: Movie_Import_Plugins\English;                  Description: English Import Plugins; Types: full
+Name: Movie_Import_Plugins\English\AllMovie;         Description: All Media Guide / www.allmovie.com; Types: full
 Name: Movie_Import_Plugins\English\AnimeDB;          Description: AnimeDB / www.anidb.net; Types: full
 Name: Movie_Import_Plugins\English\DVD_Empire;       Description: DVD Empire / www.dvdempire.com; Types: full
 Name: Movie_Import_Plugins\English\Mediadis;         Description: Mediadis / www.mediadis.com; Types: full

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-04-06 14:44:05 UTC (rev 1184)
+++ trunk/ChangeLog	2009-04-08 20:16:23 UTC (rev 1185)
@@ -5,6 +5,9 @@
 (c) 2005-2009  Vasco Nunes, Piotr O?arowski
 
 
+2009-04-08  Michael Jahn
+	* added AllMovie plugin
+
 2009-04-06  Michael Jahn
 	* [#348226] DVD Empire lookup problem
 

Added: trunk/lib/plugins/movie/PluginMovieAllMovie.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAllMovie.py	2009-04-06 14:44:05 UTC (rev 1184)
+++ trunk/lib/plugins/movie/PluginMovieAllMovie.py	2009-04-08 20:16:23 UTC (rev 1185)
@@ -0,0 +1,300 @@
+# -*- coding: UTF-8 -*-
+
+__revision__ = '$Id$'
+
+# Copyright (c) 2009
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+import gutils
+import movie
+import string, re
+
+plugin_name         = "allmovie"
+plugin_description  = "All Media Guide"
+plugin_url          = "www.allmovie.com"
+plugin_language     = _("English")
+plugin_author       = "Michael Jahn"
+plugin_author_email = "griffith-private at lists.berlios.de"
+plugin_version      = "1.0"
+
+class Plugin(movie.Movie):
+    def __init__(self, id):
+        self.encode   = 'utf-8'
+        self.movie_id = id
+        self.url      = 'http://allmovie.com/work/' + str(self.movie_id)
+
+    def initialize(self):
+        self.page_cast = self.open_page(url = 'http://allmovie.com/work/' + str(self.movie_id) + '/cast')
+        self.page_cast = gutils.trim(self.page_cast, 'id="results-table"', '</table>')
+        self.page_credits = self.open_page(url = 'http://allmovie.com/work/' + str(self.movie_id) + '/credits')
+        self.page_credits = gutils.trim(self.page_credits, 'id="results-table"', '</table>')
+
+    def get_image(self):
+        tmp_page = gutils.trim(self.page, 'image.allmusic.com', '"')
+        if tmp_page:
+            self.image_url = 'http://image.allmusic.com' + tmp_page
+        else:
+            self.image_url = ''
+
+    def get_o_title(self):
+        title = re.search('(?:[<]span[\t ]+class="title"[>])([^<]+)(?:</span>)', self.page)
+        if title:
+            self.o_title = title.group(0)
+        else:
+            self.o_title = ''
+
+    def get_title(self):
+        title = re.search('(?:[<]span[\t ]+class="title"[>])([^<]+)(?:</span>)', self.page)
+        if title:
+            self.title = title.group(0)
+        else:
+            self.title = ''
+
+    def get_director(self):
+        self.director = ''
+        tmp = gutils.trim(self.page, '<span>Director</span>', '</table>')
+        directors = re.split('artist/', tmp)
+        for index in range(1, len(directors), 1):
+            director = directors[index]
+            if index > 1:
+                self.director = self.director + ', ' + gutils.trim(director, '>', '<')
+            else:
+                self.director = self.director + gutils.trim(director, '>', '<')
+
+    def get_plot(self):
+        self.plot = gutils.trim(self.page, 'Plot Synopsis</td>', '</table>')
+        self.plot = string.replace(self.plot, '</tr>', '\n')
+
+    def get_year(self):
+        self.year = gutils.trim(self.page, 'href="http://allmovie.com/explore/year/', '"')
+
+    def get_runtime(self):
+        self.runtime = gutils.trim(self.page, '<span>Run Time</span>', '</table>')
+        foundtime = re.search('([0-9]+)(?: min[.])', self.runtime)
+        if foundtime:
+            self.runtime = foundtime.group(1)
+        else:
+            self.runtime = 0
+
+    def get_genre(self):
+        self.genre = ''
+        genres = re.split('href=["\']*http[:]//allmovie.com/explore/genre/', gutils.trim(self.page, '<span>Genres</span>', '</table>'))
+        for index in range(1, len(genres), 1):
+            genre = genres[index]
+            if index > 1:
+                self.genre = self.genre + ', ' + gutils.trim(genre, '>', '<')
+            else:
+                self.genre = self.genre + gutils.trim(genre, '>', '<')
+
+    def get_cast(self):
+        self.cast = ''
+        casts = re.split('artist/', self.page_cast)
+        for index in range(1, len(casts), 1):
+            cast = casts[index]
+            name = gutils.trim(cast, '>', '<')
+            played = gutils.clean(gutils.trim(cast, '>- ', '</td>'))
+            if played:
+                name = name + _(' as ') + played
+            if index > 1:
+                self.cast = self.cast + '\n' + name
+            else:
+                self.cast = self.cast + name
+
+    def get_classification(self):
+        self.classification = ''
+        tmp = gutils.trim(self.page, '<span>MPAA Rating</span>', '</table>')
+        jumptd = string.find(tmp, '</td>')
+        if jumptd >= 0:
+            jumptd = string.find(tmp[jumptd + 1:], '</td>')
+            if jumptd >= 0:
+                self.classification = tmp[jumptd + 1:]
+
+    def get_studio(self):
+        self.studio = ''
+        tmp = gutils.trim(self.page, '<span>Produced by</span>', '</table>')
+        studios = re.split('search/tag/899/', tmp)
+        for index in range(1, len(studios), 1):
+            studio = studios[index]
+            if index > 1:
+                self.studio = self.studio + ', ' + gutils.trim(studio, '>', '<')
+            else:
+                self.studio = self.studio + gutils.trim(studio, '>', '<')
+
+    def get_o_site(self):
+        self.o_site = ''
+        offsindex = string.find(self.page, '>Official Site</a>')
+        if offsindex >= 0:
+            offsindex = string.rfind(self.page[:offsindex], 'href="')
+            if offsindex >= 0:
+                self.o_site = gutils.before(self.page[offsindex + 6:], '"')
+
+    def get_site(self):
+        self.site = self.url
+
+    def get_trailer(self):
+        self.trailer = ''
+
+    def get_country(self):
+        self.country = ''
+        countries = re.split('href=["\']*http[:]//allmovie.com/explore/country/', self.page)
+        for index in range(1, len(countries), 1):
+            country = countries[index]
+            if index > 1:
+                self.country = self.country + ', ' + gutils.trim(country, '>', '<')
+            else:
+                self.country = self.country + gutils.trim(country, '>', '<')
+
+    def get_rating(self):
+        tmp = gutils.trim(self.page, '<span>Work Rating</span>', '</table>')
+        foundnumber = re.search('(?:title=")([0-9])(?: Stars)', tmp)
+        if foundnumber:
+            try:
+                self.rating = str(int(foundnumber.group(1)) * 2)
+            except:
+                self.rating = '0'
+
+    def get_notes(self):
+        self.notes = ''
+
+    def get_cameraman(self):
+        self.cameraman = ''
+        credits = re.split('artist/', self.page_credits)
+        for index in range(1, len(credits), 1):
+            credit = credits[index]
+            name = gutils.trim(credit, '>', '<')
+            played = string.find(credit, 'Cinematographer')
+            if played >= 0:
+                if self.cameraman:
+                    self.cameraman = self.cameraman + ', ' + name
+                else:
+                    self.cameraman = self.cameraman + name
+
+    def get_screenplay(self):
+        self.screenplay = ''
+        credits = re.split('artist/', self.page_credits)
+        for index in range(1, len(credits), 1):
+            credit = credits[index]
+            name = gutils.trim(credit, '>', '<')
+            played = string.find(credit, 'Screenwriter')
+            if played >= 0:
+                if self.screenplay:
+                    self.screenplay = self.screenplay + ', ' + name
+                else:
+                    self.screenplay = self.screenplay + name
+
+    def get_barcode(self):
+        self.barcode = ''
+
+class SearchPlugin(movie.SearchMovie):
+    def __init__(self):
+        self.original_url_search   = "http://allmovie.com/search/all/"
+        self.translated_url_search = "http://allmovie.com/search/all/"
+        self.encode                = 'utf-8'
+
+    def search(self,parent_window):
+        if not self.open_search(parent_window):
+            return None
+        return self.page
+
+    def get_searches(self):
+        elements = re.split('href=["\']*http[:]//allmovie.com/work/', self.page)
+        for index in range(1, len(elements), 1):
+            element = elements[index]
+            idend = re.search('["\']', element)
+            if idend:
+                id = element[:idend.end() - 1]
+                title = gutils.trim(element, '>', '<')
+                additionals = re.split('class=["\']cell[^>]+[>]', element)
+                if len(additionals) > 2:
+                    title = title + ' (' + gutils.clean(gutils.before(additionals[2], '</td'))
+                    if len(additionals) > 3:
+                        title = title + ', ' + gutils.clean(gutils.before(additionals[3], '</td'))
+                        if len(additionals) > 4:
+                            title = title + ', ' + gutils.clean(gutils.before(additionals[4], '</td'))
+                    title = title + ')'
+                self.ids.append(id)
+                self.titles.append(title)
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [ 100, 100 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        'rocky-balboa-337682' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone' + _(' as ') + 'Rocky Balboa\n\
+Burt Young' + _(' as ') + 'Paulie\n\
+Antonio Tarver' + _(' as ') + 'Mason "The Line" Dixon\n\
+Geraldine Hughes' + _(' as ') + 'Marie\n\
+Milo Ventimiglia' + _(' as ') + 'Rocky Balboa Jr.\n\
+Tony Burton' + _(' as ') + 'Duke\n\
+A.J. Benza' + _(' as ') + 'L.C.\n\
+James Francis Kelly III' + _(' as ') + 'Steps\n\
+Lou DiBella\n\
+Mike Tyson' + _(' as ') + 'Himself\n\
+Woodrow W. Paige\n\
+Skip Bayless\n\
+Jay Crawford\n\
+Brian Kenny\n\
+Dana Jacobson\n\
+Chuck Johnson\n\
+Jim Lampley\n\
+Larry Merchant\n\
+Max Kellerman\n\
+Leroy Neiman\n\
+Bert Randolph Sugar\n\
+Bernard Fernandez\n\
+Michael Buffer\n\
+Talia Shire',
+            'country'             : 'USA',
+            'genre'               : 'Drama',
+            'classification'      : 'PG',
+            'studio'              : 'Chartoff Winkler Productions, Columbia Pictures, MGM, Revolution Studios',
+            'o_site'              : 'http://www.rocky.com/',
+            'site'                : 'http://allmovie.com/work/rocky-balboa-337682',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 101,
+            'image'               : True,
+            'rating'              : 6,
+            'cameraman'           : 'Clark Mathis',
+            'screenplay'          : 'Sylvester Stallone',
+            'barcode'             : False
+        },
+    }


Property changes on: trunk/lib/plugins/movie/PluginMovieAllMovie.py
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/winpackage.iss
===================================================================
--- trunk/winpackage.iss	2009-04-06 14:44:05 UTC (rev 1184)
+++ trunk/winpackage.iss	2009-04-08 20:16:23 UTC (rev 1185)
@@ -79,6 +79,7 @@
 Source: dist\lib\plugins\imp\*;    DestDir: {app}\lib\plugins\imp;    Flags: ignoreversion recursesubdirs createallsubdirs
 ; component based installation
 Source: dist\lib\plugins\movie\PluginMovie7arte.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Portuguese\7arte
+Source: dist\lib\plugins\movie\PluginMovieAllMovie.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\AllMovie
 Source: dist\lib\plugins\movie\PluginMovieAllocine.py;      DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\French\Allocine
 Source: dist\lib\plugins\movie\PluginMovieAmazon.py;        DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\Amazon
 Source: dist\lib\plugins\movie\PluginMovieAniDB.py;         DestDir: {app}\lib\plugins\movie; Flags: ignoreversion; Components: Movie_Import_Plugins\English\AnimeDB
@@ -147,6 +148,7 @@
 Name: Movie_Import_Plugins\Amazon;                   Description: Amazon Import Plugin; Types: full
 
 Name: Movie_Import_Plugins\English;                  Description: English Import Plugins; Types: full
+Name: Movie_Import_Plugins\English\AllMovie;         Description: All Media Guide / www.allmovie.com; Types: full
 Name: Movie_Import_Plugins\English\AnimeDB;          Description: AnimeDB / www.anidb.net; Types: full
 Name: Movie_Import_Plugins\English\DVD_Empire;       Description: DVD Empire / www.dvdempire.com; Types: full
 Name: Movie_Import_Plugins\English\Mediadis;         Description: Mediadis / www.mediadis.com; Types: full



From mikej06 at mail.berlios.de  Sat Apr 11 22:09:50 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 11 Apr 2009 22:09:50 +0200
Subject: [Griffith-svn] r1186 - branches/0.9.x/lib trunk/lib
Message-ID: <200904112009.n3BK9o5P014026@sheep.berlios.de>

Author: mikej06
Date: 2009-04-11 22:09:31 +0200 (Sat, 11 Apr 2009)
New Revision: 1186

Modified:
   branches/0.9.x/lib/movie.py
   trunk/lib/movie.py
Log:
added two headers to the http requests to work around some trouble with UMTS and other mobile internet connections.
mobile internet connections are using transparent "compression" by default which means that "white characters"
are removed from html pages before transmission. it breaks the movie import plugins sometimes.

Modified: branches/0.9.x/lib/movie.py
===================================================================
--- branches/0.9.x/lib/movie.py	2009-04-08 20:16:23 UTC (rev 1185)
+++ branches/0.9.x/lib/movie.py	2009-04-11 20:09:31 UTC (rev 1186)
@@ -338,15 +338,21 @@
 #
 _uaurlopener = None
 def urlretrieve(url, filename=None, reporthook=None, data=None):
-    global _uaurlopener
-    if not _uaurlopener:
-        _uaurlopener = UAFancyURLopener()
-    return _uaurlopener.retrieve(url, filename, reporthook, data)
+	global _uaurlopener
+	if not _uaurlopener:
+		_uaurlopener = UAFancyURLopener()
+	return _uaurlopener.retrieve(url, filename, reporthook, data)
 
 class UAFancyURLopener(FancyURLopener):
 	# use Firefox 3.0 User-Agent string from Windows XP
 	version = 'Mozilla/5.0 (Windows; U; Windows NT 6.0) Gecko/2008052906 Firefox/3.0'
-	
+	def __init__(self, *args, **kwargs):
+		FancyURLopener.__init__(self, *args, **kwargs)
+		# additional HTTP headers to work around the html file compression which
+		# is used by UMTS connections. compression breaks the movie import plugins sometimes
+		self.addheaders.append(('Cache-Control', 'no-cache'))
+		self.addheaders.append(('Pragma', 'no-cache'))
+
 class Progress:
 	def __init__(self, window, title = '', message = ''):
 		self.status = False

Modified: trunk/lib/movie.py
===================================================================
--- trunk/lib/movie.py	2009-04-08 20:16:23 UTC (rev 1185)
+++ trunk/lib/movie.py	2009-04-11 20:09:31 UTC (rev 1186)
@@ -387,7 +387,13 @@
 class UAFancyURLopener(FancyURLopener):
     # use Firefox 3.0 User-Agent string from Windows XP
     version = 'Mozilla/5.0 (Windows; U; Windows NT 6.0) Gecko/2008052906 Firefox/3.0'
-    
+    def __init__(self, *args, **kwargs):
+        FancyURLopener.__init__(self, *args, **kwargs)
+        # additional HTTP headers to work around the html file compression which
+        # is used by UMTS connections. compression breaks the movie import plugins sometimes
+        self.addheaders.append(('Cache-Control', 'no-cache'))
+        self.addheaders.append(('Pragma', 'no-cache'))
+
 class Progress:
     def __init__(self, window, title = '', message = ''):
         self.status = False



From mikej06 at mail.berlios.de  Wed Apr 15 22:38:31 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 15 Apr 2009 22:38:31 +0200
Subject: [Griffith-svn] r1187 - branches/0.9.x branches/0.9.x/lib
	branches/0.9.x/lib/plugins/movie trunk trunk/lib
	trunk/lib/plugins/movie
Message-ID: <200904152038.n3FKcVGc023334@sheep.berlios.de>

Author: mikej06
Date: 2009-04-15 22:37:42 +0200 (Wed, 15 Apr 2009)
New Revision: 1187

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieCineMovies.py
   branches/0.9.x/lib/plugins/movie/PluginMovieCineteka.py
   branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py
   branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
   branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py
   branches/0.9.x/lib/test_movieplugins.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieCineMovies.py
   trunk/lib/plugins/movie/PluginMovieCineteka.py
   trunk/lib/plugins/movie/PluginMovieFilmDb.py
   trunk/lib/plugins/movie/PluginMovieIMDB-de.py
   trunk/lib/plugins/movie/PluginMovieIMDB.py
   trunk/lib/test_movieplugins.py
Log:
* added data for automated tests of the IMDB plugin
* added data for automated tests of the CineMovies plugin
* updated CineMovies plugin
* updated Cineteka plugin
* updated FilmDb plugin

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-04-11 20:09:31 UTC (rev 1186)
+++ branches/0.9.x/ChangeLog	2009-04-15 20:37:42 UTC (rev 1187)
@@ -5,6 +5,13 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-15  Michael Jahn
+	* added data for automated tests of the IMDB plugin
+	* added data for automated tests of the CineMovies plugin
+	* updated CineMovies plugin
+	* updated Cineteka plugin
+	* updated FilmDb plugin
+	
 2009-04-08  Michael Jahn
 	* added AllMovie plugin
 

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieCineMovies.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieCineMovies.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieCineMovies.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -83,7 +83,7 @@
 		self.cast = self.cast.replace('</tr>', '\n')
 		self.cast = gutils.clean(self.cast)
 		self.cast = re.sub('\n[ \t]+', '\n', self.cast)
-		self.cast = re.sub('[.]+', _(' as '), self.cast)
+		self.cast = re.sub('[.][.]+', _(' as '), self.cast)
 		self.cast = re.sub(_(' as ') + '(\n|$)', '\n', self.cast)
 		self.cast = self.cast.encode(self.encode)
 
@@ -109,7 +109,7 @@
 		self.country = self.country.encode(self.encode)
 
 	def get_rating(self):
-		self.rating = gutils.clean(gutils.trim(self.page, '<DIV id=scoree>', '</DIV>')).encode(self.encode)
+		self.rating = gutils.clean(gutils.trim(self.page, '<div id=scoree>', '</div>')).encode(self.encode)
 
 
 class SearchPlugin(movie.SearchMovie):
@@ -138,3 +138,59 @@
 				self.titles.append(title + ' (' + year + ')')
 		else:
 			self.number_results = 0
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky Balboa' : [ 2, 2 ],
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'6065' : { 
+			'title'               : 'Rocky Balboa',
+			'o_title'             : 'Rocky VI',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Sylvester Stallone' + _(' as ') + 'Rocky Balboa\n\
+Burt Young' + _(' as ') + 'Paulie\n\
+Antonio Tarver' + _(' as ') + 'Mason "The Line"Dixon\n\
+Geraldine Hughes' + _(' as ') + 'Marie\n\
+Milo Ventimiglia' + _(' as ') + 'Rocky Jr.\n\
+Tony Burton' + _(' as ') + 'Duke\n\
+A.J. Benza' + _(' as ') + 'L.C.\n\
+James Francis Kelly III' + _(' as ') + 'Steps\n\
+Talia Shire' + _(' as ') + 'Adrian\n\
+Lou DiBella' + _(' as ') + 'Lui-m??me\n\
+Mike Tyson' + _(' as ') + 'Lui-m??me\n\
+Henry G. Sanders' + _(' as ') + 'Martin\n\
+Pedro Lovell' + _(' as ') + 'Spider Rico\n\
+Angela Boyd' + _(' as ') + 'Angie\n\
+Lahmard J. Tate' + _(' as ') + 'X-Cell',
+			'country'             : 'USA',
+ 			'genre'               : 'Drame',
+			'classification'      : False,
+			'studio'              : 'Twentieth Century Fox France',
+			'o_site'              : 'http://www.sonypictures.com/movies/rocky/',
+			'site'                : 'http://www.cinemovies.fr/fiche_film.php?IDfilm=6065',
+			'trailer'             : False,
+			'year'                : 2007,
+			'notes'               : False,
+			'runtime'             : 105,
+			'image'               : True,
+			'rating'              : 6
+		},
+	}
\ No newline at end of file

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieCineteka.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieCineteka.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieCineteka.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -1,8 +1,8 @@
 # -*- coding: UTF-8 -*-
 
-__revision__ = '$Id: PluginMovie7arte.py 478 2006-12-05 21:14:51Z piotrek $'
+__revision__ = '$Id$'
 
-# Copyright (c) 2005-2007 Vasco Nunes, Piotr Ozarowski
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr Ozarowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -23,85 +23,92 @@
 
 import gutils
 import movie
-import string
+import string, re
 
-plugin_name = "Cineteka"
-plugin_description = "O seu Clube de Video Online"
-plugin_url = "cineteka.com"
-plugin_language = _("Portuguese")
-plugin_author = "Vasco Nunes"
+plugin_name         = "Cineteka"
+plugin_description  = "O seu Clube de Video Online"
+plugin_url          = "cineteka.com"
+plugin_language     = _("Portuguese")
+plugin_author       = "Vasco Nunes"
 plugin_author_email = "<vasco.m.nunes at gmail.com>"
-plugin_version = "0.3"
+plugin_version      = "0.4"
 
 class Plugin(movie.Movie):
 	"""A movie plugin object"""
 	def __init__(self, id):
-		self.encode='iso-8859-1'
+		self.encode   = 'iso-8859-1'
 		self.movie_id = id
-		self.url = "http://www.cineteka.com/index.php?op=Movie&id=" + str(self.movie_id)
+		self.url      = "http://www.cineteka.com/index.php?op=Movie&id=" + str(self.movie_id)
 
+	def initialize(self):
+		self.page_unicode = self.page.decode(self.encode)
+
 	def get_image(self):
 		"""Finds the film's poster image"""
 		self.image_url = "http://www.cineteka.com/img/filmes/" + str(self.movie_id) + "_big.jpg"
 
 	def get_o_title(self):
 		"""Finds the film's original title"""
-		self.o_title = string.capwords(gutils.trim(self.page, """<nobr><span class="txt11">(""", ")"))
+		self.o_title = gutils.trim(self.page, '<nobr><span class="txt11">(', ')')
 
 	def get_title(self):
 		"""Finds the film's local title.
 		Probably the original title translation"""
-		self.title = string.capwords(gutils.trim(self.page, """<td class="txt12"><b>""", "</b>"))
+		self.title = gutils.trim(self.page, '<td class="movieT"><b>', '</b>')
 
 	def get_director(self):
 		"""Finds the film's director"""
-		self.director = gutils.strip_tags(gutils.trim(self.page, "<div><b>Realiza????o:</b><br>", "</div>"))
-		self.director = string.replace(self.director,"<br>", ", ")
+		self.director = gutils.strip_tags(gutils.trim(self.page_unicode, u'<div><b>Realiza????o:</b><br>', u'</div>')).encode(self.encode)
+		self.director = string.replace(self.director, '<br>', ', ')
 		self.director = gutils.strip_tags(self.director)
 
 	def get_plot(self):
 		"""Finds the film's plot"""
-		self.plot = gutils.trim(self.page, """<div class="txt-normal" style="margin-top: 10px;">""", "</td></tr></table>")
+		self.plot = gutils.trim(self.page, '<div class="txt-normal" style="margin-top: 10px;">', '</td></tr></table>')
+		self.plot = self.plot.replace('\x93', '"')
+		self.plot = self.plot.replace('\x94', '"')
+		self.plot = self.plot.replace('\x96', '-')
 
 	def get_year(self):
 		"""Finds the film's year"""
-		self.year = gutils.trim(self.page, "<b>Ano:</b> ", "</div>")
+		self.year = gutils.trim(self.page, '<b>Ano:</b> ', '</div>')
 
 	def get_runtime(self):
 		"""Finds the film's running time"""
-		self.runtime = gutils.trim(self.page, "<td><b>Dura????o:</b> ", " min.</td>")
+		self.runtime = gutils.trim(self.page_unicode, u'<td><b>Dura????o:</b> ', u' min.</td>').encode(self.encode)
 
 	def get_genre(self):
 		"""Finds the film's genre"""
-		self.genre = gutils.strip_tags(gutils.trim(self.page, "<b>G??nero:</b><br>", "</div>"))
-		self.genre = string.replace(self.genre,"<br>", ", ")
+		self.genre = gutils.trim(self.page_unicode, u'<b>G??nero:</b><br>', u'</div>').encode(self.encode)
+		self.genre = string.replace(self.genre, '<br>', ', ')
 		self.genre = gutils.strip_tags(self.genre)
 
 	def get_cast(self):
-		self.cast = gutils.strip_tags(gutils.trim(self.page, "<b>Elenco:</b> ", "</td>"))
-		self.cast = string.replace(self.cast, ", ", "")
-		self.cast = string.replace(self.cast, "\t", "")
-		self.cast = string.replace(self.cast, "\n ", "\n")
+		self.cast = gutils.trim(self.page, '<b>Elenco:</b>', '</td>')
+		self.cast = string.replace(self.cast, '<br>', '\n')
+		self.cast = string.replace(self.cast, ', ', '')
+		self.cast = string.replace(self.cast, '\t', '')
+		self.cast = string.replace(self.cast, '\n ', '\n')
+		self.cast = gutils.clean(self.cast)
+		self.cast = re.sub('[ \t]*[\n]+[ \t]*' , '\n', self.cast)
 
 	def get_classification(self):
 		"""Find the film's classification"""
-		self.classification = gutils.trim(self.page, "<b>Idade:</b> ", "</div>")
+		self.classification = gutils.trim(self.page, '<b>Idade:</b> ', '</div>')
 
 	def get_studio(self):
 		"""Find the studio"""
-		self.studio = ""
+		self.studio = ''
 
 	def get_o_site(self):
 		"""Find the film's oficial site"""
-		self.o_site = gutils.trim(self.page, \
-			"<a class=\"button\" href=\"", \
-			" title=\"Consultar t??tulo no Internet Movie Data Base\"")
+		self.o_site = gutils.trim(self.page_unicode, \
+				u'<a class="button" href="', \
+				u'" title="Consultar t??tulo no Internet Movie Data Base"').encode(self.encode)
 
 	def get_site(self):
 		"""Find the film's imdb details page"""
-		self.site = gutils.trim(self.page, \
-			"</td><td><a class=\"button\" href=\"", \
-			"""" title="Consultar t????tulo""")
+		self.site = self.url
 
 	def get_trailer(self):
 		"""Find the film's trailer page or location"""
@@ -109,43 +116,91 @@
 
 	def get_country(self):
 		"""Find the film's country"""
-		self.country = gutils.trim(self.page, "<b>Pa??s:</b><br>", "</div>")
-		self.country = string.replace(self.country,"<br>", ", ")
+		self.country = gutils.trim(self.page_unicode, u'<b>Pa??s:</b><br>', u'</div>').encode(self.encode)
+		self.country = string.replace(self.country, '<br>', ', ')
 		self.country = gutils.strip_tags(self.country)
 
 	def get_rating(self):
 		"""Find the film's rating. From 0 to 10.
 		Convert if needed when assigning."""
-		self.rating = 0
+		self.rating = gutils.clean(gutils.trim(self.page, 'IMDB: ', '</span>'))
+		try:
+			self.rating = round(float(self.rating), 0)
+		except Exception, e:
+			self.rating = 0
 
 class SearchPlugin(movie.SearchMovie):
 	"""A movie search object"""
 	def __init__(self):
-		self.original_url_search = "http://www.cineteka.com/index.php?op=MovieSearch&s="
+		self.original_url_search   = "http://www.cineteka.com/index.php?op=MovieSearch&s="
 		self.translated_url_search = self.original_url_search
-		self.encode='iso-8859-1'
+		self.encode                = 'iso-8859-1'
 
 	def search(self, parent_window):
 		"""Perform the web search"""
 		self.open_search(parent_window)
-		self.sub_search()
+		self.page = gutils.trim(self.page, 'tulo(s): ', '<div class="menuright">')
 		return self.page
 
-	def sub_search(self):
-		"""Isolating just a portion (with the data we want) of the results"""
-		self.page = gutils.trim(self.page, \
-			"""o:</div>""", """<div style="margin-top: 10px; text-align: center;"></div>""")
-
 	def get_searches(self):
 		"""Try to find both id and film title for each search result"""
-		elements = string.split(self.page, "</a>]</td>")
-		self.number_results = elements[-1]
+		elements = re.split('index[.]php[?]op=Movie&id=([0-9]+)">', self.page)
 
-		if (elements[0]<>''):
-			for element in elements:
-				self.ids.append(gutils.trim(element, "?op=Movie&id=", "\""))
-				self.titles.append(gutils.strip_tags(gutils.convert_entities \
-					(gutils.trim(element, """<td class="txt12"><b>""", "</span></nobr></td>"))))
-		else:
-			self.number_results = 0
+		for index in range(2, len(elements), 2):
+			id = elements[index - 1]
+			title = gutils.before(elements[index], '<')
+			self.ids.append(id)
+			self.titles.append(gutils.strip_tags(gutils.convert_entities(title)))
 
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky Balboa' : [ 1, 1 ],
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'002551' : { 
+			'title'               : 'Rocky Balboa',
+			'o_title'             : 'Rocky Balboa',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Antonio Tarver\n\
+Geraldine Hughes\n\
+Milo Ventimiglia\n\
+Tony Burton\n\
+A.J. Benza\n\
+James Francis Kelly III\n\
+Talia Shire\n\
+Lou DiBella\n\
+Mike Tyson\n\
+Henry G. Sanders',
+			'country'             : 'EUA',
+			'genre'               : 'Ac????o, Desporto, Drama',
+			'classification'      : 'M/12',
+			'studio'              : False,
+			'o_site'              : 'http://www.imdb.com/title/tt0479143/',
+			'site'                : 'http://www.cineteka.com/index.php?op=Movie&id=002551',
+			'trailer'             : False,
+			'year'                : 2006,
+			'notes'               : False,
+			'runtime'             : 102,
+			'image'               : True,
+			'rating'              : 8
+		},
+	}

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -43,7 +43,7 @@
 		tmp = gutils.trim(self.page, 'plakat.php?', '\'')
 		if tmp:
 			page_image = self.open_page(url='http://www.filmdb.de/plakat.php?' + tmp)
-			tmp = gutils.trim(self.page, 'http://bilder.filmdb.de', '"')
+			tmp = gutils.trim(self.page, 'bilder.filmdb.de', '\'')
 			if tmp:
 				self.image_url = 'http://bilder.filmdb.de' + tmp
 
@@ -194,8 +194,8 @@
 			'cast'                : 'Dolph Lundgren\n\
 Sylvester Stallone\n\
 Carl Weathers\n\
+Mike Tyson\n\
 Burt Young\n\
-Mike Tyson\n\
 Talia Shire\n\
 Burgess Meredith\n\
 Tony Burton\n\
@@ -209,45 +209,45 @@
 Robert Michael Kelly\n\
 LeRoy Neiman\n\
 Stu Nahan\n\
+Tobias Segal\n\
 Skip Bayless\n\
 Gunnar Peterson\n\
-Tobias Segal\n\
 Marc Ratner\n\
 Henry G. Sanders\n\
+Rick Buchborn\n\
+Ricky Cavazos\n\
+Charles Johnson\n\
 Angela Boyd\n\
 Ana Gerena\n\
-Ricky Cavazos\n\
-Rick Buchborn\n\
 Fran Pultro\n\
+Tim Carr\n\
 Joe Cortez\n\
-Charles Johnson\n\
 Jody Giambelluca\n\
+Carter Mitchell\n\
+A.J. Benza\n\
 Yahya\n\
-Tim Carr\n\
+Maureen Schilling\n\
+James Binns\n\
 Jack Lazzarado\n\
-Carter Mitchell\n\
 Barney Fitzpatrick\n\
-Maureen Schilling\n\
-James Binns\n\
 Antonio Tarver\n\
-A.J. Benza\n\
+Nick Baker\n\
+Jim Lampley\n\
 Matt Frack\n\
 Louis Giansante\n\
 Kevin King Templeton\n\
+Paul Dion Monte\n\
+Dana Jacobson\n\
+Brian Kenny\n\
 Woody Paige\n\
 Pedro Lovell\n\
-Nick Baker\n\
-Brian Kenny\n\
-Paul Dion Monte\n\
-Jim Lampley\n\
-Dana Jacobson\n\
+Larry Merchant\n\
 Bert Randolph Sugar\n\
 Bernard Fern??ndez\n\
-Larry Merchant\n\
+Vinod Kumar\n\
 Anthony Lato Jr.\n\
 Max Kellerman\n\
 Lou DiBella\n\
-Vinod Kumar\n\
 Johnnie Hobbs Jr.\n\
 Jay Crawford\n\
 Gary Compton\n\

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -354,8 +354,7 @@
 Nick Baker' + _(' as ') + 'Irish Pub Bartender\n\
 Don Sherman' + _(' as ') + 'Andy\n\
 Stu Nahan' + _(' as ') + 'Computer Fight Commentator (Sprechrolle)\n\
-Gary Compton' + _(' as ') + 'Sicherheitsbediensteter\n\
-??brige Besetzung in alphabetischer Reihenfolge:\n\
+Gary Compton' + _(' as ') + 'Sicherheitsbediensteter ??brige Besetzung in alphabetischer Reihenfolge:\n\
 Michael Ahl' + _(' as ') + 'Restaurant patron (nicht im Abspann)\n\
 Andrew Aninsman' + _(' as ') + 'Promoter (nicht im Abspann)\n\
 Ricky Cavazos' + _(' as ') + 'Boxing Spectator (nicht im Abspann)\n\
@@ -388,8 +387,8 @@
 			'rating'			: 8
 		},
 		'0069815' : { 
-			'title' 			: 'Ein Gl??ckliches Jahr',
-			'o_title' 			: 'Bonne ann??e, La',
+			'title'				: 'Ein gl??ckliches Jahr',
+			'o_title'			: 'La bonne ann??e',
 			'director'			: 'Claude Lelouch',
 			'plot' 				: True,
 			'cast'				: 'Lino Ventura' + _(' as ') + 'Simon\n\
@@ -412,10 +411,9 @@
 Joseph Rythmann\n\
 Georges Staquet\n\
 Jacques Villedieu\n\
-Harry Walter\n\
-??brige Besetzung in alphabetischer Reihenfolge:\n\
+Harry Walter ??brige Besetzung in alphabetischer Reihenfolge:\n\
 Anouk Aim??e' + _(' as ') + 'Une femme (Archivmaterial) (nicht im Abspann)\n\
-Elie Chouraqui' + _(' as ') + '(nicht im Abspann)\n\
+Elie Chouraqui' + _(' as ') + ' (nicht im Abspann)\n\
 R??my Julienne' + _(' as ') + 'Chauffeur de taxi (nicht im Abspann)\n\
 Jean-Louis Trintignant' + _(' as ') + 'Un homme (Archivmaterial) (nicht im Abspann)',
 			'country'			: 'Frankreich | Italien',

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieIMDB.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -238,3 +238,101 @@
 					tmp  = gutils.clean(match[0][1])
 					self.ids.append(match[0][0])
 					self.titles.append(tmp)
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky Balboa'         : [ 16, 16 ],
+		'Ein gl??ckliches Jahr' : [ 21, 21 ]
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'0138097' : { 
+			'title'             : 'Shakespeare in Love',
+			'o_title'           : 'Shakespeare in Love',
+			'director'          : 'John Madden',
+			'plot'              : True,
+			'cast'              : 'Geoffrey Rush' + _(' as ') + 'Philip Henslowe\n\
+Tom Wilkinson' + _(' as ') + 'Hugh Fennyman\n\
+Steven O\'Donnell' + _(' as ') + 'Lambert\n\
+Tim McMullan' + _(' as ') + 'Frees\n\
+Joseph Fiennes' + _(' as ') + 'Will Shakespeare\n\
+Steven Beard' + _(' as ') + 'Makepeace - the Preacher\n\
+Antony Sher' + _(' as ') + 'Dr. Moth\n\
+Patrick Barlow' + _(' as ') + 'Will Kempe\n\
+Martin Clunes' + _(' as ') + 'Richard Burbage\n\
+Sandra Reinton' + _(' as ') + 'Rosaline\n\
+Simon Callow' + _(' as ') + 'Tilney - Master of the Revels\n\
+Judi Dench' + _(' as ') + 'Queen Elizabeth\n\
+Bridget McConnell' + _(' as ') + 'Lady in Waiting\n\
+Georgie Glen' + _(' as ') + 'Lady in Waiting\n\
+Nicholas Boulton' + _(' as ') + 'Henry Condell\n\
+Gwyneth Paltrow' + _(' as ') + 'Viola De Lesseps\n\
+Imelda Staunton' + _(' as ') + 'Nurse\n\
+Colin Firth' + _(' as ') + 'Lord Wessex\n\
+Desmond McNamara' + _(' as ') + 'Crier\n\
+Barnaby Kay' + _(' as ') + 'Nol\n\
+Jim Carter' + _(' as ') + 'Ralph Bashford\n\
+Paul Bigley' + _(' as ') + 'Peter - the Stage Manager\n\
+Jason Round' + _(' as ') + 'Actor in Tavern\n\
+Rupert Farley' + _(' as ') + 'Barman\n\
+Adam Barker' + _(' as ') + 'First Auditionee\n\
+Joe Roberts' + _(' as ') + 'John Webster\n\
+Harry Gostelow' + _(' as ') + 'Second Auditionee\n\
+Alan Cody' + _(' as ') + 'Third Auditionee\n\
+Mark Williams' + _(' as ') + 'Wabash\n\
+David Curtiz' + _(' as ') + 'John Hemmings\n\
+Gregor Truter' + _(' as ') + 'James Hemmings\n\
+Simon Day' + _(' as ') + 'First Boatman\n\
+Jill Baker' + _(' as ') + 'Lady De Lesseps\n\
+Amber Glossop' + _(' as ') + 'Scullery Maid\n\
+Robin Davies' + _(' as ') + 'Master Plum\n\
+Hywel Simons' + _(' as ') + 'Servant\n\
+Nicholas Le Prevost' + _(' as ') + 'Sir Robert De Lesseps\n\
+Ben Affleck' + _(' as ') + 'Ned Alleyn\n\
+Timothy Kightley' + _(' as ') + 'Edward Pope\n\
+Mark Saban' + _(' as ') + 'Augustine Philips\n\
+Bob Barrett' + _(' as ') + 'George Bryan\n\
+Roger Morlidge' + _(' as ') + 'James Armitage\n\
+Daniel Brocklebank' + _(' as ') + 'Sam Gosse\n\
+Roger Frost' + _(' as ') + 'Second Boatman\n\
+Rebecca Charles' + _(' as ') + 'Chambermaid\n\
+Richard Gold' + _(' as ') + 'Lord in Waiting\n\
+Rachel Clarke' + _(' as ') + 'First Whore\n\
+Lucy Speed' + _(' as ') + 'Second Whore\n\
+Patricia Potter' + _(' as ') + 'Third Whore\n\
+John Ramm' + _(' as ') + 'Makepeace\'s Neighbor\n\
+Martin Neely' + _(' as ') + 'Paris / Lady Montague (as Martin Neeley)\n\
+The Choir of St. George\'s School in Windsor' + _(' as ') + 'Choir (as The Choir of St. George\'s School, Windsor) rest of cast listed alphabetically:\n\
+Jason Canning' + _(' as ') + 'Nobleman (uncredited)\n\
+Rupert Everett' + _(' as ') + 'Christopher Marlowe (uncredited)',
+			'country'           : 'USA | UK',
+			'genre'             : 'Comedy | Drama | Romance',
+			'classification'    : 'R',
+			'studio'            : 'Universal Pictures',
+			'o_site'            : False,
+			'site'              : 'http://www.imdb.com/title/tt0138097',
+			'trailer'           : 'http://www.imdb.com/title/tt0138097/trailers',
+			'year'              : 1998,
+			'notes'             : _('Language') + ': English\n'\
++ _('Audio') + ': Dolby Digital\n'\
++ _('Color') + ': Color\n\
+Tagline: ...A Comedy About the Greatest Love Story Almost Never Told...',
+			'runtime'           : 123,
+			'image'             : True,
+			'rating'            : 7
+		},
+	}

Modified: branches/0.9.x/lib/test_movieplugins.py
===================================================================
--- branches/0.9.x/lib/test_movieplugins.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ branches/0.9.x/lib/test_movieplugins.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -63,10 +63,14 @@
 #
 class PluginTester:
 	test_plugins = [
+		'PluginMovieAllMovie',
 		'PluginMovieAmazon',
 		'PluginMovieCinematografo',
+		'PluginMovieCineteka',
+		'PluginMovieDVDEmpire',
 		'PluginMovieFilmDb',
 		'PluginMovieFilmeVonAZ',
+		'PluginMovieIMDB',
 		'PluginMovieIMDB-de',
 		'PluginMovieKinoDe',
 		'PluginMovieOFDb',

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-04-11 20:09:31 UTC (rev 1186)
+++ trunk/ChangeLog	2009-04-15 20:37:42 UTC (rev 1187)
@@ -5,6 +5,13 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-15  Michael Jahn
+	* added data for automated tests of the IMDB plugin
+	* added data for automated tests of the CineMovies plugin
+	* updated CineMovies plugin
+	* updated Cineteka plugin
+	* updated FilmDb plugin
+	
 2009-04-08  Michael Jahn
 	* added AllMovie plugin
 

Modified: trunk/lib/plugins/movie/PluginMovieCineMovies.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCineMovies.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ trunk/lib/plugins/movie/PluginMovieCineMovies.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -76,7 +76,7 @@
         self.cast = self.cast.replace('</tr>', '\n')
         self.cast = gutils.clean(self.cast)
         self.cast = re.sub('\n[ \t]+', '\n', self.cast)
-        self.cast = re.sub('[.]+', _(' as '), self.cast)
+        self.cast = re.sub('[.][.]+', _(' as '), self.cast)
         self.cast = re.sub(_(' as ') + '(\n|$)', '\n', self.cast)
 
     def get_classification(self):
@@ -98,9 +98,12 @@
         self.country = gutils.trim(self.page, 'Pays :', '</tr>')
 
     def get_rating(self):
-        self.rating = gutils.clean(gutils.trim(self.page, '<DIV id=scoree>', '</DIV>'))
+        self.rating = gutils.clean(gutils.trim(self.page, '<div id=scoree>', '</div>'))
 
+    def get_screenplay(self):
+        self.screenplay = gutils.clean(gutils.trim(self.page_cast, 'nario de</b> :', '</a>'))
 
+
 class SearchPlugin(movie.SearchMovie):
     def __init__(self):
         self.encode                = 'iso-8859-1'
@@ -128,3 +131,62 @@
                 self.titles.append(title + ' (' + year + ')')
         else:
             self.number_results = 0
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [ 2, 2 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '6065' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky VI',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone' + _(' as ') + 'Rocky Balboa\n\
+Burt Young' + _(' as ') + 'Paulie\n\
+Antonio Tarver' + _(' as ') + 'Mason "The Line"Dixon\n\
+Geraldine Hughes' + _(' as ') + 'Marie\n\
+Milo Ventimiglia' + _(' as ') + 'Rocky Jr.\n\
+Tony Burton' + _(' as ') + 'Duke\n\
+A.J. Benza' + _(' as ') + 'L.C.\n\
+James Francis Kelly III' + _(' as ') + 'Steps\n\
+Talia Shire' + _(' as ') + 'Adrian\n\
+Lou DiBella' + _(' as ') + 'Lui-m??me\n\
+Mike Tyson' + _(' as ') + 'Lui-m??me\n\
+Henry G. Sanders' + _(' as ') + 'Martin\n\
+Pedro Lovell' + _(' as ') + 'Spider Rico\n\
+Angela Boyd' + _(' as ') + 'Angie\n\
+Lahmard J. Tate' + _(' as ') + 'X-Cell',
+            'country'             : 'USA',
+            'genre'               : 'Drame',
+            'classification'      : False,
+            'studio'              : 'Twentieth Century Fox France',
+            'o_site'              : 'http://www.sonypictures.com/movies/rocky/',
+            'site'                : 'http://www.cinemovies.fr/fiche_film.php?IDfilm=6065',
+            'trailer'             : False,
+            'year'                : 2007,
+            'notes'               : False,
+            'runtime'             : 105,
+            'image'               : True,
+            'rating'              : 6,
+            'cameraman'           : False,
+            'screenplay'          : 'Sylvester Stallone',
+            'barcode'             : False
+        },
+    }

Modified: trunk/lib/plugins/movie/PluginMovieCineteka.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCineteka.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ trunk/lib/plugins/movie/PluginMovieCineteka.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -1,8 +1,8 @@
 # -*- coding: UTF-8 -*-
 
-__revision__ = '$Id: PluginMovie7arte.py 478 2006-12-05 21:14:51Z piotrek $'
+__revision__ = '$Id$'
 
-# Copyright (c) 2005-2007 Vasco Nunes, Piotr Ozarowski
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr Ozarowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -23,22 +23,22 @@
 
 import gutils
 import movie
-import string
+import string, re
 
-plugin_name = "Cineteka"
-plugin_description = "O seu Clube de Video Online"
-plugin_url = "cineteka.com"
-plugin_language = _("Portuguese")
-plugin_author = "Vasco Nunes"
+plugin_name         = "Cineteka"
+plugin_description  = "O seu Clube de Video Online"
+plugin_url          = "cineteka.com"
+plugin_language     = _("Portuguese")
+plugin_author       = "Vasco Nunes"
 plugin_author_email = "<vasco.m.nunes at gmail.com>"
-plugin_version = "0.3"
+plugin_version      = "0.4"
 
 class Plugin(movie.Movie):
     """A movie plugin object"""
     def __init__(self, id):
-        self.encode='iso-8859-1'
+        self.encode   = 'iso-8859-1'
         self.movie_id = id
-        self.url = "http://www.cineteka.com/index.php?op=Movie&id=" + str(self.movie_id)
+        self.url      = "http://www.cineteka.com/index.php?op=Movie&id=" + str(self.movie_id)
 
     def get_image(self):
         """Finds the film's poster image"""
@@ -46,62 +46,66 @@
 
     def get_o_title(self):
         """Finds the film's original title"""
-        self.o_title = string.capwords(gutils.trim(self.page, """<nobr><span class="txt11">(""", ")"))
+        self.o_title = gutils.trim(self.page, u'<nobr><span class="txt11">(', u')')
 
     def get_title(self):
         """Finds the film's local title.
         Probably the original title translation"""
-        self.title = string.capwords(gutils.trim(self.page, """<td class="txt12"><b>""", "</b>"))
+        self.title = gutils.trim(self.page, u'<td class="movieT"><b>', u'</b>')
 
     def get_director(self):
         """Finds the film's director"""
-        self.director = gutils.strip_tags(gutils.trim(self.page, "<div><b>Realiza??o:</b><br>", "</div>"))
-        self.director = string.replace(self.director,"<br>", ", ")
+        self.director = gutils.strip_tags(gutils.trim(self.page, u'<div><b>Realiza????o:</b><br>', u'</div>'))
+        self.director = string.replace(self.director, u'<br>', u', ')
         self.director = gutils.strip_tags(self.director)
 
     def get_plot(self):
         """Finds the film's plot"""
-        self.plot = gutils.trim(self.page, """<div class="txt-normal" style="margin-top: 10px;">""", "</td></tr></table>")
+        self.plot = gutils.trim(self.page, u'<div class="txt-normal" style="margin-top: 10px;">', u'</td></tr></table>')
+        self.plot = self.plot.replace(u'\x93', u'"')
+        self.plot = self.plot.replace(u'\x94', u'"')
+        self.plot = self.plot.replace(u'\x96', u'-')
 
     def get_year(self):
         """Finds the film's year"""
-        self.year = gutils.trim(self.page, "<b>Ano:</b> ", "</div>")
+        self.year = gutils.trim(self.page, u'<b>Ano:</b> ', u'</div>')
 
     def get_runtime(self):
         """Finds the film's running time"""
-        self.runtime = gutils.trim(self.page, "<td><b>Dura??o:</b> ", " min.</td>")
+        self.runtime = gutils.trim(self.page, u'<td><b>Dura????o:</b> ', u' min.</td>')
 
     def get_genre(self):
         """Finds the film's genre"""
-        self.genre = gutils.strip_tags(gutils.trim(self.page, "<b>G?nero:</b><br>", "</div>"))
-        self.genre = string.replace(self.genre,"<br>", ", ")
+        self.genre = gutils.trim(self.page, u'<b>G??nero:</b><br>', u'</div>')
+        self.genre = string.replace(self.genre, u'<br>', u', ')
         self.genre = gutils.strip_tags(self.genre)
 
     def get_cast(self):
-        self.cast = gutils.strip_tags(gutils.trim(self.page, "<b>Elenco:</b> ", "</td>"))
-        self.cast = string.replace(self.cast, ", ", "")
-        self.cast = string.replace(self.cast, "\t", "")
-        self.cast = string.replace(self.cast, "\n ", "\n")
+        self.cast = gutils.trim(self.page, u'<b>Elenco:</b>', u'</td>')
+        self.cast = string.replace(self.cast, u'<br>', u'\n')
+        self.cast = string.replace(self.cast, u', ', u'')
+        self.cast = string.replace(self.cast, u'\t', u'')
+        self.cast = string.replace(self.cast, u'\n ', u'\n')
+        self.cast = gutils.clean(self.cast)
+        self.cast = re.sub('[ \t]*[\n]+[ \t]*' , '\n', self.cast)
 
     def get_classification(self):
         """Find the film's classification"""
-        self.classification = gutils.trim(self.page, "<b>Idade:</b> ", "</div>")
+        self.classification = gutils.trim(self.page, u'<b>Idade:</b> ', u'</div>')
 
     def get_studio(self):
         """Find the studio"""
-        self.studio = ""
+        self.studio = ''
 
     def get_o_site(self):
         """Find the film's oficial site"""
         self.o_site = gutils.trim(self.page, \
-            "<a class=\"button\" href=\"", \
-            " title=\"Consultar t?tulo no Internet Movie Data Base\"")
+            u'<a class="button" href="', \
+            u'" title="Consultar t??tulo no Internet Movie Data Base"')
 
     def get_site(self):
         """Find the film's imdb details page"""
-        self.site = gutils.trim(self.page, \
-            "</td><td><a class=\"button\" href=\"", \
-            """" title="Consultar t??tulo""")
+        self.site = self.url
 
     def get_trailer(self):
         """Find the film's trailer page or location"""
@@ -109,44 +113,100 @@
 
     def get_country(self):
         """Find the film's country"""
-        self.country = gutils.trim(self.page, "<b>Pa?s:</b><br>", "</div>")
-        self.country = string.replace(self.country,"<br>", ", ")
+        self.country = gutils.trim(self.page, u'<b>Pa??s:</b><br>', u'</div>')
+        self.country = string.replace(self.country, u'<br>', u', ')
         self.country = gutils.strip_tags(self.country)
 
     def get_rating(self):
         """Find the film's rating. From 0 to 10.
         Convert if needed when assigning."""
-        self.rating = 0
+        self.rating = gutils.clean(gutils.trim(self.page, u'IMDB: ', u'</span>'))
+        try:
+            self.rating = round(float(self.rating), 0)
+        except Exception, e:
+            self.rating = 0
 
+    def get_screenplay(self):
+        self.screenplay = gutils.strip_tags(gutils.trim(self.page, u'<b>Argumento:</b><br>', u'</div>'))
+        self.screenplay = string.replace(self.screenplay, u'<br>', u', ')
+        self.screenplay = gutils.strip_tags(self.screenplay)
+
 class SearchPlugin(movie.SearchMovie):
     """A movie search object"""
     def __init__(self):
-        self.original_url_search = "http://www.cineteka.com/index.php?op=MovieSearch&s="
+        self.original_url_search   = "http://www.cineteka.com/index.php?op=MovieSearch&s="
         self.translated_url_search = self.original_url_search
-        self.encode='iso-8859-1'
+        self.encode                = 'iso-8859-1'
 
     def search(self, parent_window):
         """Perform the web search"""
         if not self.open_search(parent_window):
             return None
-        self.sub_search()
+        self.page = gutils.trim(self.page, 'tulo(s): ', '<div class="menuright">')
         return self.page
 
-    def sub_search(self):
-        """Isolating just a portion (with the data we want) of the results"""
-        self.page = gutils.trim(self.page, \
-            """o:</div>""", """<div style="margin-top: 10px; text-align: center;"></div>""")
-
     def get_searches(self):
         """Try to find both id and film title for each search result"""
-        elements = string.split(self.page, "</a>]</td>")
-        self.number_results = elements[-1]
+        elements = re.split('index[.]php[?]op=Movie&id=([0-9]+)">', self.page)
+        
+        for index in range(2, len(elements), 2):
+            id = elements[index - 1]
+            title = gutils.before(elements[index], '<')
+            self.ids.append(id)
+            self.titles.append(gutils.strip_tags(gutils.convert_entities(title)))
 
-        if (elements[0]<>''):
-            for element in elements:
-                self.ids.append(gutils.trim(element, "?op=Movie&id=", "\""))
-                self.titles.append(gutils.strip_tags(gutils.convert_entities \
-                    (gutils.trim(element, """<td class="txt12"><b>""", "</span></nobr></td>"))))
-        else:
-            self.number_results = 0
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [ 1, 1 ],
+    }
 
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '002551' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Antonio Tarver\n\
+Geraldine Hughes\n\
+Milo Ventimiglia\n\
+Tony Burton\n\
+A.J. Benza\n\
+James Francis Kelly III\n\
+Talia Shire\n\
+Lou DiBella\n\
+Mike Tyson\n\
+Henry G. Sanders',
+            'country'             : 'EUA',
+            'genre'               : 'Ac????o, Desporto, Drama',
+            'classification'      : 'M/12',
+            'studio'              : False,
+            'o_site'              : 'http://www.imdb.com/title/tt0479143/',
+            'site'                : 'http://www.cineteka.com/index.php?op=Movie&id=002551',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 102,
+            'image'               : True,
+            'rating'              : 8,
+            'cameraman'           : False,
+            'screenplay'          : 'Sylvester Stallone',
+            'barcode'             : False
+        },
+    }

Modified: trunk/lib/plugins/movie/PluginMovieFilmDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ trunk/lib/plugins/movie/PluginMovieFilmDb.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -31,7 +31,7 @@
 plugin_language     = _('German')
 plugin_author       = 'Michael Jahn'
 plugin_author_email = '<mikej06 at hotmail.com>'
-plugin_version      = '1.0'
+plugin_version      = '1.1'
 
 class Plugin(movie.Movie):
     def __init__(self, id):
@@ -40,10 +40,10 @@
         self.url      = "http://www.filmdb.de/filmanzeige.php?alle=1&filmid=" + self.movie_id
 
     def get_image(self):
-        tmp = gutils.trim(self.page, 'plakat.php?', '\'')
+        tmp = gutils.regextrim(self.page, 'plakat.php?', '["\']')
         if tmp:
             page_image = self.open_page(url='http://www.filmdb.de/plakat.php?' + tmp)
-            tmp = gutils.trim(self.page, 'http://bilder.filmdb.de', '"')
+            tmp = gutils.regextrim(self.page, 'bilder.filmdb.de', '["\']')
             if tmp:
                 self.image_url = 'http://bilder.filmdb.de' + tmp
 
@@ -195,8 +195,8 @@
             'cast'                : 'Dolph Lundgren\n\
 Sylvester Stallone\n\
 Carl Weathers\n\
+Mike Tyson\n\
 Burt Young\n\
-Mike Tyson\n\
 Talia Shire\n\
 Burgess Meredith\n\
 Tony Burton\n\
@@ -210,45 +210,45 @@
 Robert Michael Kelly\n\
 LeRoy Neiman\n\
 Stu Nahan\n\
+Tobias Segal\n\
 Skip Bayless\n\
 Gunnar Peterson\n\
-Tobias Segal\n\
 Marc Ratner\n\
 Henry G. Sanders\n\
+Rick Buchborn\n\
+Ricky Cavazos\n\
+Charles Johnson\n\
 Angela Boyd\n\
 Ana Gerena\n\
-Ricky Cavazos\n\
-Rick Buchborn\n\
 Fran Pultro\n\
+Tim Carr\n\
 Joe Cortez\n\
-Charles Johnson\n\
 Jody Giambelluca\n\
+Carter Mitchell\n\
+A.J. Benza\n\
 Yahya\n\
-Tim Carr\n\
+Maureen Schilling\n\
+James Binns\n\
 Jack Lazzarado\n\
-Carter Mitchell\n\
 Barney Fitzpatrick\n\
-Maureen Schilling\n\
-James Binns\n\
 Antonio Tarver\n\
-A.J. Benza\n\
+Nick Baker\n\
+Jim Lampley\n\
 Matt Frack\n\
 Louis Giansante\n\
 Kevin King Templeton\n\
+Paul Dion Monte\n\
+Dana Jacobson\n\
+Brian Kenny\n\
 Woody Paige\n\
 Pedro Lovell\n\
-Nick Baker\n\
-Brian Kenny\n\
-Paul Dion Monte\n\
-Jim Lampley\n\
-Dana Jacobson\n\
+Larry Merchant\n\
 Bert Randolph Sugar\n\
 Bernard Fern??ndez\n\
-Larry Merchant\n\
+Vinod Kumar\n\
 Anthony Lato Jr.\n\
 Max Kellerman\n\
 Lou DiBella\n\
-Vinod Kumar\n\
 Johnnie Hobbs Jr.\n\
 Jay Crawford\n\
 Gary Compton\n\

Modified: trunk/lib/plugins/movie/PluginMovieIMDB-de.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ trunk/lib/plugins/movie/PluginMovieIMDB-de.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -338,8 +338,7 @@
 Nick Baker' + _(' as ') + 'Irish Pub Bartender\n\
 Don Sherman' + _(' as ') + 'Andy\n\
 Stu Nahan' + _(' as ') + 'Computer Fight Commentator (Sprechrolle)\n\
-Gary Compton' + _(' as ') + 'Sicherheitsbediensteter\n\
-??brige Besetzung in alphabetischer Reihenfolge:\n\
+Gary Compton' + _(' as ') + 'Sicherheitsbediensteter ??brige Besetzung in alphabetischer Reihenfolge:\n\
 Michael Ahl' + _(' as ') + 'Restaurant patron (nicht im Abspann)\n\
 Andrew Aninsman' + _(' as ') + 'Promoter (nicht im Abspann)\n\
 Ricky Cavazos' + _(' as ') + 'Boxing Spectator (nicht im Abspann)\n\
@@ -372,8 +371,8 @@
             'rating'            : 8
         },
         '0069815' : { 
-            'title'             : 'Ein Gl??ckliches Jahr',
-            'o_title'           : 'Bonne ann??e, La',
+            'title'             : 'Ein gl??ckliches Jahr',
+            'o_title'           : 'La bonne ann??e',
             'director'          : 'Claude Lelouch',
             'plot'              : True,
             'cast'              : 'Lino Ventura' + _(' as ') + 'Simon\n\
@@ -396,10 +395,9 @@
 Joseph Rythmann\n\
 Georges Staquet\n\
 Jacques Villedieu\n\
-Harry Walter\n\
-??brige Besetzung in alphabetischer Reihenfolge:\n\
+Harry Walter ??brige Besetzung in alphabetischer Reihenfolge:\n\
 Anouk Aim??e' + _(' as ') + 'Une femme (Archivmaterial) (nicht im Abspann)\n\
-Elie Chouraqui' + _(' as ') + '(nicht im Abspann)\n\
+Elie Chouraqui' + _(' as ') + ' (nicht im Abspann)\n\
 R??my Julienne' + _(' as ') + 'Chauffeur de taxi (nicht im Abspann)\n\
 Jean-Louis Trintignant' + _(' as ') + 'Un homme (Archivmaterial) (nicht im Abspann)',
             'country'            : 'Frankreich | Italien',

Modified: trunk/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ trunk/lib/plugins/movie/PluginMovieIMDB.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -171,6 +171,8 @@
         result = pattern.search(self.page)
         if result:
             self.screenplay = result.groups()[0]
+            self.screenplay = self.screenplay.replace(' (written by)', '')
+            self.screenplay = self.screenplay.replace(' and<', '<')
             self.screenplay = self.screenplay.replace('<br/>', ', ')
 
     def get_cameraman(self):
@@ -237,3 +239,104 @@
                     tmp = gutils.clean(match[0][1])
                     self.ids.append(match[0][0])
                     self.titles.append(tmp)
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa'         : [ 16, 16 ],
+        'Ein gl??ckliches Jahr' : [ 21, 21 ]
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '0138097' : { 
+            'title'             : 'Shakespeare in Love',
+            'o_title'           : 'Shakespeare in Love',
+            'director'          : 'John Madden',
+            'plot'              : True,
+            'cast'              : 'Geoffrey Rush' + _(' as ') + 'Philip Henslowe\n\
+Tom Wilkinson' + _(' as ') + 'Hugh Fennyman\n\
+Steven O\'Donnell' + _(' as ') + 'Lambert\n\
+Tim McMullan' + _(' as ') + 'Frees\n\
+Joseph Fiennes' + _(' as ') + 'Will Shakespeare\n\
+Steven Beard' + _(' as ') + 'Makepeace - the Preacher\n\
+Antony Sher' + _(' as ') + 'Dr. Moth\n\
+Patrick Barlow' + _(' as ') + 'Will Kempe\n\
+Martin Clunes' + _(' as ') + 'Richard Burbage\n\
+Sandra Reinton' + _(' as ') + 'Rosaline\n\
+Simon Callow' + _(' as ') + 'Tilney - Master of the Revels\n\
+Judi Dench' + _(' as ') + 'Queen Elizabeth\n\
+Bridget McConnell' + _(' as ') + 'Lady in Waiting\n\
+Georgie Glen' + _(' as ') + 'Lady in Waiting\n\
+Nicholas Boulton' + _(' as ') + 'Henry Condell\n\
+Gwyneth Paltrow' + _(' as ') + 'Viola De Lesseps\n\
+Imelda Staunton' + _(' as ') + 'Nurse\n\
+Colin Firth' + _(' as ') + 'Lord Wessex\n\
+Desmond McNamara' + _(' as ') + 'Crier\n\
+Barnaby Kay' + _(' as ') + 'Nol\n\
+Jim Carter' + _(' as ') + 'Ralph Bashford\n\
+Paul Bigley' + _(' as ') + 'Peter - the Stage Manager\n\
+Jason Round' + _(' as ') + 'Actor in Tavern\n\
+Rupert Farley' + _(' as ') + 'Barman\n\
+Adam Barker' + _(' as ') + 'First Auditionee\n\
+Joe Roberts' + _(' as ') + 'John Webster\n\
+Harry Gostelow' + _(' as ') + 'Second Auditionee\n\
+Alan Cody' + _(' as ') + 'Third Auditionee\n\
+Mark Williams' + _(' as ') + 'Wabash\n\
+David Curtiz' + _(' as ') + 'John Hemmings\n\
+Gregor Truter' + _(' as ') + 'James Hemmings\n\
+Simon Day' + _(' as ') + 'First Boatman\n\
+Jill Baker' + _(' as ') + 'Lady De Lesseps\n\
+Amber Glossop' + _(' as ') + 'Scullery Maid\n\
+Robin Davies' + _(' as ') + 'Master Plum\n\
+Hywel Simons' + _(' as ') + 'Servant\n\
+Nicholas Le Prevost' + _(' as ') + 'Sir Robert De Lesseps\n\
+Ben Affleck' + _(' as ') + 'Ned Alleyn\n\
+Timothy Kightley' + _(' as ') + 'Edward Pope\n\
+Mark Saban' + _(' as ') + 'Augustine Philips\n\
+Bob Barrett' + _(' as ') + 'George Bryan\n\
+Roger Morlidge' + _(' as ') + 'James Armitage\n\
+Daniel Brocklebank' + _(' as ') + 'Sam Gosse\n\
+Roger Frost' + _(' as ') + 'Second Boatman\n\
+Rebecca Charles' + _(' as ') + 'Chambermaid\n\
+Richard Gold' + _(' as ') + 'Lord in Waiting\n\
+Rachel Clarke' + _(' as ') + 'First Whore\n\
+Lucy Speed' + _(' as ') + 'Second Whore\n\
+Patricia Potter' + _(' as ') + 'Third Whore\n\
+John Ramm' + _(' as ') + 'Makepeace\'s Neighbor\n\
+Martin Neely' + _(' as ') + 'Paris / Lady Montague (as Martin Neeley)\n\
+The Choir of St. George\'s School in Windsor' + _(' as ') + 'Choir (as The Choir of St. George\'s School, Windsor) rest of cast listed alphabetically:\n\
+Jason Canning' + _(' as ') + 'Nobleman (uncredited)\n\
+Rupert Everett' + _(' as ') + 'Christopher Marlowe (uncredited)',
+            'country'           : 'USA | UK',
+            'genre'             : 'Comedy | Drama | Romance',
+            'classification'    : 'R',
+            'studio'            : 'Universal Pictures',
+            'o_site'            : False,
+            'site'              : 'http://www.imdb.com/title/tt0138097',
+            'trailer'           : 'http://www.imdb.com/title/tt0138097/trailers',
+            'year'              : 1998,
+            'notes'             : _('Language') + ': English\n'\
++ _('Audio') + ': Dolby Digital\n'\
++ _('Color') + ': Color\n\
+Tagline: ...A Comedy About the Greatest Love Story Almost Never Told...',
+            'runtime'           : 123,
+            'image'             : True,
+            'rating'            : 7,
+            'screenplay'        : 'Marc Norman, Tom Stoppard',
+            'cameraman'         : False,
+            'barcode'           : False
+        },
+    }

Modified: trunk/lib/test_movieplugins.py
===================================================================
--- trunk/lib/test_movieplugins.py	2009-04-11 20:09:31 UTC (rev 1186)
+++ trunk/lib/test_movieplugins.py	2009-04-15 20:37:42 UTC (rev 1187)
@@ -67,10 +67,15 @@
 #
 class PluginTester:
     test_plugins = [
+        'PluginMovieAllMovie',
         'PluginMovieAmazon',
         'PluginMovieCinematografo',
+        'PluginMovieCineMovies',
+        'PluginMovieCineteka',
+        'PluginMovieDVDEmpire',
         'PluginMovieFilmDb',
         'PluginMovieFilmeVonAZ',
+        'PluginMovieIMDB',
         'PluginMovieIMDB-de',
         'PluginMovieKinoDe',
         'PluginMovieOFDb',
@@ -101,22 +106,23 @@
                 logFile.write('\n')
             logFile.write('\n\n')
             result = False
-        # plugin.original_url_search
-        plugin.url = plugin.original_url_search
-        if plugin.remove_accents:
-            plugin.title = gutils.remove_accents(title, 'utf-8')
-        else:
-            plugin.title = title
-        plugin.search_movies(None)
-        plugin.get_searches()
-        if not len(plugin.ids) - 1 == cntTranslated:    # first entry is always '' (???)
-            print "Title (Original): %s - expected: %d - found: %d" % (title, cntTranslated, len(plugin.ids) - 1)
-            logFile.write("Title (Original): %s - expected: %d - found: %d\n\n" % (title, cntTranslated, len(plugin.ids) - 1))
-            for titleFound in plugin.titles:
-                logFile.write(titleFound)
-                logFile.write('\n')
-            logFile.write('\n\n')
-            result = False
+        # plugin.original_url_search if it is different to plugin.translated_url_search
+        if plugin.original_url_search <> plugin.translated_url_search:
+            plugin.url = plugin.original_url_search
+            if plugin.remove_accents:
+                plugin.title = gutils.remove_accents(title, 'utf-8')
+            else:
+                plugin.title = title
+            plugin.search_movies(None)
+            plugin.get_searches()
+            if not len(plugin.ids) - 1 == cntTranslated:    # first entry is always '' (???)
+                print "Title (Original): %s - expected: %d - found: %d" % (title, cntTranslated, len(plugin.ids) - 1)
+                logFile.write("Title (Original): %s - expected: %d - found: %d\n\n" % (title, cntTranslated, len(plugin.ids) - 1))
+                for titleFound in plugin.titles:
+                    logFile.write(titleFound)
+                    logFile.write('\n')
+                logFile.write('\n\n')
+                result = False
         return result
 
     #



From mikej06 at mail.berlios.de  Thu Apr 16 22:23:55 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 16 Apr 2009 22:23:55 +0200
Subject: [Griffith-svn] r1188 - branches/0.9.x branches/0.9.x/lib
	branches/0.9.x/lib/plugins/movie trunk trunk/lib
	trunk/lib/plugins/movie
Message-ID: <200904162023.n3GKNtdN003485@sheep.berlios.de>

Author: mikej06
Date: 2009-04-16 22:23:17 +0200 (Thu, 16 Apr 2009)
New Revision: 1188

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieCulturalia.py
   branches/0.9.x/lib/plugins/movie/PluginMovieE-Pipoca.py
   branches/0.9.x/lib/test_movieplugins.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieCulturalia.py
   trunk/lib/plugins/movie/PluginMovieE-Pipoca.py
   trunk/lib/test_movieplugins.py
Log:
* updated Culturalia plugin
* updated E-Pipoca plugin

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-04-15 20:37:42 UTC (rev 1187)
+++ branches/0.9.x/ChangeLog	2009-04-16 20:23:17 UTC (rev 1188)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-16  Michael Jahn
+	* updated Culturalia plugin
+	* updated E-Pipoca plugin
+
 2009-04-15  Michael Jahn
 	* added data for automated tests of the IMDB plugin
 	* added data for automated tests of the CineMovies plugin

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieCulturalia.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieCulturalia.py	2009-04-15 20:37:42 UTC (rev 1187)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieCulturalia.py	2009-04-16 20:23:17 UTC (rev 1188)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id: PluginMovieCulturalia.py 389 2006-07-29 18:43:35Z piotrek $'
 
-# Copyright (c) 2006 Pedro D. S?nchez
+# Copyright (c) 2006-2009 Pedro D. S?nchez
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -25,19 +25,19 @@
 import movie
 import string
 
-plugin_name		= 'Culturalia'
-plugin_description	= 'Base de Datos de Peliculas'
-plugin_url		= 'www.culturalianet.com'
-plugin_language		= _('Spanish')
-plugin_author		= 'Pedro D. S?nchez'
-plugin_author_email	= '<pedrodav at gmail.com>'
-plugin_version		= '0.2'
+plugin_name         = 'Culturalia'
+plugin_description  = 'Base de Datos de Peliculas'
+plugin_url          = 'www.culturalianet.com'
+plugin_language     = _('Spanish')
+plugin_author       = 'Pedro D. S?nchez'
+plugin_author_email = '<pedrodav at gmail.com>'
+plugin_version      = '0.3'
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode='iso-8859-15'
+		self.encode   = 'iso-8859-1'
 		self.movie_id = id
-		self.url = "http://www.culturalianet.com/art/ver.php?art=%s" % str(self.movie_id)
+		self.url      = "http://www.culturalianet.com/art/ver.php?art=%s" % str(self.movie_id)
 
 	def get_image(self):
 		tmp = string.find(self.page, "<font class = 'titulo2'>")
@@ -107,9 +107,9 @@
 class SearchPlugin(movie.SearchMovie):
 
 	def __init__(self):
-		self.original_url_search	= 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
-		self.translated_url_search	= 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
-		self.encode = 'iso-8859-15'
+		self.original_url_search   = 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
+		self.translated_url_search = 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
+		self.encode                = 'iso-8859-1'
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
@@ -128,3 +128,60 @@
 			for element in elements:
 				self.ids.append(gutils.trim(element, 'ver.php?art=',"'"))
 				self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.trim(element, "target='_top'>", '</a>'))))
+
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky Balboa' : [ 11, 11 ],
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'27039' : { 
+			'title'               : 'Rocky Balboa',
+			'o_title'             : 'Rocky Balboa',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Milo Ventimiglia\n\
+Geraldine Hughes\n\
+James Francis Kelly III\n\
+Tony Burton\n\
+A.J. Benza\n\
+Talia Shire\n\
+Henry G. Sanders\n\
+Antonio Tarver\n\
+Pedro Lovell\n\
+Ana Gerena\n\
+Angela Boyd\n\
+Louis Giansante\n\
+Maureen Schilling',
+			'country'             : 'USA',
+			'genre'               : 'Drama / Deportes',
+			'classification'      : False,
+			'studio'              : False,
+			'o_site'              : False,
+			'site'                : 'http://www.culturalianet.com/art/ver.php?art=27039',
+			'trailer'             : False,
+			'year'                : 2006,
+			'notes'               : False,
+			'runtime'             : 99,
+			'image'               : True,
+			'rating'              : False
+		},
+	}

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieE-Pipoca.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieE-Pipoca.py	2009-04-15 20:37:42 UTC (rev 1187)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieE-Pipoca.py	2009-04-16 20:23:17 UTC (rev 1188)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2007 Vasco Nunes, Piotr O??arowski
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr O??arowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -24,23 +24,27 @@
 # Updated on 04/29/2007 by Djohnson "Joe" Lima
 # joe1310 at terra.com.br - S??o Paulo/Brasil
 
+
 import gutils, movie, string
 
-plugin_name = "E-Pipoca"
-plugin_description = "E-Pipoca Brasil"
-plugin_url = "epipoca.uol.com.br"
-plugin_language = _("Brazilian Portuguese")
-plugin_author = "Vasco Nunes"
-plugin_author_email="<vasco.m.nunes at gmail.com>"
-plugin_version = "0.5"
+plugin_name         = "E-Pipoca"
+plugin_description  = "E-Pipoca Brasil"
+plugin_url          = "epipoca.uol.com.br"
+plugin_language     = _("Brazilian Portuguese")
+plugin_author       = "Vasco Nunes"
+plugin_author_email = "<vasco.m.nunes at gmail.com>"
+plugin_version      = "0.6"
 
 class Plugin(movie.Movie):
 	"A movie plugin object"
 	def __init__(self, id):
-		self.encode='iso-8859-1'
+		self.encode   = 'iso-8859-1'
 		self.movie_id = id
-		self.url = "http://epipoca.uol.com.br/filmes_detalhes.php?idf=" + str(self.movie_id)
+		self.url      = "http://epipoca.uol.com.br/filmes_detalhes.php?idf=" + str(self.movie_id)
 
+	def initialize(self):
+		self.page_cast = self.open_page(url = 'http://epipoca.uol.com.br/filmes_ficha.php?idf=' + str(self.movie_id))
+
 	def get_image(self):
 		"Find the film's poster image"
 		tmp_pic = gutils.trim(self.page, "images/filmes/poster/poster_", "\"")
@@ -80,9 +84,11 @@
 	def get_cast(self):
 		"Find the actors. Try to make it line separated."
 		self.cast = ""
-		self.cast = gutils.trim(self.page, "<b>Elenco: </b>", "<b>mais...</b>")
-		self.cast = gutils.strip_tags(self.cast)
-		self.cast = self.cast[:-2]
+		tmp = gutils.trim(self.page_cast, '<b>Elenco / Cast</b>', '</table>')
+		elements = tmp.split('<tr>')
+		for index in range(1, len(elements), 1):
+			element = elements[index]
+			self.cast = self.cast + gutils.strip_tags(element.replace(' ... ', _(' as ').encode('utf8'))) + '\n'
 
 	def get_classification(self):
 		"Find the film's classification"
@@ -150,3 +156,105 @@
 				self.titles.append(gutils.strip_tags(gutils.trim(element, "<font class=\"titulo\">", "<b>Adicionar aos meus filmes favoritos</b>") ))
 		else:
 			self.number_results = 0
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky Balboa' : [ 7, 7 ],
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'11521' : { 
+			'title'               : 'Rocky Balboa',
+			'o_title'             : 'Rocky Balboa',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Sylvester Stallone' + _(' as ') + 'Rocky Balboa\n\
+Burt Young' + _(' as ') + 'Paulie\n\
+Antonio Tarver' + _(' as ') + 'Mason \'The Line\' Dixon\n\
+Geraldine Hughes' + _(' as ') + 'Marie\n\
+Milo Ventimiglia' + _(' as ') + 'Robert Jr.\n\
+Tony Burton' + _(' as ') + 'Duke\n\
+A.J. Benza' + _(' as ') + 'L.C.\n\
+James Francis Kelly III' + _(' as ') + 'Steps\n\
+Talia Shire' + _(' as ') + 'Adrian (imagens de arquivo)\n\
+Lou DiBella' + _(' as ') + 'Lou DiBella\n\
+Mike Tyson (1)' + _(' as ') + 'Mike Tyson\n\
+Henry G. Sanders' + _(' as ') + 'Martin\n\
+Pedro Lovell' + _(' as ') + 'Spider Rico\n\
+Ana Gerena' + _(' as ') + 'Isabel\n\
+Angela Boyd' + _(' as ') + 'Angie\n\
+Louis Giansante' + _(' as ') + 'Bandido do bar\n\
+Maureen Schilling' + _(' as ') + 'Bartender do Lucky\n\
+Lahmard Tate??' + _(' as ') + 'X-Cell\n\
+Woodrow W. Paige??' + _(' as ') + 'Comentarista da ESPN\n\
+Skip Bayless' + _(' as ') + 'Comentarista da ESPN\n\
+Jay Crawford' + _(' as ') + 'Comentarista da ESPN\n\
+Brian Kenny' + _(' as ') + 'Apresentador da ESPN\n\
+Dana Jacobson' + _(' as ') + 'Apresentador da ESPN\n\
+Chuck Johnson??' + _(' as ') + 'Apresentador da ESPN\n\
+James Binns' + _(' as ') + 'Comiss??rio\n\
+Johnnie Hobbs Jr.' + _(' as ') + 'Comiss??rio\n\
+Barney Fitzpatrick' + _(' as ') + 'Comiss??rio\n\
+Jim Lampley' + _(' as ') + 'Comentarista da HBO\n\
+Larry Merchant' + _(' as ') + 'Comentarista da HBO\n\
+Max Kellerman' + _(' as ') + 'Comentarista da HBO\n\
+LeRoy Neiman' + _(' as ') + 'LeRoy Neiman\n\
+Bert Randolph Sugar' + _(' as ') + 'Rep??rter da Ring Magazine\n\
+Bernard Fern??ndez' + _(' as ') + 'Articulista da Boxing Association of America\n\
+Gunnar Peterson' + _(' as ') + 'Treinador de levantamento de peso\n\
+Yahya' + _(' as ') + 'Oponente de Dixon\n\
+Marc Ratner (1)' + _(' as ') + 'Oficial de luta\n\
+Anthony Lato Jr.' + _(' as ') + 'Inspetor de Rocky\n\
+Jack Lazzarado' + _(' as ') + 'Inspetor de Dixon\n\
+Michael Buffer' + _(' as ') + 'Anunciador de luta\n\
+Joe Cortez' + _(' as ') + '??rbitro\n\
+Carter Mitchell' + _(' as ') + 'Shamrock Foreman\n\
+Vinod Kumar' + _(' as ') + 'Ravi\n\
+Fran Pultro' + _(' as ') + 'Pai no restaurante\n\
+Frank Stallone Jr.??' + _(' as ') + 'Cliente do restaurante\n\
+Jody Giambelluca' + _(' as ') + 'Cliente do restaurante\n\
+Tobias Segal' + _(' as ') + 'Amigo de Robert\n\
+Tim Carr' + _(' as ') + 'Amigo de Robert\n\
+Matt Frack' + _(' as ') + 'Amigo de Robert\n\
+Paul Dion Monte' + _(' as ') + 'Amigo de Robert\n\
+Kevin King Templeton' + _(' as ') + 'Amigo de Robert\n\
+Robert Michael Kelly' + _(' as ') + 'Senhor Tomilson\n\
+Rick Buchborn' + _(' as ') + 'F?? de Rocky\n\
+Nick Baker' + _(' as ') + 'Bartender do pub irland??s\n\
+Don Sherman' + _(' as ') + 'Andy\n\
+Stu Nahan' + _(' as ') + 'Comentarista da luta pelo computador\n\
+Gary Compton' + _(' as ') + 'Seguran??a\n\
+Ricky Cavazos' + _(' as ') + 'Espectador da luta (n??o creditado)\n\
+Dolph Lundgren' + _(' as ') + 'Capit??o Ivan Drago (imagens de arquivo) (n??o creditado)\n\
+Burgess Meredith' + _(' as ') + 'Mickey (imagens de arquivo) (n??o creditado)\n\
+Mr. T' + _(' as ') + 'Clubber Lang (imagens de arquivo) (n??o creditado)\n\
+Carl Weathers' + _(' as ') + 'Apollo Creed (imagens de arquivo) (n??o creditado)',
+			'country'             : 'EUA',
+			'genre'               : 'A????o',
+			'classification'      : False,
+			'studio'              : 'Fox Film',
+			'o_site'              : 'http://epipoca.uol.com.br/filmes_web.php?idf=11521',
+			'site'                : 'http://epipoca.uol.com.br/filmes_ficha.php?idf=11521',
+			'trailer'             : 'http://epipoca.uol.com.br/filmes_trailer.php?idf=11521',
+			'year'                : 2006,
+			'notes'               : False,
+			'runtime'             : 102,
+			'image'               : True,
+			'rating'              : 9
+		},
+	}

Modified: branches/0.9.x/lib/test_movieplugins.py
===================================================================
--- branches/0.9.x/lib/test_movieplugins.py	2009-04-15 20:37:42 UTC (rev 1187)
+++ branches/0.9.x/lib/test_movieplugins.py	2009-04-16 20:23:17 UTC (rev 1188)
@@ -67,7 +67,9 @@
 		'PluginMovieAmazon',
 		'PluginMovieCinematografo',
 		'PluginMovieCineteka',
+		'PluginMovieCulturalia',
 		'PluginMovieDVDEmpire',
+		'PluginMovieE-Pipoca',
 		'PluginMovieFilmDb',
 		'PluginMovieFilmeVonAZ',
 		'PluginMovieIMDB',

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-04-15 20:37:42 UTC (rev 1187)
+++ trunk/ChangeLog	2009-04-16 20:23:17 UTC (rev 1188)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-16  Michael Jahn
+	* updated Culturalia plugin
+	* updated E-Pipoca plugin
+
 2009-04-15  Michael Jahn
 	* added data for automated tests of the IMDB plugin
 	* added data for automated tests of the CineMovies plugin

Modified: trunk/lib/plugins/movie/PluginMovieCulturalia.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCulturalia.py	2009-04-15 20:37:42 UTC (rev 1187)
+++ trunk/lib/plugins/movie/PluginMovieCulturalia.py	2009-04-16 20:23:17 UTC (rev 1188)
@@ -25,19 +25,19 @@
 import movie
 import string
 
-plugin_name        = 'Culturalia'
-plugin_description    = 'Base de Datos de Peliculas'
-plugin_url        = 'www.culturalianet.com'
-plugin_language        = _('Spanish')
-plugin_author        = 'Pedro D. S?nchez'
-plugin_author_email    = '<pedrodav at gmail.com>'
-plugin_version        = '0.2'
+plugin_name         = 'Culturalia'
+plugin_description  = 'Base de Datos de Peliculas'
+plugin_url          = 'www.culturalianet.com'
+plugin_language     = _('Spanish')
+plugin_author       = 'Pedro D. S?nchez'
+plugin_author_email = '<pedrodav at gmail.com>'
+plugin_version      = '0.3'
 
 class Plugin(movie.Movie):
     def __init__(self, id):
-        self.encode='iso-8859-15'
+        self.encode   = 'iso-8859-1'
         self.movie_id = id
-        self.url = "http://www.culturalianet.com/art/ver.php?art=%s" % str(self.movie_id)
+        self.url      = "http://www.culturalianet.com/art/ver.php?art=%s" % str(self.movie_id)
 
     def get_image(self):
         tmp = string.find(self.page, "<font class = 'titulo2'>")
@@ -64,12 +64,12 @@
         self.year = gutils.after(self.year, '. (')
 
     def get_runtime(self):
-        self.runtime = gutils.trim(self.page, "<font class = 'titulo3'>Duraci?n:</font> ", ' minutos')
+        self.runtime = gutils.trim(self.page, u"<font class = 'titulo3'>Duraci?n:</font> ", u' minutos')
         if self.runtime == '':
             self.runtime = gutils.trim(self.page, "<font class = 'titulo3'>Duraci&oacute;n:</font> ", ' minutos')
 
     def get_genre(self):
-        self.genre = gutils.trim(self.page, "<font class = 'titulo3'>G?nero:</font><br>", '<br><br>')
+        self.genre = gutils.trim(self.page, u"<font class = 'titulo3'>G?nero:</font><br>", u'<br><br>')
 
     def get_cast(self):
         self.cast = ''
@@ -78,7 +78,7 @@
         self.cast = string.strip(gutils.strip_tags(self.cast))
 
     def get_classification(self):
-        self.classification = gutils.trim(self.page, "<font class = 'titulo3'>Calificaci?n moral:</font> ", '<br>')
+        self.classification = gutils.trim(self.page, u"<font class = 'titulo3'>Calificaci?n moral:</font> ", u'<br>')
         if self.classification == '':
             self.classification = gutils.trim(self.page, "<font class = 'titulo3'>Calificaci&oacute;n moral:</font> ", '<br>')
 
@@ -98,18 +98,24 @@
         self.country = gutils.trim(self.page, "<font class = 'titulo3'>Nacionalidad:</font><br>", '<br>')
 
     def get_rating(self):
-        self.rating = gutils.trim(self.page, "Puntuaci?n: <font class = 'titulo3'>", '</font>')
+        self.rating = gutils.trim(self.page, u"Puntuaci?n: <font class = 'titulo3'>", u'</font>')
         if self.rating == '':
             self.rating = gutils.trim(self.page, "Puntuaci&oacute;n: <font class = 'titulo3'>", '</font>')
         if self.rating:
             self.rating = str(float(gutils.clean(self.rating)))
 
+    def get_screenplay(self):
+        self.screenplay = gutils.trim(self.page,u'>Gui?n:', u'<br><br>')
+
+    def get_cameraman(self):
+        self.cameraman = gutils.trim(self.page,u'>Fotograf?a:', u'<br><br>')
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
-        self.original_url_search    = 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
-        self.translated_url_search    = 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
-        self.encode = 'iso-8859-15'
+        self.original_url_search   = 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
+        self.translated_url_search = 'http://www.culturalianet.com/bus/resu.php?donde=1&texto='
+        self.encode                = 'iso-8859-1'
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
@@ -129,3 +135,62 @@
             for element in elements:
                 self.ids.append(gutils.trim(element, 'ver.php?art=',"'"))
                 self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.trim(element, "target='_top'>", '</a>'))))
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [ 11, 11 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '27039' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Milo Ventimiglia\n\
+Geraldine Hughes\n\
+James Francis Kelly III\n\
+Tony Burton\n\
+A.J. Benza\n\
+Talia Shire\n\
+Henry G. Sanders\n\
+Antonio Tarver\n\
+Pedro Lovell\n\
+Ana Gerena\n\
+Angela Boyd\n\
+Louis Giansante\n\
+Maureen Schilling',
+            'country'             : 'USA',
+            'genre'               : 'Drama / Deportes',
+            'classification'      : False,
+            'studio'              : False,
+            'o_site'              : False,
+            'site'                : 'http://www.culturalianet.com/art/ver.php?art=27039',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 99,
+            'image'               : True,
+            'rating'              : False,
+            'cameraman'           : 'J. Clark Mathis',
+            'screenplay'          : 'Sylvester Stallone',
+            'barcode'             : False
+        },
+    }

Modified: trunk/lib/plugins/movie/PluginMovieE-Pipoca.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieE-Pipoca.py	2009-04-15 20:37:42 UTC (rev 1187)
+++ trunk/lib/plugins/movie/PluginMovieE-Pipoca.py	2009-04-16 20:23:17 UTC (rev 1188)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2005-2007 Vasco Nunes, Piotr O??arowski
+# Copyright (c) 2005-2009 Vasco Nunes, Piotr O??arowski
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -27,21 +27,24 @@
 
 import gutils, movie, string
 
-plugin_name = "E-Pipoca"
-plugin_description = "E-Pipoca Brasil"
-plugin_url = "epipoca.uol.com.br"
-plugin_language = _("Brazilian Portuguese")
-plugin_author = "Vasco Nunes"
-plugin_author_email="<vasco.m.nunes at gmail.com>"
-plugin_version = "0.5"
+plugin_name         = "E-Pipoca"
+plugin_description  = "E-Pipoca Brasil"
+plugin_url          = "epipoca.uol.com.br"
+plugin_language     = _("Brazilian Portuguese")
+plugin_author       = "Vasco Nunes"
+plugin_author_email = "<vasco.m.nunes at gmail.com>"
+plugin_version      = "0.6"
 
 class Plugin(movie.Movie):
     "A movie plugin object"
     def __init__(self, id):
-        self.encode='iso-8859-1'
+        self.encode   = 'iso-8859-1'
         self.movie_id = id
-        self.url = "http://epipoca.uol.com.br/filmes_detalhes.php?idf=" + str(self.movie_id)
+        self.url      = "http://epipoca.uol.com.br/filmes_detalhes.php?idf=" + str(self.movie_id)
 
+    def initialize(self):
+        self.page_cast = self.open_page(url = 'http://epipoca.uol.com.br/filmes_ficha.php?idf=' + str(self.movie_id))
+
     def get_image(self):
         "Find the film's poster image"
         tmp_pic = gutils.trim(self.page, "images/filmes/poster/poster_", "\"")
@@ -81,9 +84,11 @@
     def get_cast(self):
         "Find the actors. Try to make it line separated."
         self.cast = ""
-        self.cast = gutils.trim(self.page, "<b>Elenco: </b>", "<b>mais...</b>")
-        self.cast = gutils.strip_tags(self.cast)
-        self.cast = self.cast[:-2]
+        tmp = gutils.trim(self.page_cast, '<b>Elenco / Cast</b>', '</table>')
+        elements = tmp.split('<tr>')
+        for index in range(1, len(elements), 1):
+            element = elements[index]
+            self.cast = self.cast + gutils.strip_tags(element.replace(' ... ', _(' as '))) + '\n'
 
     def get_classification(self):
         "Find the film's classification"
@@ -120,6 +125,12 @@
         else:
             self.rating = ""
 
+    def get_screenplay(self):
+        self.screenplay = gutils.trim(self.page_cast, '<b>Roteirista(s) / Writers</b>', '</table>').replace('</tr><tr>', ', ')
+
+    def get_cameraman(self):
+        self.cameraman = gutils.trim(self.page_cast, u'<b>Fot??grafo(s) / Cinematographers</b>', u'</table>').replace(u'</tr><tr>', u', ')
+
 class SearchPlugin(movie.SearchMovie):
     "A movie search object"
     def __init__(self):
@@ -152,3 +163,108 @@
                 self.titles.append(gutils.strip_tags(gutils.trim(element, "<font class=\"titulo\">", "<b>Adicionar aos meus filmes favoritos</b>") ))
         else:
             self.number_results = 0
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky Balboa' : [ 7, 7 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '11521' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone' + _(' as ') + 'Rocky Balboa\n\
+Burt Young' + _(' as ') + 'Paulie\n\
+Antonio Tarver' + _(' as ') + 'Mason \'The Line\' Dixon\n\
+Geraldine Hughes' + _(' as ') + 'Marie\n\
+Milo Ventimiglia' + _(' as ') + 'Robert Jr.\n\
+Tony Burton' + _(' as ') + 'Duke\n\
+A.J. Benza' + _(' as ') + 'L.C.\n\
+James Francis Kelly III' + _(' as ') + 'Steps\n\
+Talia Shire' + _(' as ') + 'Adrian (imagens de arquivo)\n\
+Lou DiBella' + _(' as ') + 'Lou DiBella\n\
+Mike Tyson (1)' + _(' as ') + 'Mike Tyson\n\
+Henry G. Sanders' + _(' as ') + 'Martin\n\
+Pedro Lovell' + _(' as ') + 'Spider Rico\n\
+Ana Gerena' + _(' as ') + 'Isabel\n\
+Angela Boyd' + _(' as ') + 'Angie\n\
+Louis Giansante' + _(' as ') + 'Bandido do bar\n\
+Maureen Schilling' + _(' as ') + 'Bartender do Lucky\n\
+Lahmard Tate??' + _(' as ') + 'X-Cell\n\
+Woodrow W. Paige??' + _(' as ') + 'Comentarista da ESPN\n\
+Skip Bayless' + _(' as ') + 'Comentarista da ESPN\n\
+Jay Crawford' + _(' as ') + 'Comentarista da ESPN\n\
+Brian Kenny' + _(' as ') + 'Apresentador da ESPN\n\
+Dana Jacobson' + _(' as ') + 'Apresentador da ESPN\n\
+Chuck Johnson??' + _(' as ') + 'Apresentador da ESPN\n\
+James Binns' + _(' as ') + 'Comiss??rio\n\
+Johnnie Hobbs Jr.' + _(' as ') + 'Comiss??rio\n\
+Barney Fitzpatrick' + _(' as ') + 'Comiss??rio\n\
+Jim Lampley' + _(' as ') + 'Comentarista da HBO\n\
+Larry Merchant' + _(' as ') + 'Comentarista da HBO\n\
+Max Kellerman' + _(' as ') + 'Comentarista da HBO\n\
+LeRoy Neiman' + _(' as ') + 'LeRoy Neiman\n\
+Bert Randolph Sugar' + _(' as ') + 'Rep??rter da Ring Magazine\n\
+Bernard Fern??ndez' + _(' as ') + 'Articulista da Boxing Association of America\n\
+Gunnar Peterson' + _(' as ') + 'Treinador de levantamento de peso\n\
+Yahya' + _(' as ') + 'Oponente de Dixon\n\
+Marc Ratner (1)' + _(' as ') + 'Oficial de luta\n\
+Anthony Lato Jr.' + _(' as ') + 'Inspetor de Rocky\n\
+Jack Lazzarado' + _(' as ') + 'Inspetor de Dixon\n\
+Michael Buffer' + _(' as ') + 'Anunciador de luta\n\
+Joe Cortez' + _(' as ') + '??rbitro\n\
+Carter Mitchell' + _(' as ') + 'Shamrock Foreman\n\
+Vinod Kumar' + _(' as ') + 'Ravi\n\
+Fran Pultro' + _(' as ') + 'Pai no restaurante\n\
+Frank Stallone Jr.??' + _(' as ') + 'Cliente do restaurante\n\
+Jody Giambelluca' + _(' as ') + 'Cliente do restaurante\n\
+Tobias Segal' + _(' as ') + 'Amigo de Robert\n\
+Tim Carr' + _(' as ') + 'Amigo de Robert\n\
+Matt Frack' + _(' as ') + 'Amigo de Robert\n\
+Paul Dion Monte' + _(' as ') + 'Amigo de Robert\n\
+Kevin King Templeton' + _(' as ') + 'Amigo de Robert\n\
+Robert Michael Kelly' + _(' as ') + 'Senhor Tomilson\n\
+Rick Buchborn' + _(' as ') + 'F?? de Rocky\n\
+Nick Baker' + _(' as ') + 'Bartender do pub irland??s\n\
+Don Sherman' + _(' as ') + 'Andy\n\
+Stu Nahan' + _(' as ') + 'Comentarista da luta pelo computador\n\
+Gary Compton' + _(' as ') + 'Seguran??a\n\
+Ricky Cavazos' + _(' as ') + 'Espectador da luta (n??o creditado)\n\
+Dolph Lundgren' + _(' as ') + 'Capit??o Ivan Drago (imagens de arquivo) (n??o creditado)\n\
+Burgess Meredith' + _(' as ') + 'Mickey (imagens de arquivo) (n??o creditado)\n\
+Mr. T' + _(' as ') + 'Clubber Lang (imagens de arquivo) (n??o creditado)\n\
+Carl Weathers' + _(' as ') + 'Apollo Creed (imagens de arquivo) (n??o creditado)',
+            'country'             : 'EUA',
+            'genre'               : 'A????o',
+            'classification'      : False,
+            'studio'              : 'Fox Film',
+            'o_site'              : 'http://epipoca.uol.com.br/filmes_web.php?idf=11521',
+            'site'                : 'http://epipoca.uol.com.br/filmes_ficha.php?idf=11521',
+            'trailer'             : 'http://epipoca.uol.com.br/filmes_trailer.php?idf=11521',
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 102,
+            'image'               : True,
+            'rating'              : 9,
+            'cameraman'           : 'J. Clark Mathis',
+            'screenplay'          : 'Sylvester Stallone ... Escrito por, Sylvester Stallone ... Personagens',
+            'barcode'             : False
+        },
+    }

Modified: trunk/lib/test_movieplugins.py
===================================================================
--- trunk/lib/test_movieplugins.py	2009-04-15 20:37:42 UTC (rev 1187)
+++ trunk/lib/test_movieplugins.py	2009-04-16 20:23:17 UTC (rev 1188)
@@ -72,7 +72,9 @@
         'PluginMovieCinematografo',
         'PluginMovieCineMovies',
         'PluginMovieCineteka',
+        'PluginMovieCulturalia',
         'PluginMovieDVDEmpire',
+        'PluginMovieE-Pipoca',
         'PluginMovieFilmDb',
         'PluginMovieFilmeVonAZ',
         'PluginMovieIMDB',



From mikej06 at mail.berlios.de  Fri Apr 17 22:28:26 2009
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Fri, 17 Apr 2009 22:28:26 +0200
Subject: [Griffith-svn] r1189 - branches/0.9.x branches/0.9.x/lib
	branches/0.9.x/lib/plugins/movie trunk trunk/lib
	trunk/lib/plugins/movie
Message-ID: <200904172028.n3HKSQKd002762@sheep.berlios.de>

Author: mikej06
Date: 2009-04-17 22:27:26 +0200 (Fri, 17 Apr 2009)
New Revision: 1189

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py
   branches/0.9.x/lib/plugins/movie/PluginMovieFilmtipset.py
   branches/0.9.x/lib/test_movieplugins.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieFilmAffinity.py
   trunk/lib/plugins/movie/PluginMovieFilmtipset.py
   trunk/lib/test_movieplugins.py
Log:
* updated FilmAffinity plugin
* updated Filmtipset plugin

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2009-04-16 20:23:17 UTC (rev 1188)
+++ branches/0.9.x/ChangeLog	2009-04-17 20:27:26 UTC (rev 1189)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-17  Michael Jahn
+	* updated FilmAffinity plugin
+	* updated Filmtipset plugin
+
 2009-04-16  Michael Jahn
 	* updated Culturalia plugin
 	* updated E-Pipoca plugin

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-04-16 20:23:17 UTC (rev 1188)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-04-17 20:27:26 UTC (rev 1189)
@@ -1,8 +1,8 @@
-# -*- coding: iso-8859-15 -*-
+# -*- coding: iso8859-1 -*-
 
 __revision__ = '$Id: PluginMovieFilmAffinity.py 389 2006-07-29 18:43:35Z piotrek $'
 
-# Copyright (c) 2006 Pedro D. S?nchez
+# Copyright (c) 2006-2009 Pedro D. S?nchez
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -25,17 +25,17 @@
 import movie
 import string, re
 
-plugin_name		= 'FilmAffinity'
-plugin_description	= 'Base de Datos de Peliculas'
-plugin_url		= 'www.filmaffinity.com'
-plugin_language		= _('Spanish')
-plugin_author		= 'Pedro D. S?nchez'
-plugin_author_email	= '<pedrodav at gmail.com>'
-plugin_version		= '0.3'
+plugin_name         = 'FilmAffinity'
+plugin_description  = 'Base de Datos de Peliculas'
+plugin_url          = 'www.filmaffinity.com'
+plugin_language     = _('Spanish')
+plugin_author       = 'Pedro D. S?nchez'
+plugin_author_email = '<pedrodav at gmail.com>'
+plugin_version      = '0.3'
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode   = 'iso-8859-15'
+		self.encode   = 'iso-8859-1'
 		self.movie_id = id
 		self.url      = "http://www.filmaffinity.com/es/film%s.html" % str(self.movie_id)
 
@@ -94,6 +94,7 @@
 		self.cast = re.sub('</a>,[ ]*', '\n', self.cast)
 		self.cast = string.strip(gutils.strip_tags(self.cast))
 		self.cast = re.sub('[ ]+', ' ', self.cast)
+		self.cast = re.sub('\n[ ]+', '\n', self.cast)
 
 	def get_classification(self):
 		self.classification = ''
@@ -128,9 +129,9 @@
 class SearchPlugin(movie.SearchMovie):
 
 	def __init__(self):
-		self.original_url_search	= 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
-		self.translated_url_search	= 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
-		self.encode = 'iso-8859-15'
+		self.original_url_search   = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
+		self.translated_url_search = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
+		self.encode                = 'iso-8859-1'
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
@@ -160,3 +161,54 @@
 					self.ids.append(gutils.trim(element, '<b><a href="/es/film', '.html'))
 					title = gutils.after(element, '<b><a href="/es/film')
 					self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.after(title, '>'))))
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky' : [ 9, 9 ],
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'706925' : { 
+			'title'               : 'Rocky Balboa (Rocky VI)',
+			'o_title'             : 'Rocky Balboa (Rocky VI)',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Tony Burton\n\
+Milo Ventimiglia\n\
+James Francis Kelly III\n\
+Talia Shire\n\
+Angela Boyd\n\
+Antonio Tarver\n\
+Geraldine Hughes\n\
+Mike Tyson',
+			'country'             : 'Estados Unidos',
+			'genre'               : u'Acci?n / Drama / Deporte (Boxeo)',
+			'classification'      : False,
+			'studio'              : 'MGM / UA / Columbia Pictures / Revolution Studios',
+			'o_site'              : 'http://www.rockythemovie.com',
+			'site'                : 'http://www.filmaffinity.com/es/film706925.html',
+			'trailer'             : False,
+			'year'                : 2006,
+			'notes'               : False,
+			'runtime'             : 102,
+			'image'               : True,
+			'rating'              : 6
+		},
+	}

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieFilmtipset.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieFilmtipset.py	2009-04-16 20:23:17 UTC (rev 1188)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieFilmtipset.py	2009-04-17 20:27:26 UTC (rev 1189)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2007
+# Copyright (c) 2007-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -26,20 +26,20 @@
 import string
 import re
 
-plugin_name = "Filmtipset.se"
-plugin_description = "Filmtipset.se"
-plugin_url = "www.filmtipset.se"
-plugin_language = _("Swedish")
-plugin_author = "Michael Jahn"
+plugin_name         = "Filmtipset.se"
+plugin_description  = "Filmtipset.se"
+plugin_url          = "www.filmtipset.se"
+plugin_language     = _("Swedish")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.1"
+plugin_version      = "1.2"
 
 class Plugin(movie.Movie):
 
 	def __init__(self, id):
-		self.encode='iso-8859-1'
+		self.encode   = 'iso-8859-1'
 		self.movie_id = id
-		self.url = 'http://www.filmtipset.se/film/' + str(self.movie_id)
+		self.url      = 'http://www.filmtipset.se/film/' + str(self.movie_id)
 
 	def get_image(self):
 		self.image_url = ''
@@ -53,7 +53,7 @@
 			self.o_title = gutils.trim(self.page, '<h1>', '</h1>')
 
 	def get_title(self):
-		self.title = gutils.trim(self.page, '<h1>', '</h1>')
+		self.title = gutils.after(gutils.trim(self.page, 'class="movie_header"', '<td'), '>')
 
 	def get_director(self):
 		self.director = gutils.trim(self.page, 'Regiss&ouml;r:', '</tr>')
@@ -73,7 +73,7 @@
 			self.genre = string.strip(gutils.trim(self.page, 'Genre:', '</tr>'))
 
 	def get_cast(self):
-		self.cast = self.regextrim(self.page, 'Sk&aring;despelare [^:]*[:]', '</tr>')
+		self.cast = self.regextrim(self.page, 'Sk&aring;despelare[^:]*[:]', '</tr>')
 		self.cast = string.replace(self.cast, ', ', '\n')
 
 	def get_classification(self):
@@ -99,6 +99,11 @@
 
 	def get_rating(self):
 		self.rating = "0"
+		tmp = gutils.trim(self.page, 'grade_images/grade1', '_')
+		try:
+			self.rating = str(int(tmp) * 2)
+		except:
+			pass
 
 	def get_notes(self):
 		self.notes = ''
@@ -124,7 +129,7 @@
 	def __init__(self):
 		self.original_url_search   = "http://www.filmtipset.se/search.cgi?field=name&field=orgname&show_graded=1&search_value="
 		self.translated_url_search = "http://www.filmtipset.se/search.cgi?field=name&field=orgname&show_graded=1&search_value="
-		self.encode='iso-8859-1'
+		self.encode                = 'iso-8859-1'
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
@@ -146,5 +151,54 @@
 					self.ids.append(element[:searchResult.end() - 1])
 				self.titles.append(
 					gutils.strip_tags(gutils.trim(element, '>', '</a>')) + ' / ' +
-					string.replace(gutils.trim(element, 'title="', '"'), '&nbsp;', ' ')
+					gutils.clean(string.replace(gutils.trim(element, 'Originaltitel:', '</div>'), '&nbsp;', ' '))
 				)
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+	#
+	test_configuration = {
+		'Rocky' : [ 16, 16 ],
+	}
+
+class PluginTest:
+	#
+	# Configuration for automated tests:
+	# dict { movie_id -> dict { arribute -> value } }
+	#
+	# value: * True/False if attribute only should be tested for any value
+	#        * or the expected value
+	#
+	test_configuration = {
+		'rocky-balboa.html' : { 
+			'title'               : 'Rocky Balboa',
+			'o_title'             : 'Rocky Balboa',
+			'director'            : 'Sylvester Stallone',
+			'plot'                : True,
+			'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Milo Ventimiglia\n\
+Geraldine Hughes\n\
+Antonio Tarver\n\
+James Francis Kelly III\n\
+Tony Burton\n\
+Henry G Sanders',
+			'country'             : 'USA',
+			'genre'               : 'Drama, Action',
+			'classification'      : False,
+			'studio'              : False,
+			'o_site'              : 'http://www.imdb.com/title/tt0479143/',
+			'site'                : 'http://www.filmtipset.se/film/rocky-balboa.html',
+			'trailer'             : False,
+			'year'                : 2006,
+			'notes'               : False,
+			'runtime'             : 102,
+			'image'               : True,
+			'rating'              : 6
+		},
+	}

Modified: branches/0.9.x/lib/test_movieplugins.py
===================================================================
--- branches/0.9.x/lib/test_movieplugins.py	2009-04-16 20:23:17 UTC (rev 1188)
+++ branches/0.9.x/lib/test_movieplugins.py	2009-04-17 20:27:26 UTC (rev 1189)
@@ -70,8 +70,10 @@
 		'PluginMovieCulturalia',
 		'PluginMovieDVDEmpire',
 		'PluginMovieE-Pipoca',
+		'PluginMovieFilmAffinity',
 		'PluginMovieFilmDb',
 		'PluginMovieFilmeVonAZ',
+		'PluginMovieFilmtipset',
 		'PluginMovieIMDB',
 		'PluginMovieIMDB-de',
 		'PluginMovieKinoDe',

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2009-04-16 20:23:17 UTC (rev 1188)
+++ trunk/ChangeLog	2009-04-17 20:27:26 UTC (rev 1189)
@@ -5,6 +5,10 @@
 (c) 2005-2009  Vasco Nunes, Piotr O??arowski
 
 
+2009-04-17  Michael Jahn
+	* updated FilmAffinity plugin
+	* updated Filmtipset plugin
+
 2009-04-16  Michael Jahn
 	* updated Culturalia plugin
 	* updated E-Pipoca plugin

Modified: trunk/lib/plugins/movie/PluginMovieFilmAffinity.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-04-16 20:23:17 UTC (rev 1188)
+++ trunk/lib/plugins/movie/PluginMovieFilmAffinity.py	2009-04-17 20:27:26 UTC (rev 1189)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id: PluginMovieFilmAffinity.py 389 2006-07-29 18:43:35Z piotrek $'
 
-# Copyright (c) 2006 Pedro D. S?nchez
+# Copyright (c) 2006-2009 Pedro D. S?nchez
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -35,7 +35,7 @@
 
 class Plugin(movie.Movie):
     def __init__(self, id):
-        self.encode   = 'iso-8859-15'
+        self.encode   = 'iso-8859-1'
         self.movie_id = id
         self.url      = "http://www.filmaffinity.com/es/film%s.html" % str(self.movie_id)
 
@@ -94,6 +94,7 @@
         self.cast = re.sub('</a>,[ ]*', '\n', self.cast)
         self.cast = string.strip(gutils.strip_tags(self.cast))
         self.cast = re.sub('[ ]+', ' ', self.cast)
+        self.cast = re.sub('\n[ ]+', '\n', self.cast)
 
     def get_classification(self):
         self.classification = ''
@@ -126,16 +127,21 @@
             self.rating = str(round(float(gutils.clean(string.replace(self.rating, ',', '.')))))
 
     def get_cameraman(self):
-        self.cameraman = gutils.trim(self.page, u'<b>FOTOGRAF?A</b></td>', '</td>')
+        self.cameraman = gutils.trim(self.page, u'<b>FOTOGRAF?A</b></td>', u'</td>')
         if self.cameraman == '':
-            self.cameraman = gutils.trim(self.page, '<b>FOTOGRAF&Iacute;A</b></td>', '</td>')
+            self.cameraman = gutils.trim(self.page, u'<b>FOTOGRAF&Iacute;A</b></td>', u'</td>')
 
+    def get_screenplay(self):
+        self.screenplay = gutils.trim(self.page, u'<b>GUI?N</b></td>', u'</td>')
+        if self.screenplay == '':
+            self.screenplay = gutils.trim(self.page, u'<b>GUI&Oacute;N</b></td>', u'</td>')
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
         self.original_url_search   = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
         self.translated_url_search = 'http://www.filmaffinity.com/es/search.php?stype=title&stext='
-        self.encode                = 'iso-8859-15'
+        self.encode                = 'iso-8859-1'
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
@@ -166,3 +172,57 @@
                     self.ids.append(gutils.trim(element, '<b><a href="/es/film', '.html'))
                     title = gutils.after(element, '<b><a href="/es/film')
                     self.titles.append(gutils.strip_tags(gutils.convert_entities(gutils.after(title, '>'))))
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky' : [ 9, 9 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        '706925' : { 
+            'title'               : 'Rocky Balboa (Rocky VI)',
+            'o_title'             : 'Rocky Balboa (Rocky VI)',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Tony Burton\n\
+Milo Ventimiglia\n\
+James Francis Kelly III\n\
+Talia Shire\n\
+Angela Boyd\n\
+Antonio Tarver\n\
+Geraldine Hughes\n\
+Mike Tyson',
+            'country'             : 'Estados Unidos',
+            'genre'               : u'Acci?n / Drama / Deporte (Boxeo)',
+            'classification'      : False,
+            'studio'              : 'MGM / UA / Columbia Pictures / Revolution Studios',
+            'o_site'              : 'http://www.rockythemovie.com',
+            'site'                : 'http://www.filmaffinity.com/es/film706925.html',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 102,
+            'image'               : True,
+            'rating'              : 6,
+            'cameraman'           : 'J. Clark Mathis',
+            'screenplay'          : 'Sylvester Stallone (Personajes: Sylvester Stallone)',
+            'barcode'             : False
+        },
+    }

Modified: trunk/lib/plugins/movie/PluginMovieFilmtipset.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFilmtipset.py	2009-04-16 20:23:17 UTC (rev 1188)
+++ trunk/lib/plugins/movie/PluginMovieFilmtipset.py	2009-04-17 20:27:26 UTC (rev 1189)
@@ -2,7 +2,7 @@
 
 __revision__ = '$Id$'
 
-# Copyright (c) 2007
+# Copyright (c) 2007-2009
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -26,20 +26,20 @@
 import string
 import re
 
-plugin_name = "Filmtipset.se"
-plugin_description = "Filmtipset.se"
-plugin_url = "www.filmtipset.se"
-plugin_language = _("Swedish")
-plugin_author = "Michael Jahn"
+plugin_name        = "Filmtipset.se"
+plugin_description  = "Filmtipset.se"
+plugin_url          = "www.filmtipset.se"
+plugin_language     = _("Swedish")
+plugin_author       = "Michael Jahn"
 plugin_author_email = "<mikej06 at hotmail.com>"
-plugin_version = "1.1"
+plugin_version      = "1.2"
 
 class Plugin(movie.Movie):
 
     def __init__(self, id):
-        self.encode='iso-8859-1'
+        self.encode   = 'iso-8859-1'
         self.movie_id = id
-        self.url = 'http://www.filmtipset.se/film/' + str(self.movie_id)
+        self.url      = 'http://www.filmtipset.se/film/' + str(self.movie_id)
 
     def get_image(self):
         self.image_url = ''
@@ -53,7 +53,7 @@
             self.o_title = gutils.trim(self.page, '<h1>', '</h1>')
 
     def get_title(self):
-        self.title = gutils.trim(self.page, '<h1>', '</h1>')
+        self.title = gutils.after(gutils.trim(self.page, 'class="movie_header"', '<td'), '>')
 
     def get_director(self):
         self.director = gutils.trim(self.page, 'Regiss&ouml;r:', '</tr>')
@@ -73,7 +73,7 @@
             self.genre = string.strip(gutils.trim(self.page, 'Genre:', '</tr>'))
 
     def get_cast(self):
-        self.cast = gutils.regextrim(self.page, 'Sk&aring;despelare [^:]*[:]', '</tr>')
+        self.cast = gutils.regextrim(self.page, 'Sk&aring;despelare[^:]*[:]', '</tr>')
         self.cast = string.replace(self.cast, ', ', '\n')
 
     def get_classification(self):
@@ -99,6 +99,11 @@
 
     def get_rating(self):
         self.rating = "0"
+        tmp = gutils.trim(self.page, 'grade_images/grade1', '_')
+        try:
+            self.rating = str(int(tmp) * 2)
+        except:
+            pass
 
     def get_notes(self):
         self.notes = ''
@@ -106,12 +111,15 @@
         if tmp != '':
             self.notes = self.notes + 'Alt. titel:' + string.strip(gutils.strip_tags(tmp))
 
+    def get_screenplay(self):
+        self.screenplay = gutils.trim(self.page, 'Manus:', '</tr>')
+
 class SearchPlugin(movie.SearchMovie):
 
     def __init__(self):
         self.original_url_search   = "http://www.filmtipset.se/search.cgi?field=name&field=orgname&show_graded=1&search_value="
         self.translated_url_search = "http://www.filmtipset.se/search.cgi?field=name&field=orgname&show_graded=1&search_value="
-        self.encode='iso-8859-1'
+        self.encode                = 'iso-8859-1'
 
     def search(self,parent_window):
         if not self.open_search(parent_window):
@@ -134,5 +142,57 @@
                     self.ids.append(element[:searchResult.end() - 1])
                 self.titles.append(
                     gutils.strip_tags(gutils.trim(element, '>', '</a>')) + ' / ' +
-                    string.replace(gutils.trim(element, 'title="', '"'), '&nbsp;', ' ')
+                    gutils.clean(string.replace(gutils.trim(element, 'Originaltitel:', '</div>'), '&nbsp;', ' '))
                 )
+
+#
+# Plugin Test
+#
+class SearchPluginTest(SearchPlugin):
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
+    #
+    test_configuration = {
+        'Rocky' : [ 16, 16 ],
+    }
+
+class PluginTest:
+    #
+    # Configuration for automated tests:
+    # dict { movie_id -> dict { arribute -> value } }
+    #
+    # value: * True/False if attribute only should be tested for any value
+    #        * or the expected value
+    #
+    test_configuration = {
+        'rocky-balboa.html' : { 
+            'title'               : 'Rocky Balboa',
+            'o_title'             : 'Rocky Balboa',
+            'director'            : 'Sylvester Stallone',
+            'plot'                : True,
+            'cast'                : 'Sylvester Stallone\n\
+Burt Young\n\
+Milo Ventimiglia\n\
+Geraldine Hughes\n\
+Antonio Tarver\n\
+James Francis Kelly III\n\
+Tony Burton\n\
+Henry G Sanders',
+            'country'             : 'USA',
+            'genre'               : 'Drama, Action',
+            'classification'      : False,
+            'studio'              : False,
+            'o_site'              : 'http://www.imdb.com/title/tt0479143/',
+            'site'                : 'http://www.filmtipset.se/film/rocky-balboa.html',
+            'trailer'             : False,
+            'year'                : 2006,
+            'notes'               : False,
+            'runtime'             : 102,
+            'image'               : True,
+            'rating'              : 6,
+            'cameraman'           : False,
+            'screenplay'          : 'Sylvester Stallone',
+            'barcode'             : False
+        },
+    }

Modified: trunk/lib/test_movieplugins.py
===================================================================
--- trunk/lib/test_movieplugins.py	2009-04-16 20:23:17 UTC (rev 1188)
+++ trunk/lib/test_movieplugins.py	2009-04-17 20:27:26 UTC (rev 1189)
@@ -75,8 +75,10 @@
         'PluginMovieCulturalia',
         'PluginMovieDVDEmpire',
         'PluginMovieE-Pipoca',
+        'PluginMovieFilmAffinity',
         'PluginMovieFilmDb',
         'PluginMovieFilmeVonAZ',
+        'PluginMovieFilmtipset',
         'PluginMovieIMDB',
         'PluginMovieIMDB-de',
         'PluginMovieKinoDe',



From kura666 at mail.berlios.de  Fri Apr 24 15:28:57 2009
From: kura666 at mail.berlios.de (kura666 at mail.berlios.de)
Date: Fri, 24 Apr 2009 15:28:57 +0200
Subject: [Griffith-svn] r1190 - trunk/lib/plugins/movie
Message-ID: <200904241328.n3ODSvxk005089@sheep.berlios.de>

Author: kura666
Date: 2009-04-24 15:28:55 +0200 (Fri, 24 Apr 2009)
New Revision: 1190

Modified:
   trunk/lib/plugins/movie/PluginMovieFDb.py
Log:
FDb movie plugin updated


Modified: trunk/lib/plugins/movie/PluginMovieFDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieFDb.py	2009-04-17 20:27:26 UTC (rev 1189)
+++ trunk/lib/plugins/movie/PluginMovieFDb.py	2009-04-24 13:28:55 UTC (rev 1190)
@@ -32,7 +32,7 @@
 plugin_language        = _('Polish')
 plugin_author        = 'Piotr O?arowski, Bartosz Kurczewski'
 plugin_author_email    = '<bartosz.kurczewski at gmail.com>'
-plugin_version        = '1.14'
+plugin_version        = '1.15'
 
 class Plugin(movie.Movie):
     TRAILER_PATTERN = re.compile('/film/.*/zwiastuny/odtwarzaj/[0-9]*')
@@ -55,11 +55,12 @@
     def get_o_title(self):
         self.o_title = gutils.trim(self.page, '<h2 class="after-title">', '</h2>')
         self.o_title = gutils.strip_tags(self.o_title)
+        self.o_title = string.strip(self.o_title)
         if self.o_title == '':
             self.o_title = self.get_title(True)
 
     def get_title(self, extra=False):
-        data = gutils.trim(self.page,'<title>', '</title>')
+        data = gutils.trim(self.page,'<h1 id="movie-title">', '</h1>')
         tmp = string.find(data, '(')
         if tmp != -1:
             data = data[:tmp]
@@ -79,12 +80,24 @@
                     self.director += ', ' + element
             self.director = string.replace(self.director[2:], ', &nbsp;&nbsp;&nbsp;(wi?cej)', '')
 
+    def get_screenplay(self):
+        self.screenplay = ''
+        elements = gutils.trim(self.page,'>Scenariusz: </h4>','</div>')
+        elements = string.split(elements, '</li>')
+        if elements[0] != '':
+            for element in elements:
+                element = gutils.trim(element, '>', '</a')
+                if element != '':
+                    self.screenplay += ', ' + element
+            self.screenplay = string.replace(self.screenplay[2:], ', &nbsp;&nbsp;&nbsp;(wi?cej)', '')
+
+
     def get_plot(self):
         self.plot = gutils.trim(self.page,'Opis filmu','</div>')
         self.plot = gutils.trim(self.plot,'<p>',"\n\n")
 
     def get_year(self):
-        self.year = gutils.trim(self.page,'<small>(', ')</small>')
+        self.year = gutils.trim(self.page,'<small>  (', ')</small>')
 
     def get_runtime(self):
         self.runtime = gutils.trim(self.page,'Czas trwania: </h4>','</div>')
@@ -162,7 +175,7 @@
             if len(elements)>1:
                 for element in elements:
                     tmpId = gutils.trim(element, '<a href="', '"')
-                    if tmpId.endswith('http://fdb.pl'):
+                    if tmpId.startswith('/szukaj'):
                         continue
                     self.ids.append(tmpId)
                     element = gutils.strip_tags(



