From mikej06 at mail.berlios.de  Wed Sep 15 20:05:35 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 15 Sep 2010 20:05:35 +0200
Subject: [Griffith-svn] r1445 - trunk/lib/plugins/movie
Message-ID: <20100915180535.EB2CE481064@sheep.berlios.de>

Author: mikej06
Date: 2010-09-15 20:05:35 +0200 (Wed, 15 Sep 2010)
New Revision: 1445

Modified:
   trunk/lib/plugins/movie/PluginMovieAllocine.py
   trunk/lib/plugins/movie/PluginMovieAmazon.py
   trunk/lib/plugins/movie/PluginMovieAniDB.py
   trunk/lib/plugins/movie/PluginMovieCineMovies.py
   trunk/lib/plugins/movie/PluginMovieIMDB.py
   trunk/lib/plugins/movie/PluginMovieKinoDe.py
   trunk/lib/plugins/movie/PluginMovieZelluloid.py
Log:
plugin test data updated

Modified: trunk/lib/plugins/movie/PluginMovieAllocine.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAllocine.py	2010-08-29 17:52:31 UTC (rev 1444)
+++ trunk/lib/plugins/movie/PluginMovieAllocine.py	2010-09-15 18:05:35 UTC (rev 1445)
@@ -234,7 +234,7 @@
             'notes'               : False,
             'runtime'             : 95,
             'image'               : True,
-            'rating'              : 5,
+            'rating'              : 6,
             'cameraman'           : u'Jean-Fran?ois Robin',
             'screenplay'          : u'Alexandra Lecl?re',
             'barcode'             : False
@@ -287,7 +287,7 @@
             'notes'               : False,
             'runtime'             : 108,
             'image'               : True,
-            'rating'              : 8,
+            'rating'              : 9,
             'cameraman'           : u'Adam Greenberg',
             'screenplay'          : u'James Cameron',
             'barcode'             : False

Modified: trunk/lib/plugins/movie/PluginMovieAmazon.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAmazon.py	2010-08-29 17:52:31 UTC (rev 1444)
+++ trunk/lib/plugins/movie/PluginMovieAmazon.py	2010-09-15 18:05:35 UTC (rev 1445)
@@ -398,7 +398,7 @@
     # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
     #
     test_configuration = {
-        'Rocky Balboa'         : [ 20, 20 ],
+        'Rocky Balboa'         : [ 21, 21 ],
         'Arahan'               : [  7,  7 ],
         'Ein gl?ckliches Jahr' : [  3,  3 ]
     }
@@ -444,7 +444,7 @@
 Fran?oise Fabian\n\
 Charles G?rard',
             'country'             : 'Frankreich, Italien',
-            'genre'               : 'Krimikom?die, Thriller, General AAS, Drama, Kom?die, Krimi',
+            'genre'               : 'Krimi, Thriller, Krimikom?die, General AAS, Drama, Kom?die, Krimi',
             'classification'      : 'Freigegeben ab 12 Jahren',
             'studio'              : 'Warner Home Video - DVD',
             'o_site'              : False,

Modified: trunk/lib/plugins/movie/PluginMovieAniDB.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieAniDB.py	2010-08-29 17:52:31 UTC (rev 1444)
+++ trunk/lib/plugins/movie/PluginMovieAniDB.py	2010-09-15 18:05:35 UTC (rev 1445)
@@ -228,7 +228,7 @@
     # dict { movie_id -> [ expected result count for original url, expected result count for translated url ] }
     #
     test_configuration = {
-        'Hellsing' : [ 8, 8 ]
+        'Hellsing' : [ 9, 9 ]
     }
 
 

Modified: trunk/lib/plugins/movie/PluginMovieCineMovies.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieCineMovies.py	2010-08-29 17:52:31 UTC (rev 1444)
+++ trunk/lib/plugins/movie/PluginMovieCineMovies.py	2010-09-15 18:05:35 UTC (rev 1445)
@@ -184,7 +184,7 @@
             'notes'               : False,
             'runtime'             : 105,
             'image'               : True,
-            'rating'              : 6,
+            'rating'              : 7,
             'cameraman'           : False,
             'screenplay'          : 'Sylvester Stallone',
             'barcode'             : False

Modified: trunk/lib/plugins/movie/PluginMovieIMDB.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieIMDB.py	2010-08-29 17:52:31 UTC (rev 1444)
+++ trunk/lib/plugins/movie/PluginMovieIMDB.py	2010-09-15 18:05:35 UTC (rev 1445)
@@ -258,7 +258,7 @@
     #
     test_configuration = {
         'Rocky Balboa'         : [ 21, 21 ],
-        'Ein gl?ckliches Jahr' : [ 42, 42 ]
+        'Ein gl?ckliches Jahr' : [ 43, 43 ]
     }
 
 class PluginTest:

Modified: trunk/lib/plugins/movie/PluginMovieKinoDe.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieKinoDe.py	2010-08-29 17:52:31 UTC (rev 1444)
+++ trunk/lib/plugins/movie/PluginMovieKinoDe.py	2010-09-15 18:05:35 UTC (rev 1445)
@@ -411,7 +411,7 @@
             'year'                : 1973,
             'notes'               : False,
             'runtime'             : 115,
-            'image'               : False,
+            'image'               : True,
             'rating'              : False,
             'cameraman'           : 'Jean Collomb',
             'screenplay'          : 'Claude Lelouch'

Modified: trunk/lib/plugins/movie/PluginMovieZelluloid.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieZelluloid.py	2010-08-29 17:52:31 UTC (rev 1444)
+++ trunk/lib/plugins/movie/PluginMovieZelluloid.py	2010-09-15 18:05:35 UTC (rev 1445)
@@ -262,7 +262,7 @@
 Simon Gosejohann' + _(' as ') + 'junger Mann\n\
 Piet Klocke' + _(' as ') + 'Junggeselle',
             'country'           : 'Deutschland',
-            'genre'             : 'Kinderfilm',
+            'genre'             : 'Kinder',
             'classification'    : 'ohne',
             'studio'            : 'Bavaria Film, Constantin Film',
             'o_site'            : False,



From mikej06 at mail.berlios.de  Wed Sep 15 20:12:40 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 15 Sep 2010 20:12:40 +0200
Subject: [Griffith-svn] r1446 - in trunk: . lib
Message-ID: <20100915181241.59F8C481064@sheep.berlios.de>

Author: mikej06
Date: 2010-09-15 20:12:40 +0200 (Wed, 15 Sep 2010)
New Revision: 1446

Modified:
   trunk/ChangeLog
   trunk/lib/gutils.py
   trunk/lib/sql.py
Log:
workaround for [#574370] freeze when i select existing mysql database

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2010-09-15 18:05:35 UTC (rev 1445)
+++ trunk/ChangeLog	2010-09-15 18:12:40 UTC (rev 1446)
@@ -5,9 +5,18 @@
 (c) 2005-2010  Vasco Nunes, Piotr O?arowski
 
 
+2010-09-15  Michael Jahn
+	* workaround for [#574370] freeze when i select existing mysql database
+
 2010-08-29  Piotr O?arowski
     * Show deprecation warnings only in debug mode
 
+2010-08-26  Michael Jahn
+	* small backup optimizations
+
+2010-08-22  Michael Jahn
+	* reintroduce menu entry for loading and removing cover posters
+
 2010-07-21  Michael Jahn
 	* compatibility fixes for sqlalchemy 0.6
 	* adjusting sqlite page size to the value of the filesystem page size

Modified: trunk/lib/gutils.py
===================================================================
--- trunk/lib/gutils.py	2010-09-15 18:05:35 UTC (rev 1445)
+++ trunk/lib/gutils.py	2010-09-15 18:12:40 UTC (rev 1446)
@@ -662,8 +662,7 @@
 
 
 def create_image_cache(md5sum, gsql):
-    session = gsql.Session()
-    poster = session.query(db.Poster).filter_by(md5sum=md5sum).first()
+    poster = gsql.session.query(db.Poster).filter_by(md5sum=md5sum).first()
     if not poster:
         log.warn("poster not available: %s", md5sum)
         return False

Modified: trunk/lib/sql.py
===================================================================
--- trunk/lib/sql.py	2010-09-15 18:05:35 UTC (rev 1445)
+++ trunk/lib/sql.py	2010-09-15 18:12:40 UTC (rev 1446)
@@ -30,7 +30,7 @@
 
 from sqlalchemy import create_engine, or_, and_, not_, exists, asc, desc
 from sqlalchemy.exceptions import OperationalError
-from sqlalchemy.orm import sessionmaker
+from sqlalchemy.orm import sessionmaker, scoped_session
 from sqlalchemy.sql.expression import Update, Delete
 
 import db # ORM data (SQLAlchemy stuff)
@@ -113,7 +113,9 @@
             engine = create_engine(url)
             conn = engine.connect()
 
-        self.Session = sessionmaker(bind=engine) # create new sessions using this class
+        # scoped_session(...) is a workaround for unclosed sessions in the program
+        # https://bugs.launchpad.net/griffith/+bug/574370
+        self.Session = scoped_session(sessionmaker(bind=engine)) # create new sessions using this class
         self.engine = engine
         self.session = self.Session() # TODO: get rid of it, force developers to create new session using gsql.Session()
         #}}}



From mikej06 at mail.berlios.de  Sat Sep 25 22:08:05 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 25 Sep 2010 22:08:05 +0200
Subject: [Griffith-svn] r1447 - in trunk: . lib/plugins/export
Message-ID: <20100925200805.5E2BE480FCF@sheep.berlios.de>

Author: mikej06
Date: 2010-09-25 22:08:05 +0200 (Sat, 25 Sep 2010)
New Revision: 1447

Modified:
   trunk/ChangeLog
   trunk/lib/plugins/export/PluginExportHTML.py
Log:
[#502990] Own settings will not be saved in HTML-Export

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2010-09-15 18:12:40 UTC (rev 1446)
+++ trunk/ChangeLog	2010-09-25 20:08:05 UTC (rev 1447)
@@ -5,6 +5,9 @@
 (c) 2005-2010  Vasco Nunes, Piotr O?arowski
 
 
+2010-09-25  Michael Jahn
+	* [#502990] Own settings will not be saved in HTML-Export
+
 2010-09-15  Michael Jahn
 	* workaround for [#574370] freeze when i select existing mysql database
 

Modified: trunk/lib/plugins/export/PluginExportHTML.py
===================================================================
--- trunk/lib/plugins/export/PluginExportHTML.py	2010-09-15 18:12:40 UTC (rev 1446)
+++ trunk/lib/plugins/export/PluginExportHTML.py	2010-09-25 20:08:05 UTC (rev 1447)
@@ -47,8 +47,8 @@
     settings = {
         'sorting'           : 'movies_title',
         'sorting2'          : 'ASC',
-        'exported_dir'      : 'griffith_movies',
-        'template'          : 0,
+        'export_dir'        : '',
+        'template'          : 2,
         'title'             : _("Griffith's movies list"),
         'style'             : 0,
         'custom_style'      : False,
@@ -59,7 +59,7 @@
         'poster_height'     : 200,
         'poster_width'      : 150,
         'poster_mode'       : 'RGB', # RGB == color, L == black and white
-        'poster_format'     : 'jpg'
+        'poster_format'     : 'jpeg'
     }
     fields = {
         'movies_cast'           : False,
@@ -181,10 +181,36 @@
         self.templates = self.make_template_list()
         # glade
         gf = os.path.join(self.locations['glade'], 'exporthtml.glade')
+        self.load_configuration()
         self.define_widgets(gtk.glade.XML(gf))
         self.fill_widgets()
         return True
     #}}}
+    
+    def load_configuration(self): #{{{
+        # persist config
+        if self.config is not None:
+            config = self.settings
+            for name, value in config.items():
+                try:
+                    tmp = self.config.get(name, value, section='export-html')
+                    if isinstance(value, bool):
+                        config[name] = bool(int(tmp))
+                    elif isinstance(value, int):
+                        config[name] = int(tmp)
+                    else:
+                        config[name] = tmp
+                except:
+                    pass
+            selected_fields = self.config.get('selected_fields', '', section='export-html')
+            if selected_fields:
+                for name in self.fields:
+                    self.fields[name] = False
+                selected_fields = selected_fields.split(',')
+                for selected_field in selected_fields:
+                    if selected_field in self.fields:
+                        self.fields[selected_field] = True
+    #}}}
 
     def run(self):
         pass
@@ -322,7 +348,7 @@
         pos_o_title = 0
         for i in keys:
             self.widgets['combo_sortby'].append_text(i)
-            if i == _('Original Title'):
+            if self.names[i] == self.settings['sorting']:
                 pos_o_title = j
             j = j + 1
         self.widgets['combo_sortby'].set_wrap_width(3)
@@ -349,8 +375,18 @@
 
         # set defaults --------------------------------
         self.widgets['entry_header'].set_text(self.settings['title'])
-        self.widgets['combo_theme'].set_active(2)    # html_tables
-        self.widgets['combo_sortby'].set_active(pos_o_title)    # orginal title
+        self.widgets['combo_sortby'].set_active(pos_o_title)
+        if self.settings['sorting2'] == 'DESC':
+            self.widgets['cb_reverse'].set_active(True)
+        else:
+            self.widgets['cb_reverse'].set_active(False)
+        # template and theme
+        style = self.settings['style'] # save it temporary because change of the template set it 0
+        self.widgets['combo_theme'].set_active(self.settings['template'])
+        self.widgets['combo_style'].set_active(style)
+        self.widgets['cb_custom_style'].set_active(self.settings['custom_style'])
+        if self.settings['custom_style_file']:
+            self.widgets['fcb_custom_style_file'].set_filename(self.settings['custom_style_file'])
         # spliting
         self.widgets['sb_split_num'].set_value(self.settings['split_num'])
         if self.settings['split_by'] == 0:
@@ -359,17 +395,23 @@
             self.widgets['rb_split_movies'].set_active(True)
         # posters
         self.widgets['combo_format'].set_active(0)
+        if self.settings['poster_format'] == 'PNG':
+            self.widgets['combo_format'].set_active(1)
+        elif self.settings['poster_format'] == 'GIF':
+            self.widgets['combo_format'].set_active(2)
         if self.settings['poster_convert'] and self.settings['poster_convert'] == True:
             self.widgets['cb_convert'].set_active(True)
             self.widgets['vb_posters'].set_sensitive(True)
         else:
             self.widgets['cb_convert'].set_active(False)
             self.widgets['vb_posters'].set_sensitive(False)
-        # persistent config
-        if self.config is not None:
-            tmp = self.config.get('export_dir', None, section='export-html')
-            if not tmp is None:
-                self.widgets['fcw'].set_current_folder(tmp)
+        self.widgets['sb_height'].set_value(self.settings['poster_height'])
+        self.widgets['sb_width'].set_value(self.settings['poster_width'])
+        if self.settings['poster_mode'] == 'L':
+            self.widgets['cb_black'].set_active(True)
+        # destination dir
+        if self.settings['export_dir']:
+            self.widgets['fcw'].set_current_folder(self.settings['export_dir'])
     #}}}
 
     #==[ callbacks ]================================{{{
@@ -526,7 +568,7 @@
         tid = config['template']
         
         # get data from widgets
-        self.settings['exported_dir'] = self.widgets['fcw'].get_filename()
+        self.settings['export_dir']   = self.widgets['fcw'].get_filename()
         self.settings['title']        = self.widgets['entry_header'].get_text().decode('utf-8')
         self.settings['sorting']      = self.names[self.widgets['combo_sortby'].get_active_text().decode('utf-8')]
         if self.widgets['cb_reverse'].get_active():
@@ -542,30 +584,36 @@
             self.settings['poster_mode'] = 'RGB'
         self.settings['poster_format'] = self.widgets['combo_format'].get_active_text()
 
+        # persist config
+        if self.config is not None:
+            for name, value in config.items():
+                self.config.set(name, value, section='export-html')
+            selected_fields = ''
+            for name, value in self.fields.items():
+                if value:
+                    selected_fields = selected_fields + name + ','
+            self.config.set('selected_fields', selected_fields, section='export-html')
+            self.config.save()
+
         # create directories
-        if not config['exported_dir']:
+        if not config['export_dir']:
             log.info("Error: Folder name not set!")
             return 1
         
-        if not os.path.isdir(config['exported_dir']):
+        if not os.path.isdir(config['export_dir']):
             try:
-                os.mkdir(config['exported_dir'])
+                os.mkdir(config['export_dir'])
             except:
-                gutils.error(_("Can't create %s!") % config['exported_dir'])
+                gutils.error(_("Can't create %s!") % config['export_dir'])
                 return 2
             
         data_path = os.path.join(self.locations['share'], 'export_templates', self.templates[tid]['dir'], 'data')
         if os.path.isdir(data_path):
             try:
-                gutils.copytree(data_path, config['exported_dir'])
+                gutils.copytree(data_path, config['export_dir'])
             except Exception, err:
                 gutils.warning(str(err))
         
-        # persist config
-        if self.config is not None:
-            self.config.set('export_dir', config['exported_dir'], section='export-html')
-            self.config.save()
-
         if fields['movies_image']:
             # import modules needed later
             # modules are needed at least to convert griffith.png to nopic.(gif|jpeg|png)
@@ -579,13 +627,13 @@
             if not config['poster_convert']:
                 config['poster_format'] = 'jpeg' # replace 'jpeg'
             
-            posters_dir = os.path.join(config['exported_dir'], 'posters')
+            posters_dir = os.path.join(config['export_dir'], 'posters')
             if os.path.isdir(posters_dir):
                 if gutils.question(_("Directory %s already exists.\nDo you want to overwrite it?") % posters_dir, self.widgets['window']):
                     try:
                         shutil.rmtree(posters_dir)
                     except:
-                        gutils.error(_("Can't remove %s!") % config['exported_dir'])
+                        gutils.error(_("Can't remove %s!") % config['export_dir'])
                         return 3
                 else:
                     return 4
@@ -598,7 +646,7 @@
         if config['custom_style']:
             if config['custom_style_file'] is not None and os.path.isfile(config['custom_style_file']):
                 try:
-                    shutil.copy(config['custom_style_file'],config['exported_dir'])
+                    shutil.copy(config['custom_style_file'],config['export_dir'])
                 except:
                     gutils.warning(_("Can't copy %s!")%style_file)
                     config['custom_style'] = False
@@ -611,7 +659,7 @@
             style = self.templates[tid]['styles'][config['style']]['file']
             style_path = os.path.join(self.locations['share'], 'export_templates', self.templates[tid]['dir'], style)
             try:
-                shutil.copy(style_path,config['exported_dir'])
+                shutil.copy(style_path,config['export_dir'])
             except:
                 gutils.warning(_("Can't copy %s!")%style_path)
 
@@ -685,7 +733,7 @@
         for row in exported_movies:    # fill items {{{
             # check if new file has to be created
             if item==1:
-                filename = os.path.join(config['exported_dir'],'page_%s.' % page + self.templates[tid]['ext'])
+                filename = os.path.join(config['export_dir'],'page_%s.' % page + self.templates[tid]['ext'])
                 try:
                     exported_file = file(filename, 'w')
                 except:
@@ -775,18 +823,19 @@
                 item=item+1
             i=i+1
         #}}}
-        # convert/copy the griffith picture for movies without a poster
-        image_file_src = os.path.join(self.locations['images'], 'griffith.png')
-        image_file_dst = os.path.join(posters_dir, 'nopic.' + config['poster_format'].lower())
-        try:
-            if config['poster_convert']:
-                im = Image.open(image_file_src, 'r').convert(config['poster_mode'])
-                im.thumbnail((config['poster_width'], config['poster_height']), Image.ANTIALIAS)
-            else:
-                im = Image.open(image_file_src, 'r')
-            im.save(image_file_dst, config['poster_format'])
-        except:
-            log.info("Can't convert %s" % image_file_src)
+        if fields['movies_image']:
+            # convert/copy the griffith picture for movies without a poster
+            image_file_src = os.path.join(self.locations['images'], 'griffith.png')
+            image_file_dst = os.path.join(posters_dir, 'nopic.' + config['poster_format'].lower())
+            try:
+                if config['poster_convert']:
+                    im = Image.open(image_file_src, 'r').convert(config['poster_mode'])
+                    im.thumbnail((config['poster_width'], config['poster_height']), Image.ANTIALIAS)
+                else:
+                    im = Image.open(image_file_src, 'r')
+                im.save(image_file_dst, config['poster_format'])
+            except:
+                log.info("Can't convert %s" % image_file_src)
         gutils.info(_("Document has been generated."), self.widgets['window'])
         self.on_quit()
     #}}}



From mikej06 at mail.berlios.de  Mon Sep 27 20:59:21 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Mon, 27 Sep 2010 20:59:21 +0200
Subject: [Griffith-svn] r1448 - trunk/lib
Message-ID: <20100927185921.31A43481073@sheep.berlios.de>

Author: mikej06
Date: 2010-09-27 20:59:20 +0200 (Mon, 27 Sep 2010)
New Revision: 1448

Modified:
   trunk/lib/backup.py
Log:
fixed backup of non-sqlite databases which names differ from "griffith"
disposing temp. database object before removing the temp. directory

Modified: trunk/lib/backup.py
===================================================================
--- trunk/lib/backup.py	2010-09-25 20:08:05 UTC (rev 1447)
+++ trunk/lib/backup.py	2010-09-27 18:59:20 UTC (rev 1448)
@@ -87,6 +87,7 @@
                     tmp_config._file = os.path.join(tmp_dir, 'griffith.cfg')
                     tmp_config.set('type', 'sqlite', section='database')
                     tmp_config.set('file', 'griffith.db', section='database')
+                    tmp_config.set('name', 'griffith', section='database')
                     tmp_config.save()
                     mzip.write(tmp_config._file, arcname='griffith.cfg')
 
@@ -108,6 +109,8 @@
 
                     mzip.write(tmp_file, arcname='griffith.db')
                 finally:
+                    # disposing the temporary db connection before rmtree and in finally block to avoid locked db file
+                    tmp_engine.dispose()
                     rmtree(tmp_dir)
             gutils.info(_("Backup has been created"), self.widgets['window'])
 



From mikej06 at mail.berlios.de  Wed Sep 29 23:03:04 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Wed, 29 Sep 2010 23:03:04 +0200
Subject: [Griffith-svn] r1449 - in trunk: . glade lib lib/db
Message-ID: <20100929210304.AEC09481024@sheep.berlios.de>

Author: mikej06
Date: 2010-09-29 23:03:04 +0200 (Wed, 29 Sep 2010)
New Revision: 1449

Modified:
   trunk/ChangeLog
   trunk/glade/griffith.glade
   trunk/griffith
   trunk/lib/add.py
   trunk/lib/advfilter.py
   trunk/lib/db/__init__.py
   trunk/lib/db/tables.py
   trunk/lib/dbupgrade.py
   trunk/lib/initialize.py
   trunk/lib/main_treeview.py
   trunk/lib/preferences.py
   trunk/lib/widgets.py
Log:
added fields "created" and "updated" to movie entries

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/ChangeLog	2010-09-29 21:03:04 UTC (rev 1449)
@@ -5,6 +5,9 @@
 (c) 2005-2010  Vasco Nunes, Piotr O?arowski
 
 
+2010-09-29  Michael Jahn
+	* added fields "created" and "updated" to movie entries
+
 2010-09-25  Michael Jahn
 	* [#502990] Own settings will not be saved in HTML-Export
 

Modified: trunk/glade/griffith.glade
===================================================================
--- trunk/glade/griffith.glade	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/glade/griffith.glade	2010-09-29 21:03:04 UTC (rev 1449)
@@ -2763,10 +2763,44 @@
                             <property name="visible">True</property>
                             <property name="border_width">8</property>
                             <property name="n_rows">2</property>
-                            <property name="n_columns">5</property>
+                            <property name="n_columns">6</property>
                             <property name="column_spacing">8</property>
                             <property name="row_spacing">8</property>
                             <child>
+                              <widget class="GtkCheckButton" id="view_created">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="label" translatable="yes">Created</property>
+                                <property name="use_underline">True</property>
+                                <property name="response_id">0</property>
+                                <property name="draw_indicator">True</property>
+                              </widget>
+                              <packing>
+                                <property name="left_attach">5</property>
+                                <property name="right_attach">6</property>
+                                <property name="x_options">GTK_FILL</property>
+                                <property name="y_options"></property>
+                              </packing>
+                            </child>
+                            <child>
+                              <widget class="GtkCheckButton" id="view_updated">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="label" translatable="yes">Updated</property>
+                                <property name="use_underline">True</property>
+                                <property name="response_id">0</property>
+                                <property name="draw_indicator">True</property>
+                              </widget>
+                              <packing>
+                                <property name="left_attach">5</property>
+                                <property name="right_attach">6</property>
+                                <property name="top_attach">1</property>
+                                <property name="bottom_attach">2</property>
+                                <property name="x_options">GTK_FILL</property>
+                                <property name="y_options"></property>
+                              </packing>
+                            </child>
+                            <child>
                               <widget class="GtkCheckButton" id="view_rating">
                                 <property name="visible">True</property>
                                 <property name="can_focus">True</property>

Modified: trunk/griffith
===================================================================
--- trunk/griffith	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/griffith	2010-09-29 21:03:04 UTC (rev 1449)
@@ -1213,6 +1213,12 @@
             elif treeview_column == self.rating_column:
                 columnorder = columnorder + delimiter + 'rating'
                 delimiter = ','
+            elif treeview_column == self.created_column:
+                columnorder = columnorder + delimiter + 'created'
+                delimiter = ','
+            elif treeview_column == self.updated_column:
+                columnorder = columnorder + delimiter + 'updated'
+                delimiter = ','
         self.config.set('columnorder', columnorder, section='mainlist')
         columnsorting = self.treemodel.get_sort_column_id()
         self.config.set('columnsortid', columnsorting[0], section='mainlist')

Modified: trunk/lib/add.py
===================================================================
--- trunk/lib/add.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/add.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -142,6 +142,10 @@
             tmp_model.set_value(tmp_iter, 9, '')
         else:
             tmp_model.set_value(tmp_iter, 9, movie.rating)
+        if movie.created:
+            tmp_model.set_value(tmp_iter, 10, movie.created.strftime('%Y-%m-%d %H:%M'))
+        if movie.updated:
+            tmp_model.set_value(tmp_iter, 11, movie.updated.strftime('%Y-%m-%d %H:%M'))
         # close add window
         self.widgets['add']['window'].hide()
         # refresh
@@ -377,6 +381,8 @@
         'cast': cast_buffer.get_text(cast_buffer.get_start_iter(), cast_buffer.get_end_iter()).decode('utf-8'),
         'notes': notes_buffer.get_text(notes_buffer.get_start_iter(), notes_buffer.get_end_iter()).decode('utf-8'),
         'plot': plot_buffer.get_text(plot_buffer.get_start_iter(), plot_buffer.get_end_iter()).decode('utf-8'),
+        'created': None,
+        'updated': None
     }
     if self._am_movie_id is not None:
         t_movies['movie_id'] = self._am_movie_id
@@ -736,6 +742,10 @@
         self.treemodel.set_value(myiter, 9, '')
     else:
         self.treemodel.set_value(myiter, 9, int(details['rating']))
+    if details['created']:
+        self.treemodel.set_value(myiter, 10, details['created'].strftime('%Y-%m-%d %H:%M'))
+    if details['updated']:
+        self.treemodel.set_value(myiter, 11, details['updated'].strftime('%Y-%m-%d %H:%M'))
     #update statusbar
     self.total += 1
     self.count_statusbar()

Modified: trunk/lib/advfilter.py
===================================================================
--- trunk/lib/advfilter.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/advfilter.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -445,7 +445,7 @@
         db.Movie.director, db.Movie.poster_md5,
         db.Movie.genre, db.Movie.seen,
         db.Movie.year, db.Movie.runtime,
-        db.Movie.rating]
+        db.Movie.rating, db.Movie.created, db.Movie.updated]
     return columns_to_select # }}}
 
 

Modified: trunk/lib/db/__init__.py
===================================================================
--- trunk/lib/db/__init__.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/db/__init__.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 # vim: fdm=marker
 __revision__ = '$Id$'
-__version__ = 5 # XXX: database format version, remember to increase after changing data structures
+__version__ = 6 # XXX: database format version, remember to increase after changing data structures
 
 # Copyright ? 2009 Piotr O?arowski
 #

Modified: trunk/lib/db/tables.py
===================================================================
--- trunk/lib/db/tables.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/db/tables.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -21,8 +21,9 @@
 # You may use and distribute this software under the terms of the
 # GNU General Public License, version 2 or later
 
+import datetime
 from sqlalchemy import Table, Column, ForeignKey, func
-from sqlalchemy.types import Boolean, Unicode, Text, Integer, SmallInteger, Date, Binary, PickleType
+from sqlalchemy.types import Boolean, Unicode, Text, Integer, SmallInteger, Date, Binary, PickleType, DateTime
 
 from db import metadata
 
@@ -90,6 +91,8 @@
     Column('plot', Text),
     Column('notes', Text),
     Column('image', Unicode(128)), # XXX: deprecated
+    Column('created', DateTime, default=datetime.datetime.now),
+    Column('updated', DateTime, onupdate=datetime.datetime.now),
     )
 
 people = Table('people', metadata,

Modified: trunk/lib/dbupgrade.py
===================================================================
--- trunk/lib/dbupgrade.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/dbupgrade.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -238,6 +238,25 @@
         self.session.add(db_version)
         self.session.commit()
 
+    if version == 5:    # fix changes between v5 and v6
+        version += 1
+        log.info("Upgrading database to version %d...", version)
+        
+        # common SQL statements
+        queries = {'created': 'ALTER TABLE movies ADD created DATETIME;',
+                   'updated': 'ALTER TABLE movies ADD updated DATETIME;'}
+        for key, query in queries.items():
+            try:
+                self.session.bind.execute(query)
+            except Exception, e:
+                log.error("Cannot add '%s' column: %s", key, e)
+                return False
+
+        db_version = self.session.query(db.Configuration).filter_by(param=u'version').one()
+        db_version.value = unicode(version)
+        self.session.add(db_version)
+        self.session.commit()
+
     return True
 
 

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/initialize.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -167,7 +167,7 @@
 
 
 def treeview(self):
-    self.treemodel = gtk.TreeStore(str, gtk.gdk.Pixbuf, str, str, str, str, bool, str, str, int)
+    self.treemodel = gtk.TreeStore(str, gtk.gdk.Pixbuf, str, str, str, str, bool, str, str, int, str, str)
     self.widgets['treeview'].set_model(self.treemodel)
     self.widgets['treeview'].set_headers_visible(True)
     # number column
@@ -245,6 +245,24 @@
     self.rating_column.set_alignment(0.5)
     self.rating_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.rating_column)
+    # created column
+    renderer = gtk.CellRendererText()
+    renderer.set_property('xalign', 0.5)
+    self.created_column = gtk.TreeViewColumn(_('Created'), renderer, text=10)
+    self.created_column.set_sort_column_id(10)
+    self.created_column.set_resizable(True)
+    self.created_column.set_alignment(0.5)
+    self.created_column.set_reorderable(True)
+    self.widgets['treeview'].append_column(self.created_column)
+    # updated column
+    renderer = gtk.CellRendererText()
+    renderer.set_property('xalign', 0.5)
+    self.updated_column = gtk.TreeViewColumn(_('Updated'), renderer, text=11)
+    self.updated_column.set_sort_column_id(11)
+    self.updated_column.set_resizable(True)
+    self.updated_column.set_alignment(0.5)
+    self.updated_column.set_reorderable(True)
+    self.widgets['treeview'].append_column(self.updated_column)
     # reflect saved column order
     columnorder = self.config.get('columnorder', None, section='mainlist')
     if not columnorder is None:
@@ -281,6 +299,12 @@
             elif col == 'rating':
                 self.widgets['treeview'].move_column_after(self.rating_column, currentcol)
                 currentcol = self.rating_column
+            elif col == 'created':
+                self.widgets['treeview'].move_column_after(self.created_column, currentcol)
+                currentcol = self.created_column
+            elif col == 'updated':
+                self.widgets['treeview'].move_column_after(self.updated_column, currentcol)
+                currentcol = self.updated_column
     # reflect saved column sorting
     columnsortid = self.config.get('columnsortid', None, section='mainlist')
     columnsortorder = self.config.get('columnsortorder', None, section='mainlist')

Modified: trunk/lib/main_treeview.py
===================================================================
--- trunk/lib/main_treeview.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/main_treeview.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -434,7 +434,7 @@
     sort_column_id, order = self.treemodel.get_sort_column_id()
 
     # new treemodel (faster and prevents some problems)
-    self.treemodel = gtk.TreeStore(str, gtk.gdk.Pixbuf, str, str, str, str, bool, str, str, int)
+    self.treemodel = gtk.TreeStore(str, gtk.gdk.Pixbuf, str, str, str, str, bool, str, str, int, str, str)
 
     # check preferences to hide or show columns
     if self.config.get('number', True, 'mainlist') == True:
@@ -477,6 +477,14 @@
         self.rating_column.set_visible(True)
     else:
         self.rating_column.set_visible(False)
+    if self.config.get('created', True, 'mainlist') == True:
+        self.created_column.set_visible(True)
+    else:
+        self.created_column.set_visible(False)
+    if self.config.get('updated', True, 'mainlist') == True:
+        self.updated_column.set_visible(True)
+    else:
+        self.updated_column.set_visible(False)
 
     for movie in movies:
         myiter = self.treemodel.append(None)
@@ -507,6 +515,10 @@
             self.treemodel.set_value(myiter, 8, '%003d' % movie.runtime + _(' min'))
         if movie.rating is not None and (isinstance(movie.rating, int) or isinstance(movie.rating, long)):
             self.treemodel.set_value(myiter, 9, movie.rating)
+        if movie.created:
+            self.treemodel.set_value(myiter, 10, movie.created.strftime('%Y-%m-%d %H:%M'))
+        if movie.updated:
+            self.treemodel.set_value(myiter, 11, movie.updated.strftime('%Y-%m-%d %H:%M'))
 
     # restore user sort column
     if sort_column_id is not None:

Modified: trunk/lib/preferences.py
===================================================================
--- trunk/lib/preferences.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/preferences.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -91,6 +91,16 @@
         w['view_rating'].set_active(False)
     else:
         w['view_rating'].set_active(True)
+    # created
+    if self.config.get('created', True, 'mainlist') == False:
+        w['view_created'].set_active(False)
+    else:
+        w['view_created'].set_active(True)
+    # updated
+    if self.config.get('updated', True, 'mainlist') == False:
+        w['view_updated'].set_active(False)
+    else:
+        w['view_updated'].set_active(True)
 
     # email reminder
     if self.config.get('use_auth', False, section='mail') == False:
@@ -283,6 +293,16 @@
         c.set('rating', 'True', section='mainlist')
     else:
         c.set('rating', 'False', section='mainlist')
+    # created
+    if w['view_created'].get_active():
+        c.set('created', 'True', section='mainlist')
+    else:
+        c.set('created', 'False', section='mainlist')
+    # updated
+    if w['view_updated'].get_active():
+        c.set('updated', 'True', section='mainlist')
+    else:
+        c.set('updated', 'False', section='mainlist')
 
     # sortby
     if w['sortby'].get_active():

Modified: trunk/lib/widgets.py
===================================================================
--- trunk/lib/widgets.py	2010-09-27 18:59:20 UTC (rev 1448)
+++ trunk/lib/widgets.py	2010-09-29 21:03:04 UTC (rev 1449)
@@ -241,6 +241,8 @@
         'view_year': get('view_year'),
         'view_runtime': get('view_runtime'),
         'view_rating': get('view_rating'),
+        'view_created': get('view_created'),
+        'view_updated': get('view_updated'),
         'rating_image': get('rating_image'),
         'spellchecker': get('spellchecker_pref'),
         'spell_notes': get('spell_notes'),



From mikej06 at mail.berlios.de  Thu Sep 30 21:20:01 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 30 Sep 2010 21:20:01 +0200
Subject: [Griffith-svn] r1450 - in trunk: . lib
Message-ID: <20100930192001.C3647481013@sheep.berlios.de>

Author: mikej06
Date: 2010-09-30 21:20:01 +0200 (Thu, 30 Sep 2010)
New Revision: 1450

Modified:
   trunk/griffith
   trunk/lib/initialize.py
Log:
refactoring code for saving the order of the columns

Modified: trunk/griffith
===================================================================
--- trunk/griffith	2010-09-29 21:03:04 UTC (rev 1449)
+++ trunk/griffith	2010-09-30 19:20:01 UTC (rev 1450)
@@ -1183,42 +1183,8 @@
         columnorder = ''
         delimiter = ''
         for treeview_column in treeview_columns:
-            if treeview_column == self.number_column:
-                columnorder = columnorder + delimiter + 'number'
-                delimiter = ','
-            elif treeview_column == self.image_column:
-                columnorder = columnorder + delimiter + 'image'
-                delimiter = ','
-            elif treeview_column == self.otitle_column:
-                columnorder = columnorder + delimiter + 'otitle'
-                delimiter = ','
-            elif treeview_column == self.title_column:
-                columnorder = columnorder + delimiter + 'title'
-                delimiter = ','
-            elif treeview_column == self.director_column:
-                columnorder = columnorder + delimiter + 'director'
-                delimiter = ','
-            elif treeview_column == self.genre_column:
-                columnorder = columnorder + delimiter + 'genre'
-                delimiter = ','
-            elif treeview_column == self.seen_column:
-                columnorder = columnorder + delimiter + 'seen'
-                delimiter = ','
-            elif treeview_column == self.year_column:
-                columnorder = columnorder + delimiter + 'year'
-                delimiter = ','
-            elif treeview_column == self.runtime_column:
-                columnorder = columnorder + delimiter + 'runtime'
-                delimiter = ','
-            elif treeview_column == self.rating_column:
-                columnorder = columnorder + delimiter + 'rating'
-                delimiter = ','
-            elif treeview_column == self.created_column:
-                columnorder = columnorder + delimiter + 'created'
-                delimiter = ','
-            elif treeview_column == self.updated_column:
-                columnorder = columnorder + delimiter + 'updated'
-                delimiter = ','
+            columnorder = columnorder + delimiter + treeview_column.get_name()
+            delimiter = ','
         self.config.set('columnorder', columnorder, section='mainlist')
         columnsorting = self.treemodel.get_sort_column_id()
         self.config.set('columnsortid', columnsorting[0], section='mainlist')

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2010-09-29 21:03:04 UTC (rev 1449)
+++ trunk/lib/initialize.py	2010-09-30 19:20:01 UTC (rev 1450)
@@ -173,6 +173,7 @@
     # number column
     renderer = gtk.CellRendererText()
     self.number_column = gtk.TreeViewColumn(_('No.'), renderer, text=0)
+    self.number_column.set_name('number')
     self.number_column.set_resizable(True)
     self.number_column.set_sort_column_id(0)
     self.number_column.set_reorderable(True)
@@ -180,12 +181,14 @@
     # pic column
     renderer = gtk.CellRendererPixbuf()
     self.image_column = gtk.TreeViewColumn(_('Image'), renderer, pixbuf=1)
+    self.image_column.set_name('image')
     self.image_column.set_resizable(False)
     self.image_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.image_column)
     # original title column
     renderer = gtk.CellRendererText()
     self.otitle_column = gtk.TreeViewColumn(_('Original Title'), renderer, text=2)
+    self.otitle_column.set_name('otitle')
     self.otitle_column.set_resizable(True)
     self.otitle_column.set_sort_column_id(2)
     self.otitle_column.set_reorderable(True)
@@ -193,6 +196,7 @@
     # title column
     renderer = gtk.CellRendererText()
     self.title_column = gtk.TreeViewColumn(_('Title'), renderer, text=3)
+    self.title_column.set_name('title')
     self.title_column.set_resizable(True)
     self.title_column.set_sort_column_id(3)
     self.title_column.set_reorderable(True)
@@ -200,6 +204,7 @@
     # director column
     renderer = gtk.CellRendererText()
     self.director_column = gtk.TreeViewColumn(_('Director'), renderer, text=4)
+    self.director_column.set_name('director')
     self.director_column.set_sort_column_id(4)
     self.director_column.set_resizable(True)
     self.director_column.set_reorderable(True)
@@ -207,6 +212,7 @@
     # genre column
     renderer = gtk.CellRendererText()
     self.genre_column = gtk.TreeViewColumn(_('Genre'), renderer, text=5)
+    self.genre_column.set_name('genre')
     self.genre_column.set_sort_column_id(5)
     self.genre_column.set_resizable(True)
     self.genre_column.set_reorderable(True)
@@ -214,6 +220,7 @@
     # seen column
     renderer = gtk.CellRendererToggle()
     self.seen_column = gtk.TreeViewColumn(_('Seen it'), renderer, active=6)
+    self.seen_column.set_name('seen')
     self.seen_column.set_sort_column_id(6)
     self.seen_column.set_resizable(True)
     self.seen_column.set_reorderable(True)
@@ -222,6 +229,7 @@
     renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 0.5)
     self.year_column = gtk.TreeViewColumn(_('Year'), renderer, text=7)
+    self.year_column.set_name('year')
     self.year_column.set_sort_column_id(7)
     self.year_column.set_resizable(True)
     self.year_column.set_alignment(0.5)
@@ -231,6 +239,7 @@
     renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 1)
     self.runtime_column = gtk.TreeViewColumn(_('Runtime'), renderer, text=8)
+    self.runtime_column.set_name('runtime')
     self.runtime_column.set_sort_column_id(8)
     self.runtime_column.set_resizable(True)
     self.runtime_column.set_alignment(1)
@@ -240,6 +249,7 @@
     renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 0.5)
     self.rating_column = gtk.TreeViewColumn(_('Rating'), renderer, text=9)
+    self.rating_column.set_name('rating')
     self.rating_column.set_sort_column_id(9)
     self.rating_column.set_resizable(True)
     self.rating_column.set_alignment(0.5)
@@ -249,6 +259,7 @@
     renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 0.5)
     self.created_column = gtk.TreeViewColumn(_('Created'), renderer, text=10)
+    self.created_column.set_name('created')
     self.created_column.set_sort_column_id(10)
     self.created_column.set_resizable(True)
     self.created_column.set_alignment(0.5)
@@ -258,6 +269,7 @@
     renderer = gtk.CellRendererText()
     renderer.set_property('xalign', 0.5)
     self.updated_column = gtk.TreeViewColumn(_('Updated'), renderer, text=11)
+    self.updated_column.set_name('updated')
     self.updated_column.set_sort_column_id(11)
     self.updated_column.set_resizable(True)
     self.updated_column.set_alignment(0.5)
@@ -265,46 +277,14 @@
     self.widgets['treeview'].append_column(self.updated_column)
     # reflect saved column order
     columnorder = self.config.get('columnorder', None, section='mainlist')
-    if not columnorder is None:
+    if columnorder:
+        columnmapping = dict([(column.get_name(), column) for column in self.widgets['treeview'].get_columns()])
         currentcol = None
         columnordersplitted = re.split('[ \t]*,[ \t]*', columnorder)
         for col in columnordersplitted:
-            if col == 'number':
-                self.widgets['treeview'].move_column_after(self.number_column, currentcol)
-                currentcol = self.number_column
-            elif col == 'image':
-                self.widgets['treeview'].move_column_after(self.image_column, currentcol)
-                currentcol = self.image_column
-            elif col == 'otitle':
-                self.widgets['treeview'].move_column_after(self.otitle_column, currentcol)
-                currentcol = self.otitle_column
-            elif col == 'title':
-                self.widgets['treeview'].move_column_after(self.title_column, currentcol)
-                currentcol = self.title_column
-            elif col == 'director':
-                self.widgets['treeview'].move_column_after(self.director_column, currentcol)
-                currentcol = self.director_column
-            elif col == 'genre':
-                self.widgets['treeview'].move_column_after(self.genre_column, currentcol)
-                currentcol = self.genre_column
-            elif col == 'seen':
-                self.widgets['treeview'].move_column_after(self.seen_column, currentcol)
-                currentcol = self.seen_column
-            elif col == 'year':
-                self.widgets['treeview'].move_column_after(self.year_column, currentcol)
-                currentcol = self.year_column
-            elif col == 'runtime':
-                self.widgets['treeview'].move_column_after(self.runtime_column, currentcol)
-                currentcol = self.runtime_column
-            elif col == 'rating':
-                self.widgets['treeview'].move_column_after(self.rating_column, currentcol)
-                currentcol = self.rating_column
-            elif col == 'created':
-                self.widgets['treeview'].move_column_after(self.created_column, currentcol)
-                currentcol = self.created_column
-            elif col == 'updated':
-                self.widgets['treeview'].move_column_after(self.updated_column, currentcol)
-                currentcol = self.updated_column
+            if col in columnmapping:
+                self.widgets['treeview'].move_column_after(columnmapping[col], currentcol)
+                currentcol = columnmapping[col]
     # reflect saved column sorting
     columnsortid = self.config.get('columnsortid', None, section='mainlist')
     columnsortorder = self.config.get('columnsortorder', None, section='mainlist')



From mikej06 at mail.berlios.de  Thu Sep 30 22:29:03 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 30 Sep 2010 22:29:03 +0200
Subject: [Griffith-svn] r1451 - in trunk: . lib
Message-ID: <20100930202903.22D71481013@sheep.berlios.de>

Author: mikej06
Date: 2010-09-30 22:29:02 +0200 (Thu, 30 Sep 2010)
New Revision: 1451

Modified:
   trunk/griffith
   trunk/lib/initialize.py
Log:
saving the width of the columns of the mainlist
enabling/disabling saving of position, state and size of the program window via config file (default for windows is true, others false)

Modified: trunk/griffith
===================================================================
--- trunk/griffith	2010-09-30 19:20:01 UTC (rev 1450)
+++ trunk/griffith	2010-09-30 20:29:02 UTC (rev 1451)
@@ -1168,24 +1168,30 @@
         """Saves main window state"""
         # size should only be saved on microsoft windows systems
         # on other systems the window manager should manage the windows
-        if self.windows and hasattr(self, 'mainwindow_state') and not self.mainwindow_state is None:
-            self.config.set('width',  self.mainwindow_state['width'],  section='window')
-            self.config.set('height', self.mainwindow_state['height'], section='window')
-            self.config.set('left',   self.mainwindow_state['left'],   section='window')
-            self.config.set('top',    self.mainwindow_state['top'],    section='window')
-            if self.mainwindow_state.has_key('state'):
-                self.config.set('state',  self.mainwindow_state['state'],  section='window')
-            else:
-                self.config.set('state',  0,  section='window')
-            self.config.save()
-        # save the order of the columns in the mainlist
+        # but it is possible to active it for other platforms via config file
+        if self.config.get('savelayout', self.windows, section='window'):
+            if hasattr(self, 'mainwindow_state') and not self.mainwindow_state is None:
+                self.config.set('width',  self.mainwindow_state['width'],  section='window')
+                self.config.set('height', self.mainwindow_state['height'], section='window')
+                self.config.set('left',   self.mainwindow_state['left'],   section='window')
+                self.config.set('top',    self.mainwindow_state['top'],    section='window')
+                if self.mainwindow_state.has_key('state'):
+                    self.config.set('state',  self.mainwindow_state['state'],  section='window')
+                else:
+                    self.config.set('state',  0,  section='window')
+                self.config.save()
+        # save the order and size of the columns of the mainlist
         treeview_columns = self.widgets['treeview'].get_columns()
         columnorder = ''
+        columnsizes = ''
         delimiter = ''
         for treeview_column in treeview_columns:
             columnorder = columnorder + delimiter + treeview_column.get_name()
+            columnsizes = columnsizes + delimiter + str(treeview_column.get_width())
             delimiter = ','
         self.config.set('columnorder', columnorder, section='mainlist')
+        self.config.set('columnsizes', columnsizes, section='mainlist')
+        # save sorting
         columnsorting = self.treemodel.get_sort_column_id()
         self.config.set('columnsortid', columnsorting[0], section='mainlist')
         if columnsorting[1] == None:

Modified: trunk/lib/initialize.py
===================================================================
--- trunk/lib/initialize.py	2010-09-30 19:20:01 UTC (rev 1450)
+++ trunk/lib/initialize.py	2010-09-30 20:29:02 UTC (rev 1451)
@@ -275,7 +275,7 @@
     self.updated_column.set_alignment(0.5)
     self.updated_column.set_reorderable(True)
     self.widgets['treeview'].append_column(self.updated_column)
-    # reflect saved column order
+    # reflect saved column order and column sizes
     columnorder = self.config.get('columnorder', None, section='mainlist')
     if columnorder:
         columnmapping = dict([(column.get_name(), column) for column in self.widgets['treeview'].get_columns()])
@@ -285,6 +285,18 @@
             if col in columnmapping:
                 self.widgets['treeview'].move_column_after(columnmapping[col], currentcol)
                 currentcol = columnmapping[col]
+    columnsizes = self.config.get('columnsizes', None, section='mainlist')
+    if columnsizes:
+        columnsizessplitted = re.split('[ \t]*,[ \t]*', columnsizes)
+        currentcol = 0
+        for columnsize in columnsizessplitted:
+            try:
+                columnsize = int(columnsize)
+                self.widgets['treeview'].get_column(currentcol).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
+                self.widgets['treeview'].get_column(currentcol).set_fixed_width(columnsize)
+            except:
+                pass
+            currentcol = currentcol + 1
     # reflect saved column sorting
     columnsortid = self.config.get('columnsortid', None, section='mainlist')
     columnsortorder = self.config.get('columnsortorder', None, section='mainlist')



From mikej06 at mail.berlios.de  Thu Sep 30 22:54:43 2010
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Thu, 30 Sep 2010 22:54:43 +0200
Subject: [Griffith-svn] r1452 - in trunk: . lib
Message-ID: <20100930205443.7F834481013@sheep.berlios.de>

Author: mikej06
Date: 2010-09-30 22:54:43 +0200 (Thu, 30 Sep 2010)
New Revision: 1452

Modified:
   trunk/ChangeLog
   trunk/lib/advfilter.py
Log:
default filter operator changed from equals to contains

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2010-09-30 20:29:02 UTC (rev 1451)
+++ trunk/ChangeLog	2010-09-30 20:54:43 UTC (rev 1452)
@@ -5,6 +5,10 @@
 (c) 2005-2010  Vasco Nunes, Piotr O?arowski
 
 
+2010-09-30  Michael Jahn
+	* saving the width of the columns of the mainlist
+	* default filter operator changed from equals to contains
+
 2010-09-29  Michael Jahn
 	* added fields "created" and "updated" to movie entries
 

Modified: trunk/lib/advfilter.py
===================================================================
--- trunk/lib/advfilter.py	2010-09-30 20:29:02 UTC (rev 1451)
+++ trunk/lib/advfilter.py	2010-09-30 20:54:43 UTC (rev 1452)
@@ -177,7 +177,7 @@
     return True
 
 
-def add_query_widget(container, field_names, sel_qf='title', sel_comm='equals', text=''):
+def add_query_widget(container, field_names, sel_qf='title', sel_comm='contains', text=''):
     hbox = gtk.HBox()
 
     cb = gtk.combo_box_new_text()



