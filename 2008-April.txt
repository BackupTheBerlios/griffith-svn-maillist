From mikej06 at mail.berlios.de  Tue Apr  1 14:58:55 2008
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Tue, 1 Apr 2008 14:58:55 +0200
Subject: [Griffith-svn] r942 - branches/0.9.x
	branches/0.9.x/lib/plugins/export trunk trunk/lib/plugins/export
Message-ID: <200804011258.m31Cwt4P028335@sheep.berlios.de>

Author: mikej06
Date: 2008-04-01 14:58:25 +0200 (Tue, 01 Apr 2008)
New Revision: 942

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/export/PluginExportHTML.py
   trunk/ChangeLog
   trunk/lib/plugins/export/PluginExportHTML.py
Log:
fixed html export if sorted by collection, media, video codec or volume

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2008-03-22 14:45:49 UTC (rev 941)
+++ branches/0.9.x/ChangeLog	2008-04-01 12:58:25 UTC (rev 942)
@@ -4,6 +4,9 @@
 ------------------
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
+2008-04-01  Michael Jahn
+	* fixed html export if sorted by collection, media, video codec or volume
+
 2008-03-15  Michael Jahn
 	* quick filter for loaned-to
 

Modified: branches/0.9.x/lib/plugins/export/PluginExportHTML.py
===================================================================
--- branches/0.9.x/lib/plugins/export/PluginExportHTML.py	2008-03-22 14:45:49 UTC (rev 941)
+++ branches/0.9.x/lib/plugins/export/PluginExportHTML.py	2008-04-01 12:58:25 UTC (rev 942)
@@ -588,12 +588,13 @@
 		
 		# sort order	TODO: more than one sort column
 		sort_columns = []
+		sorting_parts = config['sorting'].split('_')
 		if config['sorting2'] == 'ASC':
 			from sqlalchemy import asc
-			sort_columns.append(asc(self.db.Movie.c[self.fields_as_columns[config['sorting']]]))
+			sort_columns.append(asc(self.db.metadata.tables[sorting_parts[0]].c[sorting_parts[1]]))
 		elif config['sorting2'] == 'DESC':
 			from sqlalchemy import desc
-			sort_columns.append(desc(self.db.Movie.c[self.fields_as_columns[config['sorting']]]))
+			sort_columns.append(desc(self.db.metadata.tables[sorting_parts[0]].c[sorting_parts[1]]))
 
 		statement = select(columns=columns, order_by=sort_columns, from_obj=[media_join, collection_join, volume_join, vcodec_join], use_labels = True)
 

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2008-03-22 14:45:49 UTC (rev 941)
+++ trunk/ChangeLog	2008-04-01 12:58:25 UTC (rev 942)
@@ -4,6 +4,9 @@
 ------------------
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
+2008-04-01  Michael Jahn
+	* fixed html export if sorted by collection, media, video codec or volume
+
 2008-03-22  Piotr O?arowski
 	* Python>=2.4's xml module compatibility added
 

Modified: trunk/lib/plugins/export/PluginExportHTML.py
===================================================================
--- trunk/lib/plugins/export/PluginExportHTML.py	2008-03-22 14:45:49 UTC (rev 941)
+++ trunk/lib/plugins/export/PluginExportHTML.py	2008-04-01 12:58:25 UTC (rev 942)
@@ -588,12 +588,13 @@
 		
 		# sort order	TODO: more than one sort column
 		sort_columns = []
+		sorting_parts = config['sorting'].split('_')
 		if config['sorting2'] == 'ASC':
 			from sqlalchemy import asc
-			sort_columns.append(asc(self.db.Movie.c[self.fields_as_columns[config['sorting']]]))
+			sort_columns.append(asc(self.db.metadata.tables[sorting_parts[0]].c[sorting_parts[1]]))
 		elif config['sorting2'] == 'DESC':
 			from sqlalchemy import desc
-			sort_columns.append(desc(self.db.Movie.c[self.fields_as_columns[config['sorting']]]))
+			sort_columns.append(desc(self.db.metadata.tables[sorting_parts[0]].c[sorting_parts[1]]))
 
 		statement = select(columns=columns, order_by=sort_columns, from_obj=[media_join, collection_join, volume_join, vcodec_join], use_labels = True)
 



From iznogoud at mail.berlios.de  Tue Apr  1 23:23:37 2008
From: iznogoud at mail.berlios.de (iznogoud at BerliOS)
Date: Tue, 1 Apr 2008 23:23:37 +0200
Subject: [Griffith-svn] r944 - branches/griffith_wxpython
Message-ID: <200804012123.m31LNbRN003003@sheep.berlios.de>

Author: iznogoud
Date: 2008-04-01 23:23:37 +0200 (Tue, 01 Apr 2008)
New Revision: 944

Added:
   branches/griffith_wxpython/AddFrame.py
Log:


Added: branches/griffith_wxpython/AddFrame.py
===================================================================
--- branches/griffith_wxpython/AddFrame.py	2008-04-01 21:23:04 UTC (rev 943)
+++ branches/griffith_wxpython/AddFrame.py	2008-04-01 21:23:37 UTC (rev 944)
@@ -0,0 +1,124 @@
+# -*- coding: utf-8 -*-
+# generated by wxGlade 0.6.3 on Wed Mar  5 15:24:35 2008
+
+__revision__ = '$Id: $'
+
+# Copyright (c) 2005-2008 Vasco Nunes, Piotr O?arowski
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Library General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+# You may use and distribute this software under the terms of the
+# GNU General Public License, version 2 or later
+
+import wx
+
+# begin wxGlade: dependencies
+# end wxGlade
+
+# begin wxGlade: extracode
+
+# end wxGlade
+
+class AddFrame(wx.Frame):
+    def __init__(self, *args, **kwds):
+        # begin wxGlade: AddFrame.__init__
+        kwds["style"] = wx.DEFAULT_FRAME_STYLE
+        wx.Frame.__init__(self, *args, **kwds)
+        self.notebook_2 = wx.Notebook(self, -1, style=0)
+        self.film_information = wx.Panel(self.notebook_2, -1)
+        self.label_2 = wx.StaticText(self.film_information, -1, _("Type in the original film title, select source and choose\nGet from web. Griffith will try to fetch all the related\ninformation from web."), style=wx.ALIGN_CENTRE)
+        self.o_title_txt = wx.StaticText(self.film_information, -1, _("Original Title"))
+        self.o_title = wx.TextCtrl(self.film_information, -1, "")
+        self.label_3 = wx.StaticText(self.film_information, -1, _("Title"))
+        self.title = wx.TextCtrl(self.film_information, -1, "")
+        self.static_line_1 = wx.StaticLine(self.film_information, -1)
+        self.rating = wx.StaticText(self.film_information, -1, _("Rating"))
+        self.slider_1 = wx.Slider(self.film_information, -1, 0, 0, 10, style=wx.SL_HORIZONTAL|wx.SL_AUTOTICKS)
+        self.poster = wx.BitmapButton(self.film_information, -1, wx.NullBitmap)
+        self.search = wx.Button(self.film_information, -1, _("Search"))
+        self.fill_empty = wx.CheckBox(self.film_information, -1, _("Fill empty field only"))
+        self.cancel = wx.Button(self.film_information, -1, _("Cancel"))
+        self.add = wx.Button(self.film_information, -1, _("Add movie"))
+        self.add_close = wx.Button(self.film_information, -1, _("Add film and close"))
+        self.clear = wx.Button(self.film_information, -1, _("Clear"))
+        self.details = wx.Panel(self.notebook_2, -1)
+
+        self.__set_properties()
+        self.__do_layout()
+        # end wxGlade
+
+    def __set_properties(self):
+        # begin wxGlade: AddFrame.__set_properties
+        self.SetTitle(_("Add a new film"))
+        self.SetFocus()
+        self.o_title.SetMinSize((245, -1))
+        self.title.SetMinSize((300, -1))
+        self.poster.SetMinSize((150, 200))
+        # end wxGlade
+
+    def __do_layout(self):
+        # begin wxGlade: AddFrame.__do_layout
+        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
+        sizer_8 = wx.BoxSizer(wx.VERTICAL)
+        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
+        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
+        sizer_11 = wx.BoxSizer(wx.VERTICAL)
+        sizer_12 = wx.BoxSizer(wx.VERTICAL)
+        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
+        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
+        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
+        sizer_7.Add((10, 0), 0, 0, 0)
+        sizer_12.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
+        sizer_12.Add((0, 20), 0, 0, 0)
+        sizer_13.Add(self.o_title_txt, 0, 0, 0)
+        sizer_13.Add((10, 0), 0, 0, 0)
+        sizer_13.Add(self.o_title, 0, 0, 0)
+        sizer_12.Add(sizer_13, 0, wx.EXPAND, 0)
+        sizer_12.Add((0, 20), 0, 0, 0)
+        sizer_14.Add(self.label_3, 0, 0, 0)
+        sizer_14.Add((10, 0), 0, 0, 0)
+        sizer_14.Add(self.title, 0, 0, 0)
+        sizer_12.Add(sizer_14, 0, wx.EXPAND, 0)
+        sizer_12.Add((0, 20), 0, 0, 0)
+        sizer_12.Add(self.static_line_1, 0, wx.EXPAND, 0)
+        sizer_12.Add((0, 20), 0, 0, 0)
+        sizer_15.Add(self.rating, 0, 0, 0)
+        sizer_15.Add(self.slider_1, 0, 0, 0)
+        sizer_12.Add(sizer_15, 0, wx.EXPAND, 0)
+        sizer_9.Add(sizer_12, 0, wx.EXPAND, 0)
+        sizer_11.Add(self.poster, 0, wx.ALIGN_RIGHT, 0)
+        sizer_11.Add(self.search, 0, wx.EXPAND, 0)
+        sizer_11.Add(self.fill_empty, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
+        sizer_11.Add((0, 10), 0, 0, 0)
+        sizer_9.Add(sizer_11, 1, wx.EXPAND, 0)
+        sizer_8.Add(sizer_9, 0, wx.EXPAND, 0)
+        sizer_10.Add(self.cancel, 0, 0, 0)
+        sizer_10.Add(self.add, 0, 0, 0)
+        sizer_10.Add(self.add_close, 0, 0, 0)
+        sizer_10.Add(self.clear, 0, 0, 0)
+        sizer_8.Add(sizer_10, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
+        sizer_8.Add((0, 10), 0, 0, 0)
+        self.film_information.SetSizer(sizer_8)
+        self.notebook_2.AddPage(self.film_information, _("Film information"))
+        self.notebook_2.AddPage(self.details, _("Details"))
+        sizer_7.Add(self.notebook_2, 1, wx.EXPAND, 0)
+        sizer_7.Add((10, 0), 0, 0, 0)
+        self.SetSizer(sizer_7)
+        sizer_7.Fit(self)
+        self.Layout()
+        self.Centre()
+        # end wxGlade
+
+# end of class AddFrame
\ No newline at end of file



From piotrek at mail.berlios.de  Thu Apr  3 22:31:20 2008
From: piotrek at mail.berlios.de (piotrek at BerliOS)
Date: Thu, 3 Apr 2008 22:31:20 +0200
Subject: [Griffith-svn] r945 - trunk/po
Message-ID: <200804032031.m33KVK4J023533@sheep.berlios.de>

Author: piotrek
Date: 2008-04-03 22:31:20 +0200 (Thu, 03 Apr 2008)
New Revision: 945

Modified:
   trunk/po/ru.po
Log:
s/?\208?\162?\208?\190?\208?\188/?\208?\147?\209?\128?\208?\190?\208?\188?\208?\186?\208?\190?\209?\129?\209?\130?\209?\140 (closes: 211439)


Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2008-04-01 21:23:37 UTC (rev 944)
+++ trunk/po/ru.po	2008-04-03 20:31:20 UTC (rev 945)
@@ -659,7 +659,7 @@
 #: ../lib/initialize.py:617 ../lib/plugins/export/PluginExportHTML.py:162
 #: ../glade/griffith.glade.h:158
 msgid "Volume"
-msgstr "???"
+msgstr "?????????"
 
 #: ../lib/initialize.py:619 ../lib/initialize.py:620 ../lib/initialize.py:622
 #: ../lib/initialize.py:816 ../lib/initialize.py:817 ../lib/initialize.py:848



From mikej06 at mail.berlios.de  Sat Apr 12 16:03:58 2008
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Sat, 12 Apr 2008 16:03:58 +0200
Subject: [Griffith-svn] r946 - branches/0.9.x
	branches/0.9.x/lib/plugins/movie trunk trunk/lib/plugins/movie
Message-ID: <200804121403.m3CE3w1d026091@sheep.berlios.de>

Author: mikej06
Date: 2008-04-12 16:03:43 +0200 (Sat, 12 Apr 2008)
New Revision: 946

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py
   trunk/ChangeLog
   trunk/lib/plugins/movie/PluginMovieOFDb.py
Log:
updated OFDb plugin

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2008-04-03 20:31:20 UTC (rev 945)
+++ branches/0.9.x/ChangeLog	2008-04-12 14:03:43 UTC (rev 946)
@@ -4,6 +4,9 @@
 ------------------
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
+2008-04-13  Michael Jahn
+	* updated OFDb plugin
+
 2008-04-01  Michael Jahn
 	* fixed html export if sorted by collection, media, video codec or volume
 

Modified: branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py
===================================================================
--- branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py	2008-04-03 20:31:20 UTC (rev 945)
+++ branches/0.9.x/lib/plugins/movie/PluginMovieOFDb.py	2008-04-12 14:03:43 UTC (rev 946)
@@ -17,13 +17,13 @@
 plugin_language = _("German")
 plugin_author = "Christian Sagmueller, Jessica Katharina Parth"
 plugin_author_email = "Jessica.K.P at women-at-work.org"
-plugin_version = "0.8"
+plugin_version = "0.9"
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode='iso-8859-1'
+		self.encode='utf-8'
 		self.movie_id = id
-		self.url = "http://www.ofdb.de/view.php?page=film&fid=%s" % str(self.movie_id)
+		self.url = "http://www.ofdb.de/%s" % str(self.movie_id)
 
 	def initialize(self):
 		# OFDb didn't provide the runtime, studio and classification but it provide a link to the german imdb entry
@@ -35,12 +35,12 @@
 			self.imdb_page = ''
 
 	def get_image(self):
-		self.image_url = "http://www.ofdb.de/images/film/" + gutils.trim( self.page, "<img src=\"images/film/", "\"" )
+		self.image_url = "http://img.ofdb.de/film/" + gutils.trim(self.page, 'img src="http://img.ofdb.de/film/', '"' )
 		
 	def get_o_title(self):
-		self.o_title = gutils.trim(self.page, 'Originaltitel:', '</tr>')
+		self.o_title = gutils.clean(gutils.trim(self.page, 'Originaltitel:', '</tr>'))
 		if self.o_title == '':
-			self.o_title = gutils.trim(self.page,'size="3"><b>','<')
+			self.o_title = string.replace(self.o_title, '&nbsp;', '' )
 
 	def get_title(self):
 		self.title = gutils.trim(self.page,'size="3"><b>','<')
@@ -49,8 +49,9 @@
 		self.director = gutils.trim(self.page,"Regie: ","</a><br>")
 
 	def get_plot(self):
-		storyid = self.regextrim(self.page, '([?]|[&])sid=', '(">|[&])')
-		story_page = self.open_page(url="http://www.ofdb.de/view.php?page=inhalt&fid=%s&sid=%s" % (str(self.movie_id),storyid))
+		storyid = self.regextrim(self.page, '<a href="plot/', '(">|[&])')
+		if not storyid is None:
+			story_page = self.open_page(url="http://www.ofdb.de/plot/%s" % (storyid))
 		self.plot = gutils.trim(story_page, "</b><br><br>","</")
 
 	def get_year(self):
@@ -71,7 +72,9 @@
 
 	def get_cast(self):
 		self.cast = ''
-		cast_page = self.open_page(url="http://www.ofdb.de/view.php?page=film_detail&fid=%s" % str(self.movie_id) )
+		movie_id_elements = string.split(self.movie_id, ',')
+		movie_id_elements[0] = string.replace(movie_id_elements[0], "film/", "")
+		cast_page = self.open_page(url="http://www.ofdb.de/view.php?page=film_detail&fid=%s" % str(movie_id_elements[0]) )
 		self.cast = gutils.trim(cast_page, 'Darsteller</i>', '</table>')
 		self.cast = re.sub('(\n|\t|&nbsp;)', '', self.cast)
 		self.cast = string.replace(self.cast, '\t', '')
@@ -92,7 +95,7 @@
 		self.o_site = ""
 
 	def get_site(self):
-		self.site = "http://www.ofdb.de/view.php?page=film&fid=" + str(self.movie_id)
+		self.site = self.url
 
 	def get_trailer(self):
 		self.trailer = ""
@@ -121,9 +124,9 @@
 
 class SearchPlugin(movie.SearchMovie):
 	def __init__(self):
-		self.original_url_search    = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=Titel&SText="
-		self.translated_url_search    = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=Titel&SText="
-		self.encode='iso-8859-1'
+		self.original_url_search   = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=OTitel&SText="
+		self.translated_url_search = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=DTitel&SText="
+		self.encode='utf-8'
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
@@ -138,10 +141,15 @@
 
 		if (elements[0]<>''):
 			for element in elements:
-				elementid = gutils.digits_only( gutils.trim(element,'<a href="view.php?page=film&fid=','">') )
-				if elementid != 0:
+				elementid = gutils.trim(element,'<a href="','"')
+				if not elementid is None:
 					self.ids.append(elementid)
-					self.titles.append(gutils.trim(element,'">', '</a>'))
+					elementname = gutils.clean(element)
+					p1 = string.find(elementname, '>')
+					if p1 == -1:
+						self.titles.append(elementname)
+					else:
+						self.titles.append(elementname[p1+1:])
 
 #
 # Plugin Test
@@ -166,7 +174,7 @@
 	#        * or the expected value
 	#
 	test_configuration = {
-		'103013' : { 
+		'film/103013,Rocky%20Balboa' : { 
 			'title' 			: 'Rocky Balboa',
 			'o_title' 			: 'Rocky Balboa',
 			'director'			: 'Sylvester Stallone',
@@ -200,7 +208,7 @@
 Jody Giambelluca\n\
 Frank Stallone\n\
 Fran Pultro\n\
-Michael Buffer\n\
+Michael Buffer as Ring Announcer\n\
 Jack Lazzarado\n\
 Marc Ratner\n\
 Anthony Lato Jr.\n\
@@ -232,7 +240,7 @@
 			'classification'	: False,
 			'studio'			: 'Metro-Goldwyn-Mayer (MGM)',
 			'o_site'			: False,
-			'site'				: 'http://www.ofdb.de/view.php?page=film&fid=103013',
+			'site'				: 'http://www.ofdb.de/film/103013,Rocky%20Balboa',
 			'trailer'			: False,
 			'year'				: 2006,
 			'notes'				: False,
@@ -240,7 +248,7 @@
 			'image'				: True,
 			'rating'			: 8
 		},
-		'22489' : { 
+		'film/22489,Ein-Gl%C3%BCckliches-Jahr' : { 
 			'title' 			: 'Gl?ckliches Jahr, Ein',
 			'o_title' 			: 'Bonne ann?e, La',
 			'director'			: 'Claude Lelouch',
@@ -272,7 +280,7 @@
 			'classification'	: False,
 			'studio'			: 'Les Films 13',
 			'o_site'			: False,
-			'site'				: 'http://www.ofdb.de/view.php?page=film&fid=22489',
+			'site'				: 'http://www.ofdb.de/film/22489,Ein-Gl%C3%BCckliches-Jahr',
 			'trailer'			: False,
 			'year'				: 1973,
 			'notes'				: False,
@@ -280,7 +288,7 @@
 			'image'				: True,
 			'rating'			: 7
 		},
-		'54088' : { 
+		'film/54088,Arahan' : { 
 			'title' 			: 'Arahan',
 			'o_title' 			: 'Arahan jangpung daejakjeon',
 			'director'			: 'Ryoo Seung-wan',
@@ -308,7 +316,7 @@
 			'classification'	: '16',
 			'studio'			: 'Fun and Happiness',
 			'o_site'			: False,
-			'site'				: 'http://www.ofdb.de/view.php?page=film&fid=54088',
+			'site'				: 'http://www.ofdb.de/film/54088,Arahan',
 			'trailer'			: False,
 			'year'				: 2004,
 			'notes'				: False,

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2008-04-03 20:31:20 UTC (rev 945)
+++ trunk/ChangeLog	2008-04-12 14:03:43 UTC (rev 946)
@@ -4,6 +4,9 @@
 ------------------
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
+2008-04-13  Michael Jahn
+	* updated OFDb plugin
+
 2008-04-01  Michael Jahn
 	* fixed html export if sorted by collection, media, video codec or volume
 

Modified: trunk/lib/plugins/movie/PluginMovieOFDb.py
===================================================================
--- trunk/lib/plugins/movie/PluginMovieOFDb.py	2008-04-03 20:31:20 UTC (rev 945)
+++ trunk/lib/plugins/movie/PluginMovieOFDb.py	2008-04-12 14:03:43 UTC (rev 946)
@@ -17,13 +17,13 @@
 plugin_language = _("German")
 plugin_author = "Christian Sagmueller, Jessica Katharina Parth"
 plugin_author_email = "Jessica.K.P at women-at-work.org"
-plugin_version = "0.8"
+plugin_version = "0.9"
 
 class Plugin(movie.Movie):
 	def __init__(self, id):
-		self.encode='iso-8859-1'
+		self.encode='utf-8'
 		self.movie_id = id
-		self.url = "http://www.ofdb.de/view.php?page=film&fid=%s" % str(self.movie_id)
+		self.url = "http://www.ofdb.de/%s" % str(self.movie_id)
 
 	def initialize(self):
 		# OFDb didn't provide the runtime, studio and classification but it provide a link to the german imdb entry
@@ -35,12 +35,12 @@
 			self.imdb_page = ''
 
 	def get_image(self):
-		self.image_url = "http://www.ofdb.de/images/film/" + gutils.trim( self.page, "<img src=\"images/film/", "\"" )
+		self.image_url = "http://img.ofdb.de/film/" + gutils.trim(self.page, 'img src="http://img.ofdb.de/film/', '"' )
 		
 	def get_o_title(self):
-		self.o_title = gutils.trim(self.page, 'Originaltitel:', '</tr>')
+		self.o_title = gutils.clean(gutils.trim(self.page, 'Originaltitel:', '</tr>'))
 		if self.o_title == '':
-			self.o_title = gutils.trim(self.page,'size="3"><b>','<')
+			self.o_title = string.replace(self.o_title, '&nbsp;', '' )
 
 	def get_title(self):
 		self.title = gutils.trim(self.page,'size="3"><b>','<')
@@ -49,8 +49,9 @@
 		self.director = gutils.trim(self.page,"Regie: ","</a><br>")
 
 	def get_plot(self):
-		storyid = self.regextrim(self.page, '([?]|[&])sid=', '(">|[&])')
-		story_page = self.open_page(url="http://www.ofdb.de/view.php?page=inhalt&fid=%s&sid=%s" % (str(self.movie_id),storyid))
+		storyid = self.regextrim(self.page, '<a href="plot/', '(">|[&])')
+		if not storyid is None:
+			story_page = self.open_page(url="http://www.ofdb.de/plot/%s" % (storyid))
 		self.plot = gutils.trim(story_page, "</b><br><br>","</")
 
 	def get_year(self):
@@ -71,7 +72,9 @@
 
 	def get_cast(self):
 		self.cast = ''
-		cast_page = self.open_page(url="http://www.ofdb.de/view.php?page=film_detail&fid=%s" % str(self.movie_id) )
+		movie_id_elements = string.split(self.movie_id, ',')
+		movie_id_elements[0] = string.replace(movie_id_elements[0], "film/", "")
+		cast_page = self.open_page(url="http://www.ofdb.de/view.php?page=film_detail&fid=%s" % str(movie_id_elements[0]) )
 		self.cast = gutils.trim(cast_page, 'Darsteller</i>', '</table>')
 		self.cast = re.sub('(\n|\t|&nbsp;)', '', self.cast)
 		self.cast = string.replace(self.cast, '\t', '')
@@ -92,7 +95,7 @@
 		self.o_site = ""
 
 	def get_site(self):
-		self.site = "http://www.ofdb.de/view.php?page=film&fid=" + str(self.movie_id)
+		self.site = self.url
 
 	def get_trailer(self):
 		self.trailer = ""
@@ -121,9 +124,9 @@
 
 class SearchPlugin(movie.SearchMovie):
 	def __init__(self):
-		self.original_url_search    = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=Titel&SText="
-		self.translated_url_search    = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=Titel&SText="
-		self.encode='iso-8859-1'
+		self.original_url_search   = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=OTitel&SText="
+		self.translated_url_search = "http://www.ofdb.de/view.php?page=suchergebnis&Kat=DTitel&SText="
+		self.encode='utf-8'
 
 	def search(self,parent_window):
 		self.open_search(parent_window)
@@ -138,10 +141,15 @@
 
 		if (elements[0]<>''):
 			for element in elements:
-				elementid = gutils.digits_only( gutils.trim(element,'<a href="view.php?page=film&fid=','">') )
-				if elementid != 0:
+				elementid = gutils.trim(element,'<a href="','"')
+				if not elementid is None:
 					self.ids.append(elementid)
-					self.titles.append(gutils.trim(element,'">', '</a>'))
+					elementname = gutils.clean(element)
+					p1 = string.find(elementname, '>')
+					if p1 == -1:
+						self.titles.append(elementname)
+					else:
+						self.titles.append(elementname[p1+1:])
 
 #
 # Plugin Test
@@ -166,7 +174,7 @@
 	#        * or the expected value
 	#
 	test_configuration = {
-		'103013' : { 
+		'film/103013,Rocky%20Balboa' : { 
 			'title' 			: 'Rocky Balboa',
 			'o_title' 			: 'Rocky Balboa',
 			'director'			: 'Sylvester Stallone',
@@ -200,7 +208,7 @@
 Jody Giambelluca\n\
 Frank Stallone\n\
 Fran Pultro\n\
-Michael Buffer\n\
+Michael Buffer as Ring Announcer\n\
 Jack Lazzarado\n\
 Marc Ratner\n\
 Anthony Lato Jr.\n\
@@ -232,7 +240,7 @@
 			'classification'	: False,
 			'studio'			: 'Metro-Goldwyn-Mayer (MGM)',
 			'o_site'			: False,
-			'site'				: 'http://www.ofdb.de/view.php?page=film&fid=103013',
+			'site'				: 'http://www.ofdb.de/film/103013,Rocky%20Balboa',
 			'trailer'			: False,
 			'year'				: 2006,
 			'notes'				: False,
@@ -240,7 +248,7 @@
 			'image'				: True,
 			'rating'			: 8
 		},
-		'22489' : { 
+		'film/22489,Ein-Gl%C3%BCckliches-Jahr' : { 
 			'title' 			: 'Gl?ckliches Jahr, Ein',
 			'o_title' 			: 'Bonne ann?e, La',
 			'director'			: 'Claude Lelouch',
@@ -272,7 +280,7 @@
 			'classification'	: False,
 			'studio'			: 'Les Films 13',
 			'o_site'			: False,
-			'site'				: 'http://www.ofdb.de/view.php?page=film&fid=22489',
+			'site'				: 'http://www.ofdb.de/film/22489,Ein-Gl%C3%BCckliches-Jahr',
 			'trailer'			: False,
 			'year'				: 1973,
 			'notes'				: False,
@@ -280,7 +288,7 @@
 			'image'				: True,
 			'rating'			: 7
 		},
-		'54088' : { 
+		'film/54088,Arahan' : { 
 			'title' 			: 'Arahan',
 			'o_title' 			: 'Arahan jangpung daejakjeon',
 			'director'			: 'Ryoo Seung-wan',
@@ -308,7 +316,7 @@
 			'classification'	: '16',
 			'studio'			: 'Fun and Happiness',
 			'o_site'			: False,
-			'site'				: 'http://www.ofdb.de/view.php?page=film&fid=54088',
+			'site'				: 'http://www.ofdb.de/film/54088,Arahan',
 			'trailer'			: False,
 			'year'				: 2004,
 			'notes'				: False,



From mikej06 at mail.berlios.de  Fri Apr 25 00:28:09 2008
From: mikej06 at mail.berlios.de (mikej06 at mail.berlios.de)
Date: Fri, 25 Apr 2008 00:28:09 +0200
Subject: [Griffith-svn] r947 - branches/0.9.x branches/0.9.x/lib trunk
	trunk/lib
Message-ID: <200804242228.m3OMS9Pi027087@sheep.berlios.de>

Author: mikej06
Date: 2008-04-25 00:27:42 +0200 (Fri, 25 Apr 2008)
New Revision: 947

Modified:
   branches/0.9.x/ChangeLog
   branches/0.9.x/lib/amazon.py
   branches/0.9.x/lib/edit.py
   trunk/ChangeLog
   trunk/lib/amazon.py
   trunk/lib/edit.py
Log:
fixed fetching posters from Amazon 
(it is not a patch for the full amazon api. it only fixes the function which is used by griffith.)

Modified: branches/0.9.x/ChangeLog
===================================================================
--- branches/0.9.x/ChangeLog	2008-04-12 14:03:43 UTC (rev 946)
+++ branches/0.9.x/ChangeLog	2008-04-24 22:27:42 UTC (rev 947)
@@ -4,6 +4,9 @@
 ------------------
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
+2008-04-25  Michael Jahn
+	* fixed fetching posters from Amazon 
+
 2008-04-13  Michael Jahn
 	* updated OFDb plugin
 

Modified: branches/0.9.x/lib/amazon.py
===================================================================
--- branches/0.9.x/lib/amazon.py	2008-04-12 14:03:43 UTC (rev 946)
+++ branches/0.9.x/lib/amazon.py	2008-04-24 22:27:42 UTC (rev 947)
@@ -103,10 +103,12 @@
     (lambda key: _contentsOf(_getScriptDir(), _amazonfile2), '%s in the amazon.py directory' % _amazonfile2)
     )
 _supportedLocales = {
-        "us" : (None, "xml.amazon.com"),   
-        "uk" : ("uk", "xml-eu.amazon.com"),
-        "de" : ("de", "xml-eu.amazon.com"),
-        "jp" : ("jp", "xml.amazon.co.jp")
+        "us" : (None, "ecs.amazonaws.com/onca/xml?Service=AWSECommerceService"),   
+        "uk" : ("uk", "ecs.amazonaws.co.uk/onca/xml?Service=AWSECommerceService"),
+        "de" : ("de", "ecs.amazonaws.de/onca/xml?Service=AWSECommerceService"),
+        "ca" : ("ca", "ecs.amazonaws.ca/onca/xml?Service=AWSECommerceService"),
+        "fr" : ("fr", "ecs.amazonaws.fr/onca/xml?Service=AWSECommerceService"),
+        "jp" : ("jp", "ecs.amazonaws.jp/onca/xml?Service=AWSECommerceService")
     }
 
 ## administrative functions
@@ -220,24 +222,25 @@
 
 def buildURL(search_type, keyword, product_line, type, page, license_key, locale, associate):
     _checkLocaleSupported(locale)
-    url = "http://" + _supportedLocales[locale][1] + "/onca/xml3?f=xml"
-    url += "&t=%s" % associate
-    url += "&dev-t=%s" % license_key.strip()
-    url += "&type=%s" % type
-    if _supportedLocales[locale][0]:
-        url += "&locale=%s" % _supportedLocales[locale][0]
-    if page:
-        url += "&page=%s" % page
+    url = "http://" + _supportedLocales[locale][1]
+    url += "&AssociateTag=%s" % associate
+    url += "&AWSAccessKeyId=%s" % license_key.strip()
+    url += "&ResponseGroup=%s" % type
+    #if _supportedLocales[locale][0]:
+    #    url += "&locale=%s" % _supportedLocales[locale][0]
+    #if page:
+    #    url += "&page=%s" % page
     if product_line:
-        url += "&mode=%s" % product_line
-    url += "&%s=%s" % (search_type, urllib.quote(keyword))
+        url += "&SearchIndex=%s" % product_line
+    url += "&Operation=%s" % search_type
+    url += "&Keywords=%s" % urllib.quote(keyword)
     return url
 
 
 ## main functions
 
 
-def search(search_type, keyword, product_line, type = "heavy", page = None,
+def search(search_type, keyword, product_line, type = "Large", page = None,
            license_key=None, http_proxy = None, locale = None, associate = None):
     """search Amazon
 
@@ -300,66 +303,64 @@
     if search_type == "BlendedSearch":
         data = unmarshal(xmldoc).BlendedSearch
     else:    
-        data = unmarshal(xmldoc).ProductInfo        
+        data = unmarshal(xmldoc).ItemSearchResponse        
         
-    if hasattr(data, 'ErrorMsg'):
-        raise AmazonError, data.ErrorMsg
+    if hasattr(data, 'Error'):
+        raise AmazonError, data.Error
     else:
         if search_type == "BlendedSearch":
-            # a list of ProductLine containing a list of ProductInfo
-            # containing a list of Details.
             return data 
         else:            
-            return data.Details
+            return data.Items
 
-def searchByKeyword(keyword, product_line="books", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    return search("KeywordSearch", keyword, product_line, type, page, license_key, http_proxy, locale, associate)
+def searchByKeyword(keyword, product_line="Books", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    return search("ItemSearch", keyword, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def browseBestSellers(browse_node, product_line="books", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def browseBestSellers(browse_node, product_line="Books", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("BrowseNodeSearch", browse_node, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByASIN(ASIN, type="heavy", license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByASIN(ASIN, type="Large", license_key=None, http_proxy=None, locale=None, associate=None):
     return search("AsinSearch", ASIN, None, type, None, license_key, http_proxy, locale, associate)
 
-def searchByUPC(UPC, type="heavy", license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByUPC(UPC, type="Large", license_key=None, http_proxy=None, locale=None, associate=None):
     return search("UpcSearch", UPC, None, type, None, license_key, http_proxy, locale, associate)
 
-def searchByAuthor(author, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    return search("AuthorSearch", author, "books", type, page, license_key, http_proxy, locale, associate)
+def searchByAuthor(author, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    return search("AuthorSearch", author, "Books", type, page, license_key, http_proxy, locale, associate)
 
-def searchByArtist(artist, product_line="music", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByArtist(artist, product_line="Music", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     if product_line not in ("music", "classical"):
-        raise AmazonError, "product_line must be in ('music', 'classical')"
+        raise AmazonError, "product_line must be in ('Music', 'Classical')"
     return search("ArtistSearch", artist, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByActor(actor, product_line="dvd", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    if product_line not in ("dvd", "vhs", "video"):
-        raise AmazonError, "product_line must be in ('dvd', 'vhs', 'video')"
+def searchByActor(actor, product_line="DVD", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    if product_line not in ("DVD", "VHS", "Video"):
+        raise AmazonError, "product_line must be in ('DVD', 'VHS', 'Video')"
     return search("ActorSearch", actor, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByDirector(director, product_line="dvd", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    if product_line not in ("dvd", "vhs", "video"):
-        raise AmazonError, "product_line must be in ('dvd', 'vhs', 'video')"
+def searchByDirector(director, product_line="DVD", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    if product_line not in ("DVD", "VHS", "Video"):
+        raise AmazonError, "product_line must be in ('DVD', 'VHS', 'Video')"
     return search("DirectorSearch", director, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByManufacturer(manufacturer, product_line="pc-hardware", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByManufacturer(manufacturer, product_line="pc-hardware", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     if product_line not in ("electronics", "kitchen", "videogames", "software", "photo", "pc-hardware"):
         raise AmazonError, "product_line must be in ('electronics', 'kitchen', 'videogames', 'software', 'photo', 'pc-hardware')"
     return search("ManufacturerSearch", manufacturer, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByListMania(listManiaID, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByListMania(listManiaID, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("ListManiaSearch", listManiaID, None, type, page, license_key, http_proxy, locale, associate)
 
-def searchSimilar(ASIN, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchSimilar(ASIN, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("SimilaritySearch", ASIN, None, type, page, license_key, http_proxy, locale, associate)
 
-def searchByWishlist(wishlistID, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByWishlist(wishlistID, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("WishlistSearch", wishlistID, None, type, page, license_key, http_proxy, locale, associate)
 
-def searchByPower(keyword, product_line="books", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByPower(keyword, product_line="Books", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("PowerSearch", keyword, product_line, type, page, license_key, http_proxy, locale, associate)
     # >>> RecentKing = amazon.searchByPower('author:Stephen King and pubdate:2003')
     # >>> SnowCrash = amazon.searchByPower('title:Snow Crash')
 
-def searchByBlended(keyword, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByBlended(keyword, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("BlendedSearch", keyword, None, type, page, license_key, http_proxy, locale, associate)

Modified: branches/0.9.x/lib/edit.py
===================================================================
--- branches/0.9.x/lib/edit.py	2008-04-12 14:03:43 UTC (rev 946)
+++ branches/0.9.x/lib/edit.py	2008-04-24 22:27:42 UTC (rev 947)
@@ -131,19 +131,20 @@
 	amazon.setLicense("04GDDMMXX8X9CJ1B22G2")
 
 	locale = self.config.get('amazon_locale', 0, section='add')
-	if locale == 1:
+	keyword = self.widgets['movie']['o_title'].get_text()
+	if locale == '1':
 		locale = 'uk'
-	elif locale == 2:
+	elif locale == '2':
 		locale = 'de'
-	elif locale == 3:
+		keyword = self.widgets['movie']['title'].get_text()
+	elif locale == '3':
 		locale = 'uk'
 	else:
 		locale = None
 
 	try:
-		result = amazon.searchByKeyword(self.widgets['movie']['o_title'].get_text(), \
-						type="lite", product_line="dvd", locale=locale)
-		self.debug.show("Posters found on amazon: %s posters" % len(result))
+		result = amazon.searchByKeyword(keyword, type="Large", product_line="DVD", locale=locale)
+		self.debug.show("Posters found on amazon: %s posters" % result.TotalResults)
 	except:
 		gutils.warning(self, _("No posters found for this movie."))
 		return
@@ -151,23 +152,23 @@
 	from widgets import connect_poster_signals, reconnect_add_signals
 	connect_poster_signals(self, get_poster_select_dc, result, current_poster)
 
-	if not len(result):
+	if not len(result.Item):
 		gutils.warning(self, _("No posters found for this movie."))
 		reconnect_add_signals(self)
 		return
 
-	for f in range(len(result)):
-		if self.widgets['movie']['o_title'].get_text() == result[f].ProductName:
+	for f in range(len(result.Item)):
+		if self.widgets['movie']['o_title'].get_text() == result.Item[f].ItemAttributes.Title:
 			get_poster(self, f, result, current_poster)
 			return
 
 	self.treemodel_results.clear()
 	self.widgets['add']['b_get_from_web'].set_sensitive(False) # disable movie plugins (result window is shared)
 
-	for f in range(len(result)):
+	for f in range(len(result.Item)):
 
-		if (len(result[f].ImageUrlLarge)):
-			title = result[f].ProductName
+		if (len(result.Item[f].LargeImage.URL)):
+			title = result.Item[f].ItemAttributes.Title
 			myiter = self.treemodel_results.insert_before(None, None)
 			self.treemodel_results.set_value(myiter, 0, str(f))
 			self.treemodel_results.set_value(myiter, 1, title)
@@ -195,10 +196,10 @@
 	file_to_copy = tempfile.mktemp(suffix=self.widgets['movie']['number'].get_text(), \
 		dir=self.locations['temp'])
 	file_to_copy += ".jpg"
-	if len(result[f].ImageUrlLarge):
+	if len(result.Item[f].LargeImage.URL):
 		try:
 			progress = movie.Progress(self.widgets['window'],_("Fetching poster"),_("Wait a moment"))
-			retriever = movie.Retriever(result[f].ImageUrlLarge, self.widgets['window'], progress, file_to_copy)
+			retriever = movie.Retriever(result.Item[f].LargeImage.URL, self.widgets['window'], progress, file_to_copy)
 			retriever.start()
 			while retriever.isAlive():
 				progress.pulse()
@@ -219,7 +220,7 @@
 
 		if im.size == (1,1):
 			from urllib import FancyURLopener, urlretrieve
-			url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result[f].Asin).read()
+			url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result.Item[f].ASIN).read()
 			if url.find('no-img-sm._V47056216_.gif') > 0:
 				self.debug.show('No image available')
 				gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2008-04-12 14:03:43 UTC (rev 946)
+++ trunk/ChangeLog	2008-04-24 22:27:42 UTC (rev 947)
@@ -4,6 +4,9 @@
 ------------------
 (c) 2005-2008  Vasco Nunes, Piotr O?arowski
 
+2008-04-25  Michael Jahn
+	* fixed fetching posters from Amazon 
+
 2008-04-13  Michael Jahn
 	* updated OFDb plugin
 

Modified: trunk/lib/amazon.py
===================================================================
--- trunk/lib/amazon.py	2008-04-12 14:03:43 UTC (rev 946)
+++ trunk/lib/amazon.py	2008-04-24 22:27:42 UTC (rev 947)
@@ -103,10 +103,12 @@
     (lambda key: _contentsOf(_getScriptDir(), _amazonfile2), '%s in the amazon.py directory' % _amazonfile2)
     )
 _supportedLocales = {
-        "us" : (None, "xml.amazon.com"),   
-        "uk" : ("uk", "xml-eu.amazon.com"),
-        "de" : ("de", "xml-eu.amazon.com"),
-        "jp" : ("jp", "xml.amazon.co.jp")
+        "us" : (None, "ecs.amazonaws.com/onca/xml?Service=AWSECommerceService"),   
+        "uk" : ("uk", "ecs.amazonaws.co.uk/onca/xml?Service=AWSECommerceService"),
+        "de" : ("de", "ecs.amazonaws.de/onca/xml?Service=AWSECommerceService"),
+        "ca" : ("ca", "ecs.amazonaws.ca/onca/xml?Service=AWSECommerceService"),
+        "fr" : ("fr", "ecs.amazonaws.fr/onca/xml?Service=AWSECommerceService"),
+        "jp" : ("jp", "ecs.amazonaws.jp/onca/xml?Service=AWSECommerceService")
     }
 
 ## administrative functions
@@ -220,24 +222,25 @@
 
 def buildURL(search_type, keyword, product_line, type, page, license_key, locale, associate):
     _checkLocaleSupported(locale)
-    url = "http://" + _supportedLocales[locale][1] + "/onca/xml3?f=xml"
-    url += "&t=%s" % associate
-    url += "&dev-t=%s" % license_key.strip()
-    url += "&type=%s" % type
-    if _supportedLocales[locale][0]:
-        url += "&locale=%s" % _supportedLocales[locale][0]
-    if page:
-        url += "&page=%s" % page
+    url = "http://" + _supportedLocales[locale][1]
+    url += "&AssociateTag=%s" % associate
+    url += "&AWSAccessKeyId=%s" % license_key.strip()
+    url += "&ResponseGroup=%s" % type
+    #if _supportedLocales[locale][0]:
+    #    url += "&locale=%s" % _supportedLocales[locale][0]
+    #if page:
+    #    url += "&page=%s" % page
     if product_line:
-        url += "&mode=%s" % product_line
-    url += "&%s=%s" % (search_type, urllib.quote(keyword))
+        url += "&SearchIndex=%s" % product_line
+    url += "&Operation=%s" % search_type
+    url += "&Keywords=%s" % urllib.quote(keyword)
     return url
 
 
 ## main functions
 
 
-def search(search_type, keyword, product_line, type = "heavy", page = None,
+def search(search_type, keyword, product_line, type = "Large", page = None,
            license_key=None, http_proxy = None, locale = None, associate = None):
     """search Amazon
 
@@ -300,66 +303,64 @@
     if search_type == "BlendedSearch":
         data = unmarshal(xmldoc).BlendedSearch
     else:    
-        data = unmarshal(xmldoc).ProductInfo        
+        data = unmarshal(xmldoc).ItemSearchResponse        
         
-    if hasattr(data, 'ErrorMsg'):
-        raise AmazonError, data.ErrorMsg
+    if hasattr(data, 'Error'):
+        raise AmazonError, data.Error
     else:
         if search_type == "BlendedSearch":
-            # a list of ProductLine containing a list of ProductInfo
-            # containing a list of Details.
             return data 
         else:            
-            return data.Details
+            return data.Items
 
-def searchByKeyword(keyword, product_line="books", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    return search("KeywordSearch", keyword, product_line, type, page, license_key, http_proxy, locale, associate)
+def searchByKeyword(keyword, product_line="Books", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    return search("ItemSearch", keyword, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def browseBestSellers(browse_node, product_line="books", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def browseBestSellers(browse_node, product_line="Books", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("BrowseNodeSearch", browse_node, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByASIN(ASIN, type="heavy", license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByASIN(ASIN, type="Large", license_key=None, http_proxy=None, locale=None, associate=None):
     return search("AsinSearch", ASIN, None, type, None, license_key, http_proxy, locale, associate)
 
-def searchByUPC(UPC, type="heavy", license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByUPC(UPC, type="Large", license_key=None, http_proxy=None, locale=None, associate=None):
     return search("UpcSearch", UPC, None, type, None, license_key, http_proxy, locale, associate)
 
-def searchByAuthor(author, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    return search("AuthorSearch", author, "books", type, page, license_key, http_proxy, locale, associate)
+def searchByAuthor(author, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    return search("AuthorSearch", author, "Books", type, page, license_key, http_proxy, locale, associate)
 
-def searchByArtist(artist, product_line="music", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByArtist(artist, product_line="Music", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     if product_line not in ("music", "classical"):
-        raise AmazonError, "product_line must be in ('music', 'classical')"
+        raise AmazonError, "product_line must be in ('Music', 'Classical')"
     return search("ArtistSearch", artist, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByActor(actor, product_line="dvd", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    if product_line not in ("dvd", "vhs", "video"):
-        raise AmazonError, "product_line must be in ('dvd', 'vhs', 'video')"
+def searchByActor(actor, product_line="DVD", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    if product_line not in ("DVD", "VHS", "Video"):
+        raise AmazonError, "product_line must be in ('DVD', 'VHS', 'Video')"
     return search("ActorSearch", actor, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByDirector(director, product_line="dvd", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
-    if product_line not in ("dvd", "vhs", "video"):
-        raise AmazonError, "product_line must be in ('dvd', 'vhs', 'video')"
+def searchByDirector(director, product_line="DVD", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+    if product_line not in ("DVD", "VHS", "Video"):
+        raise AmazonError, "product_line must be in ('DVD', 'VHS', 'Video')"
     return search("DirectorSearch", director, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByManufacturer(manufacturer, product_line="pc-hardware", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByManufacturer(manufacturer, product_line="pc-hardware", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     if product_line not in ("electronics", "kitchen", "videogames", "software", "photo", "pc-hardware"):
         raise AmazonError, "product_line must be in ('electronics', 'kitchen', 'videogames', 'software', 'photo', 'pc-hardware')"
     return search("ManufacturerSearch", manufacturer, product_line, type, page, license_key, http_proxy, locale, associate)
 
-def searchByListMania(listManiaID, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByListMania(listManiaID, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("ListManiaSearch", listManiaID, None, type, page, license_key, http_proxy, locale, associate)
 
-def searchSimilar(ASIN, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchSimilar(ASIN, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("SimilaritySearch", ASIN, None, type, page, license_key, http_proxy, locale, associate)
 
-def searchByWishlist(wishlistID, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByWishlist(wishlistID, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("WishlistSearch", wishlistID, None, type, page, license_key, http_proxy, locale, associate)
 
-def searchByPower(keyword, product_line="books", type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByPower(keyword, product_line="Books", type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("PowerSearch", keyword, product_line, type, page, license_key, http_proxy, locale, associate)
     # >>> RecentKing = amazon.searchByPower('author:Stephen King and pubdate:2003')
     # >>> SnowCrash = amazon.searchByPower('title:Snow Crash')
 
-def searchByBlended(keyword, type="heavy", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
+def searchByBlended(keyword, type="Large", page=1, license_key=None, http_proxy=None, locale=None, associate=None):
     return search("BlendedSearch", keyword, None, type, page, license_key, http_proxy, locale, associate)

Modified: trunk/lib/edit.py
===================================================================
--- trunk/lib/edit.py	2008-04-12 14:03:43 UTC (rev 946)
+++ trunk/lib/edit.py	2008-04-24 22:27:42 UTC (rev 947)
@@ -131,19 +131,20 @@
 	amazon.setLicense("04GDDMMXX8X9CJ1B22G2")
 
 	locale = self.config.get('amazon_locale', 0, section='add')
-	if locale == 1:
+	keyword = self.widgets['movie']['o_title'].get_text()
+	if locale == '1':
 		locale = 'uk'
-	elif locale == 2:
+	elif locale == '2':
 		locale = 'de'
-	elif locale == 3:
+		keyword = self.widgets['movie']['title'].get_text()
+	elif locale == '3':
 		locale = 'uk'
 	else:
 		locale = None
 
 	try:
-		result = amazon.searchByKeyword(self.widgets['movie']['o_title'].get_text(), \
-						type="lite", product_line="dvd", locale=locale)
-		self.debug.show("Posters found on amazon: %s posters" % len(result))
+		result = amazon.searchByKeyword(keyword, type="Large", product_line="DVD", locale=locale)
+		self.debug.show("Posters found on amazon: %s posters" % result.TotalResults)
 	except:
 		gutils.warning(self, _("No posters found for this movie."))
 		return
@@ -151,23 +152,23 @@
 	from widgets import connect_poster_signals, reconnect_add_signals
 	connect_poster_signals(self, get_poster_select_dc, result, current_poster)
 
-	if not len(result):
+	if not len(result.Item):
 		gutils.warning(self, _("No posters found for this movie."))
 		reconnect_add_signals(self)
 		return
 
-	for f in range(len(result)):
-		if self.widgets['movie']['o_title'].get_text() == result[f].ProductName:
+	for f in range(len(result.Item)):
+		if self.widgets['movie']['o_title'].get_text() == result.Item[f].ItemAttributes.Title:
 			get_poster(self, f, result, current_poster)
 			return
 
 	self.treemodel_results.clear()
 	self.widgets['add']['b_get_from_web'].set_sensitive(False) # disable movie plugins (result window is shared)
 
-	for f in range(len(result)):
+	for f in range(len(result.Item)):
 
-		if (len(result[f].ImageUrlLarge)):
-			title = result[f].ProductName
+		if (len(result.Item[f].LargeImage.URL)):
+			title = result.Item[f].ItemAttributes.Title
 			myiter = self.treemodel_results.insert_before(None, None)
 			self.treemodel_results.set_value(myiter, 0, str(f))
 			self.treemodel_results.set_value(myiter, 1, title)
@@ -195,10 +196,10 @@
 	file_to_copy = tempfile.mktemp(suffix=self.widgets['movie']['number'].get_text(), \
 		dir=self.locations['temp'])
 	file_to_copy += ".jpg"
-	if len(result[f].ImageUrlLarge):
+	if len(result.Item[f].LargeImage.URL):
 		try:
 			progress = movie.Progress(self.widgets['window'],_("Fetching poster"),_("Wait a moment"))
-			retriever = movie.Retriever(result[f].ImageUrlLarge, self.widgets['window'], progress, file_to_copy)
+			retriever = movie.Retriever(result.Item[f].LargeImage.URL, self.widgets['window'], progress, file_to_copy)
 			retriever.start()
 			while retriever.isAlive():
 				progress.pulse()
@@ -219,7 +220,7 @@
 
 		if im.size == (1,1):
 			from urllib import FancyURLopener, urlretrieve
-			url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result[f].Asin).read()
+			url = FancyURLopener().open("http://www.amazon.com/gp/product/images/%s" % result.Item[f].ASIN).read()
 			if url.find('no-img-sm._V47056216_.gif') > 0:
 				self.debug.show('No image available')
 				gutils.warning(self, _("Sorry. This movie is listed but has no poster available at Amazon.com."))



